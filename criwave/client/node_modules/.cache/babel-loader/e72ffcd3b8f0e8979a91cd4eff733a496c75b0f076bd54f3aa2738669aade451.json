{"ast":null,"code":"/**\r\n * Utilidades para manejar eventos del menú de navegación\r\n * \r\n * Este archivo proporciona funciones para actualizar el estado de expansión\r\n * de los elementos del menú sin mutar directamente las props\r\n */\nimport { findItemById } from '../../config/navigation';\n\n// Event listener para manejar la expansión de elementos del menú\nconst setupMenuListeners = (navigationItems, updateNavigationState) => {\n  if (!navigationItems || !updateNavigationState) {\n    console.error('setupMenuListeners: Se requieren navigationItems y updateNavigationState');\n    return () => {}; // Retornar una función vacía para evitar errores\n  }\n\n  // Función para manejar el evento de expansión\n  const handleMenuItemExpanded = event => {\n    if (!event || !event.detail) return;\n    const {\n      id,\n      expanded\n    } = event.detail;\n    if (!id) return;\n\n    // Verificar si navigationItems es un ref (valor reactivo)\n    const itemsValue = navigationItems.value || navigationItems;\n    const itemToUpdate = findItemById(id, itemsValue);\n    if (itemToUpdate) {\n      // Crear una copia profunda del array para evitar mutaciones directas\n      const updatedItems = JSON.parse(JSON.stringify(itemsValue));\n\n      // Encontrar y actualizar el elemento en la copia\n      const updatedItem = findItemById(id, updatedItems);\n      if (updatedItem) {\n        updatedItem.expanded = expanded;\n\n        // Actualizar el estado en el componente padre\n        updateNavigationState(updatedItems);\n      }\n    }\n  };\n\n  // Agregar event listener\n  window.addEventListener('menu-item-expanded', handleMenuItemExpanded);\n\n  // Devolver una función para eliminar el event listener\n  return () => {\n    window.removeEventListener('menu-item-expanded', handleMenuItemExpanded);\n  };\n};\nexport { setupMenuListeners };","map":{"version":3,"names":["findItemById","setupMenuListeners","navigationItems","updateNavigationState","console","error","handleMenuItemExpanded","event","detail","id","expanded","itemsValue","value","itemToUpdate","updatedItems","JSON","parse","stringify","updatedItem","window","addEventListener","removeEventListener"],"sources":["C:/Users/Pc/Desktop/Proyectos/criwave/client/src/components/layout/MenuListeners.js"],"sourcesContent":["/**\r\n * Utilidades para manejar eventos del menú de navegación\r\n * \r\n * Este archivo proporciona funciones para actualizar el estado de expansión\r\n * de los elementos del menú sin mutar directamente las props\r\n */\r\nimport { findItemById } from '../../config/navigation';\r\n\r\n// Event listener para manejar la expansión de elementos del menú\r\nconst setupMenuListeners = (navigationItems, updateNavigationState) => {\r\n  if (!navigationItems || !updateNavigationState) {\r\n    console.error('setupMenuListeners: Se requieren navigationItems y updateNavigationState');\r\n    return () => {}; // Retornar una función vacía para evitar errores\r\n  }\r\n\r\n  // Función para manejar el evento de expansión\r\n  const handleMenuItemExpanded = (event) => {\r\n    if (!event || !event.detail) return;\r\n    \r\n    const { id, expanded } = event.detail;\r\n    if (!id) return;\r\n    \r\n    // Verificar si navigationItems es un ref (valor reactivo)\r\n    const itemsValue = navigationItems.value || navigationItems;\r\n    const itemToUpdate = findItemById(id, itemsValue);\r\n    \r\n    if (itemToUpdate) {\r\n      // Crear una copia profunda del array para evitar mutaciones directas\r\n      const updatedItems = JSON.parse(JSON.stringify(itemsValue));\r\n      \r\n      // Encontrar y actualizar el elemento en la copia\r\n      const updatedItem = findItemById(id, updatedItems);\r\n      if (updatedItem) {\r\n        updatedItem.expanded = expanded;\r\n        \r\n        // Actualizar el estado en el componente padre\r\n        updateNavigationState(updatedItems);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Agregar event listener\r\n  window.addEventListener('menu-item-expanded', handleMenuItemExpanded);\r\n  \r\n  // Devolver una función para eliminar el event listener\r\n  return () => {\r\n    window.removeEventListener('menu-item-expanded', handleMenuItemExpanded);\r\n  };\r\n};\r\n\r\nexport { setupMenuListeners }; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,yBAAyB;;AAEtD;AACA,MAAMC,kBAAkB,GAAGA,CAACC,eAAe,EAAEC,qBAAqB,KAAK;EACrE,IAAI,CAACD,eAAe,IAAI,CAACC,qBAAqB,EAAE;IAC9CC,OAAO,CAACC,KAAK,CAAC,0EAA0E,CAAC;IACzF,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;EACnB;;EAEA;EACA,MAAMC,sBAAsB,GAAIC,KAAK,IAAK;IACxC,IAAI,CAACA,KAAK,IAAI,CAACA,KAAK,CAACC,MAAM,EAAE;IAE7B,MAAM;MAAEC,EAAE;MAAEC;IAAS,CAAC,GAAGH,KAAK,CAACC,MAAM;IACrC,IAAI,CAACC,EAAE,EAAE;;IAET;IACA,MAAME,UAAU,GAAGT,eAAe,CAACU,KAAK,IAAIV,eAAe;IAC3D,MAAMW,YAAY,GAAGb,YAAY,CAACS,EAAE,EAAEE,UAAU,CAAC;IAEjD,IAAIE,YAAY,EAAE;MAChB;MACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACN,UAAU,CAAC,CAAC;;MAE3D;MACA,MAAMO,WAAW,GAAGlB,YAAY,CAACS,EAAE,EAAEK,YAAY,CAAC;MAClD,IAAII,WAAW,EAAE;QACfA,WAAW,CAACR,QAAQ,GAAGA,QAAQ;;QAE/B;QACAP,qBAAqB,CAACW,YAAY,CAAC;MACrC;IACF;EACF,CAAC;;EAED;EACAK,MAAM,CAACC,gBAAgB,CAAC,oBAAoB,EAAEd,sBAAsB,CAAC;;EAErE;EACA,OAAO,MAAM;IACXa,MAAM,CAACE,mBAAmB,CAAC,oBAAoB,EAAEf,sBAAsB,CAAC;EAC1E,CAAC;AACH,CAAC;AAED,SAASL,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}