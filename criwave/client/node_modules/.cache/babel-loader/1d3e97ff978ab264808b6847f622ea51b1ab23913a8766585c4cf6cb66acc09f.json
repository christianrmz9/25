{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent } from 'vue';\nimport VueApexCharts from 'vue3-apexcharts';\nexport default defineComponent({\n  name: 'DateRangeChart',\n  components: {\n    apexchart: VueApexCharts\n  },\n  data() {\n    return {\n      startDate: null,\n      endDate: null,\n      today: new Date().toISOString().split('T')[0],\n      isLoading: false,\n      isDarkMode: false,\n      series: [{\n        name: 'Ventas',\n        data: []\n      }],\n      chartOptions: {\n        chart: {\n          type: 'area',\n          height: 350,\n          background: 'transparent',\n          foreColor: '#666',\n          toolbar: {\n            show: true,\n            tools: {\n              download: true,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              reset: true\n            }\n          },\n          animations: {\n            enabled: true,\n            easing: 'easeinout',\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 150\n            },\n            dynamicAnimation: {\n              enabled: true,\n              speed: 350\n            }\n          }\n        },\n        colors: ['#2E93fA'],\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.45,\n            opacityTo: 0.05,\n            stops: [0, 95, 100]\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 2\n        },\n        grid: {\n          show: true,\n          borderColor: '#f1f1f1',\n          strokeDashArray: 3,\n          position: 'back'\n        },\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: '#666',\n              fontSize: '12px'\n            }\n          },\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Ventas ($)',\n            style: {\n              fontSize: '14px',\n              color: '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: '#666'\n            },\n            formatter: function (value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value);\n            }\n          }\n        },\n        tooltip: {\n          shared: true,\n          intersect: false,\n          y: {\n            formatter: function (value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value);\n            }\n          }\n        }\n      }\n    };\n  },\n  computed: {\n    hasDateRange() {\n      return this.startDate && this.endDate;\n    },\n    hasData() {\n      return this.series[0].data.length > 0;\n    }\n  },\n  created() {\n    this.checkDarkMode();\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', this.checkDarkMode);\n  },\n  beforeUnmount() {\n    window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', this.checkDarkMode);\n  },\n  methods: {\n    checkDarkMode() {\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme');\n      this.updateChartTheme();\n    },\n    updateChartTheme() {\n      const style = getComputedStyle(document.documentElement);\n      const bgSecondary = style.getPropertyValue('--bg-secondary').trim();\n      const textSecondary = style.getPropertyValue('--text-secondary').trim();\n      const borderColor = style.getPropertyValue('--border-color').trim();\n      this.chartOptions = {\n        ...this.chartOptions,\n        chart: {\n          ...this.chartOptions.chart,\n          background: bgSecondary,\n          foreColor: textSecondary\n        },\n        grid: {\n          ...this.chartOptions.grid,\n          borderColor: borderColor\n        },\n        xaxis: {\n          ...this.chartOptions.xaxis,\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          }\n        },\n        yaxis: {\n          ...this.chartOptions.yaxis,\n          title: {\n            style: {\n              color: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          }\n        },\n        tooltip: {\n          theme: this.isDarkMode ? 'dark' : 'light'\n        }\n      };\n    },\n    async loadData() {\n      if (!this.hasDateRange) return;\n      this.isLoading = true;\n      this.series[0].data = [];\n      try {\n        const startDate = new Date(this.startDate);\n        const endDate = new Date(this.endDate);\n        const diffDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));\n        const data = [];\n        let currentValue = Math.floor(Math.random() * 500000) + 100000;\n        for (let i = 0; i <= diffDays; i++) {\n          const date = new Date(startDate);\n          date.setDate(startDate.getDate() + i);\n          const variation = Math.random() * 0.2 - 0.1;\n          currentValue = Math.floor(currentValue * (1 + variation));\n          currentValue = Math.max(currentValue, 100000);\n          data.push([date.getTime(), currentValue]);\n        }\n        this.series = [{\n          name: 'Ventas',\n          data: data\n        }];\n      } catch (error) {\n        console.error('Error loading data:', error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    clearDates() {\n      this.startDate = null;\n      this.endDate = null;\n      this.series[0].data = [];\n    },\n    confirmDateRange() {\n      if (this.hasDateRange) {\n        this.loadData();\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineComponent","VueApexCharts","name","components","apexchart","data","startDate","endDate","today","Date","toISOString","split","isLoading","isDarkMode","series","chartOptions","chart","type","height","background","foreColor","toolbar","show","tools","download","selection","zoom","zoomin","zoomout","pan","reset","animations","enabled","easing","speed","animateGradually","delay","dynamicAnimation","colors","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","dataLabels","stroke","curve","width","grid","borderColor","strokeDashArray","position","markers","size","strokeWidth","hover","xaxis","labels","style","fontSize","axisBorder","axisTicks","yaxis","title","text","color","formatter","value","Intl","NumberFormat","currency","format","tooltip","shared","intersect","y","computed","hasDateRange","hasData","length","created","checkDarkMode","window","matchMedia","addEventListener","beforeUnmount","removeEventListener","methods","document","documentElement","classList","contains","updateChartTheme","getComputedStyle","bgSecondary","getPropertyValue","trim","textSecondary","theme","loadData","diffDays","Math","ceil","currentValue","floor","random","i","date","setDate","getDate","variation","max","push","getTime","error","console","clearDates","confirmDateRange"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\DateRangeChart.vue"],"sourcesContent":["<template>\n  <div class=\"date-range-chart\">\n    <div class=\"chart-header\">\n      <h3>Ventas por Rango de Fecha</h3>\n      <div class=\"date-controls\">\n        <div class=\"date-range-inputs\">\n          <div class=\"date-input-group\">\n            <label>Fecha inicial:</label>\n            <v-date-picker\n              v-model=\"startDate\"\n              :max=\"endDate || today\"\n              :title=\"'Fecha inicial'\"\n              :header=\"'Seleccionar fecha inicial'\"\n            ></v-date-picker>\n          </div>\n          <div class=\"date-input-group\">\n            <label>Fecha final:</label>\n            <v-date-picker\n              v-model=\"endDate\"\n              :min=\"startDate\"\n              :max=\"today\"\n              :title=\"'Fecha final'\"\n              :header=\"'Seleccionar fecha final'\"\n            ></v-date-picker>\n          </div>\n        </div>\n        <div class=\"date-actions\">\n          <v-btn\n            color=\"error\"\n            variant=\"text\"\n            @click=\"clearDates\"\n          >\n            Limpiar\n          </v-btn>\n          <v-btn\n            color=\"primary\"\n            variant=\"text\"\n            @click=\"confirmDateRange\"\n            :disabled=\"!hasDateRange\"\n          >\n            Aplicar\n          </v-btn>\n        </div>\n      </div>\n    </div>\n      \n    <div class=\"chart-container\" v-if=\"hasDateRange\">\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\n        <div class=\"loading-spinner\"></div>\n      </div>\n      <apexchart\n        v-if=\"hasData\"\n        type=\"area\"\n        height=\"350\"\n        :options=\"chartOptions\"\n        :series=\"series\"\n      ></apexchart>\n      <div v-else-if=\"!isLoading\" class=\"no-data-message\">\n        Selecciona un rango de fechas para visualizar los datos\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue'\nimport VueApexCharts from 'vue3-apexcharts'\n\nexport default defineComponent({\n  name: 'DateRangeChart',\n  components: {\n    apexchart: VueApexCharts\n  },\n  \n  data() {\n    return {\n      startDate: null,\n      endDate: null,\n      today: new Date().toISOString().split('T')[0],\n      isLoading: false,\n      isDarkMode: false,\n      series: [{\n        name: 'Ventas',\n        data: []\n      }],\n      chartOptions: {\n        chart: {\n          type: 'area',\n          height: 350,\n          background: 'transparent',\n          foreColor: '#666',\n          toolbar: {\n            show: true,\n            tools: {\n              download: true,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              reset: true\n            }\n          },\n          animations: {\n            enabled: true,\n            easing: 'easeinout',\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 150\n            },\n            dynamicAnimation: {\n              enabled: true,\n              speed: 350\n            }\n          }\n        },\n        colors: ['#2E93fA'],\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.45,\n            opacityTo: 0.05,\n            stops: [0, 95, 100]\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 2\n        },\n        grid: {\n          show: true,\n          borderColor: '#f1f1f1',\n          strokeDashArray: 3,\n          position: 'back'\n        },\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: '#666',\n              fontSize: '12px'\n            }\n          },\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Ventas ($)',\n            style: {\n              fontSize: '14px',\n              color: '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: '#666'\n            },\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        },\n        tooltip: {\n          shared: true,\n          intersect: false,\n          y: {\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        }\n      }\n    }\n  },\n\n  computed: {\n    hasDateRange() {\n      return this.startDate && this.endDate\n    },\n\n    hasData() {\n      return this.series[0].data.length > 0\n    }\n  },\n\n  created() {\n    this.checkDarkMode()\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', this.checkDarkMode)\n  },\n  \n  beforeUnmount() {\n    window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', this.checkDarkMode)\n  },\n  \n  methods: {\n    checkDarkMode() {\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme')\n      this.updateChartTheme()\n    },\n\n    updateChartTheme() {\n      const style = getComputedStyle(document.documentElement)\n      const bgSecondary = style.getPropertyValue('--bg-secondary').trim()\n      const textSecondary = style.getPropertyValue('--text-secondary').trim()\n      const borderColor = style.getPropertyValue('--border-color').trim()\n      \n      this.chartOptions = {\n        ...this.chartOptions,\n        chart: {\n          ...this.chartOptions.chart,\n          background: bgSecondary,\n          foreColor: textSecondary\n        },\n        grid: {\n          ...this.chartOptions.grid,\n          borderColor: borderColor\n        },\n        xaxis: {\n          ...this.chartOptions.xaxis,\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          }\n        },\n        yaxis: {\n          ...this.chartOptions.yaxis,\n          title: {\n            style: {\n              color: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          }\n        },\n        tooltip: {\n          theme: this.isDarkMode ? 'dark' : 'light'\n        }\n      }\n    },\n\n    async loadData() {\n      if (!this.hasDateRange) return\n\n      this.isLoading = true\n      this.series[0].data = []\n      \n      try {\n        const startDate = new Date(this.startDate)\n        const endDate = new Date(this.endDate)\n        const diffDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24))\n        \n        const data = []\n        let currentValue = Math.floor(Math.random() * 500000) + 100000\n        \n        for (let i = 0; i <= diffDays; i++) {\n          const date = new Date(startDate)\n          date.setDate(startDate.getDate() + i)\n          \n          const variation = (Math.random() * 0.2) - 0.1\n          currentValue = Math.floor(currentValue * (1 + variation))\n          currentValue = Math.max(currentValue, 100000)\n          \n          data.push([\n            date.getTime(),\n            currentValue\n          ])\n        }\n        \n        this.series = [{\n          name: 'Ventas',\n          data: data\n        }]\n      } catch (error) {\n        console.error('Error loading data:', error)\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    clearDates() {\n      this.startDate = null\n      this.endDate = null\n      this.series[0].data = []\n    },\n\n    confirmDateRange() {\n      if (this.hasDateRange) {\n        this.loadData()\n      }\n    }\n  }\n})\n</script>\n\n<style scoped>\n.date-range-chart {\n  background: var(--bg-secondary);\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.chart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.date-controls {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  gap: 15px;\n}\n\n.chart-container {\n  position: relative;\n  min-height: 350px;\n  background: var(--bg-primary);\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: var(--bg-overlay);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 10;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid var(--spinner-track);\n  border-top-color: var(--spinner-color);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n.no-data-message {\n  height: 350px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n:deep(.v-date-picker) {\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n:deep(.v-date-picker-month) {\n  padding: 0 12px;\n}\n\n:deep(.v-date-picker-month__day) {\n  border-radius: 4px;\n}\n\n:deep(.v-date-picker-month__day--selected) {\n  background-color: var(--primary) !important;\n}\n\n:deep(.v-date-picker-month__day--range) {\n  background-color: var(--primary-light) !important;\n  opacity: 0.4;\n}\n\n.date-range-inputs {\n  display: flex;\n  gap: 20px;\n  margin-bottom: 16px;\n}\n\n.date-input-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.date-input-group label {\n  font-size: 0.9rem;\n  color: var(--text-secondary);\n}\n\n.date-actions {\n  display: flex;\n  gap: 8px;\n  justify-content: flex-end;\n}\n\n@media (max-width: 768px) {\n  .chart-header {\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  .date-controls {\n    width: 100%;\n    justify-content: center;\n  }\n\n  :deep(.v-date-picker) {\n    width: 100%;\n  }\n\n  .date-range-inputs {\n    flex-direction: column;\n  }\n\n  .date-actions {\n    width: 100%;\n    justify-content: space-between;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}