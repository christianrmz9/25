{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"revenue-chart\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"chart-controls\"\n};\nconst _hoisted_4 = {\n  class: \"period-selector\"\n};\nconst _hoisted_5 = {\n  class: \"comparison-toggle\"\n};\nconst _hoisted_6 = {\n  class: \"switch\"\n};\nconst _hoisted_7 = {\n  class: \"chart-container\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", {\n    class: \"chart-title\"\n  }, \"Total Ingresos\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectedPeriod = $event),\n    class: \"period-select\"\n  }, _cache[2] || (_cache[2] = [_createElementVNode(\"option\", {\n    value: \"day\"\n  }, \"Hoy\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"week\"\n  }, \"Esta semana\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"month\"\n  }, \"Este mes\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"year\"\n  }, \"Este año\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedPeriod]])]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"label\", _hoisted_6, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.showComparison = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, _ctx.showComparison]]), _cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n    class: \"slider\"\n  }, null, -1 /* HOISTED */))]), _cache[4] || (_cache[4] = _createElementVNode(\"span\", {\n    class: \"toggle-label\"\n  }, \"Comparar con período anterior\", -1 /* HOISTED */))])])]), _createElementVNode(\"div\", _hoisted_7, [_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _cache[6] || (_cache[6] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createVNode(_component_apexchart, {\n    type: \"area\",\n    height: \"350\",\n    options: _ctx.chartOptions,\n    series: _ctx.series\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_cache","$event","_ctx","selectedPeriod","value","_hoisted_5","_hoisted_6","type","showComparison","_hoisted_7","isLoading","_hoisted_8","_createCommentVNode","_createVNode","_component_apexchart","height","options","chartOptions","series"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"revenue-chart\">\r\n    <div class=\"chart-header\">\r\n        <h2 class=\"chart-title\">Total Ingresos</h2>\r\n      <div class=\"chart-controls\">\r\n      <div class=\"period-selector\">\r\n          <select v-model=\"selectedPeriod\" class=\"period-select\">\r\n            <option value=\"day\">Hoy</option>\r\n            <option value=\"week\">Esta semana</option>\r\n            <option value=\"month\">Este mes</option>\r\n            <option value=\"year\">Este año</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"comparison-toggle\">\r\n          <label class=\"switch\">\r\n            <input type=\"checkbox\" v-model=\"showComparison\">\r\n            <span class=\"slider\"></span>\r\n          </label>\r\n          <span class=\"toggle-label\">Comparar con período anterior</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"chart-container\">\r\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n        <div class=\"loading-spinner\"></div>\r\n          </div>\r\n      <apexchart\r\n        type=\"area\"\r\n        height=\"350\"\r\n        :options=\"chartOptions\"\r\n        :series=\"series\"\r\n      ></apexchart>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport VueApexCharts from 'vue3-apexcharts'\r\n\r\nexport default defineComponent({\r\n  name: 'RevenueChart',\r\n  components: {\r\n    apexchart: VueApexCharts\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      selectedPeriod: 'month',\r\n      showComparison: false,\r\n      isLoading: false,\r\n      isDarkMode: false,\r\n      series: [{\r\n        name: 'Ingresos',\r\n        data: []\r\n      }],\r\n      chartOptions: {\r\n        chart: {\r\n          type: 'area',\r\n          height: 350,\r\n          background: this.isDarkMode ? '#000000' : '#fff',\r\n          foreColor: '#666',\r\n          toolbar: {\r\n            show: true,\r\n            tools: {\r\n              download: true,\r\n              selection: true,\r\n              zoom: true,\r\n              zoomin: true,\r\n              zoomout: true,\r\n              pan: true,\r\n              reset: true\r\n            }\r\n          },\r\n          animations: {\r\n            enabled: true,\r\n            easing: 'easeinout',\r\n            speed: 800,\r\n            animateGradually: {\r\n              enabled: true,\r\n              delay: 150\r\n            },\r\n            dynamicAnimation: {\r\n              enabled: true,\r\n              speed: 350\r\n            }\r\n          }\r\n        },\r\n        plotOptions: {\r\n          area: {\r\n            fillTo: 'origin'\r\n          }\r\n        },\r\n        colors: ['#2E93fA', '#66DA26'],\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            shadeIntensity: 1,\r\n            opacityFrom: 0.45,\r\n            opacityTo: 0.05,\r\n            stops: [0, 95, 100]\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          curve: 'smooth',\r\n          width: 2\r\n        },\r\n        grid: {\r\n          show: true,\r\n          borderColor: this.isDarkMode ? '#333' : '#f1f1f1',\r\n          strokeDashArray: 3,\r\n          position: 'back',\r\n          padding: {\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            left: 0\r\n          },\r\n          xaxis: {\r\n            lines: {\r\n              show: true\r\n            }\r\n          },\r\n          yaxis: {\r\n            lines: {\r\n              show: true\r\n            }\r\n          }\r\n        },\r\n        markers: {\r\n          size: 4,\r\n          colors: ['#2E93fA'],\r\n          strokeColors: this.isDarkMode ? '#333' : '#fff',\r\n          strokeWidth: 2,\r\n          hover: {\r\n            size: 7\r\n          }\r\n        },\r\n        xaxis: {\r\n          type: 'datetime',\r\n          labels: {\r\n            style: {\r\n              colors: this.isDarkMode ? '#999' : '#666',\r\n              fontSize: '12px'\r\n            }\r\n          },\r\n          axisBorder: {\r\n            show: false\r\n          },\r\n          axisTicks: {\r\n            show: false\r\n          },\r\n          crosshairs: {\r\n            show: true,\r\n            stroke: {\r\n              color: '#666',\r\n              width: 1,\r\n              dashArray: 3\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Ingresos ($)',\r\n            style: {\r\n              fontSize: '14px',\r\n              color: this.isDarkMode ? '#999' : '#666'\r\n            }\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: this.isDarkMode ? '#999' : '#666'\r\n            },\r\n            formatter: function(value) {\r\n              return value >= 1000000 \r\n                ? `$${(value/1000000).toFixed(1)}M` \r\n                : value >= 1000 \r\n                  ? `$${(value/1000).toFixed(1)}K` \r\n                  : `$${value}`\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          theme: this.isDarkMode ? 'dark' : 'light',\r\n          shared: true,\r\n          intersect: false,\r\n          y: {\r\n            formatter: function(value) {\r\n              return new Intl.NumberFormat('es-MX', {\r\n                style: 'currency',\r\n                currency: 'MXN'\r\n              }).format(value)\r\n            }\r\n          }\r\n        },\r\n        theme: {\r\n          mode: this.isDarkMode ? 'dark' : 'light',\r\n          palette: 'palette1'\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  created() {\r\n    // Detectar el modo oscuro inicial\r\n    this.checkDarkMode()\r\n    // Escuchar cambios en el modo oscuro\r\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', this.checkDarkMode)\r\n  },\r\n\r\n  mounted() {\r\n    // Cargar datos iniciales con comparación\r\n    this.loadData(this.selectedPeriod)\r\n  },\r\n\r\n  beforeUnmount() {\r\n    // Limpiar el listener cuando el componente se destruye\r\n    window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', this.checkDarkMode)\r\n  },\r\n\r\n  watch: {\r\n    selectedPeriod: {\r\n      handler(newPeriod) {\r\n        this.loadData(newPeriod)\r\n      },\r\n      immediate: false // Cambiado a false porque ya lo manejamos en mounted\r\n    },\r\n    showComparison(newValue) {\r\n      if (newValue) {\r\n        this.loadComparisonData()\r\n      } else {\r\n        this.series = this.series.slice(0, 1)\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    checkDarkMode() {\r\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme')\r\n      this.updateChartTheme()\r\n    },\r\n\r\n    updateChartTheme() {\r\n      const style = getComputedStyle(document.documentElement)\r\n      const bgSecondary = style.getPropertyValue('--bg-secondary').trim()\r\n      \r\n      this.chartOptions = {\r\n        ...this.chartOptions,\r\n        chart: {\r\n          ...this.chartOptions.chart,\r\n          background: bgSecondary,\r\n          foreColor: this.isDarkMode ? '#999' : '#666'\r\n        },\r\n        grid: {\r\n          ...this.chartOptions.grid,\r\n          borderColor: this.isDarkMode ? '#333' : '#f1f1f1'\r\n        },\r\n        colors: ['#2E93fA', '#66DA26'],\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            shadeIntensity: 1,\r\n            opacityFrom: 0.45,\r\n            opacityTo: 0.05,\r\n            stops: [0, 95, 100]\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          curve: 'smooth',\r\n          width: 2\r\n        },\r\n        markers: {\r\n          size: 4,\r\n          colors: ['#2E93fA'],\r\n          strokeColors: this.isDarkMode ? '#333' : '#fff',\r\n          strokeWidth: 2,\r\n          hover: {\r\n            size: 7\r\n          }\r\n        },\r\n        xaxis: {\r\n          type: 'datetime',\r\n          labels: {\r\n            style: {\r\n              colors: this.isDarkMode ? '#999' : '#666',\r\n              fontSize: '12px'\r\n            }\r\n          },\r\n          axisBorder: {\r\n            show: false\r\n          },\r\n          axisTicks: {\r\n            show: false\r\n          },\r\n          crosshairs: {\r\n            show: true,\r\n            stroke: {\r\n              color: '#666',\r\n              width: 1,\r\n              dashArray: 3\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Ingresos ($)',\r\n            style: {\r\n              fontSize: '14px',\r\n              color: this.isDarkMode ? '#999' : '#666'\r\n            }\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: this.isDarkMode ? '#999' : '#666'\r\n            },\r\n            formatter: function(value) {\r\n              return value >= 1000000 \r\n                ? `$${(value/1000000).toFixed(1)}M` \r\n                : value >= 1000 \r\n                  ? `$${(value/1000).toFixed(1)}K` \r\n                  : `$${value}`\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          theme: this.isDarkMode ? 'dark' : 'light',\r\n          shared: true,\r\n          intersect: false,\r\n          y: {\r\n            formatter: function(value) {\r\n              return new Intl.NumberFormat('es-MX', {\r\n                style: 'currency',\r\n                currency: 'MXN'\r\n              }).format(value)\r\n            }\r\n          }\r\n        },\r\n        theme: {\r\n          ...this.chartOptions.theme,\r\n          mode: this.isDarkMode ? 'dark' : 'light'\r\n        }\r\n      }\r\n    },\r\n\r\n    async loadData(period) {\r\n      this.isLoading = true\r\n      try {\r\n        const data = this.generateMockData(period)\r\n        // Siempre empezar con solo la serie principal\r\n        this.series = [{\r\n          name: 'Ingresos',\r\n          data: data\r\n        }]\r\n        \r\n        // Cargar datos de comparación solo si showComparison está activo\r\n        if (this.showComparison) {\r\n          await this.loadComparisonData()\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading revenue data:', error)\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n\r\n    async loadComparisonData() {\r\n      try {\r\n        const comparisonData = this.generateMockComparisonData(this.selectedPeriod)\r\n        // Asegurarse de que no haya datos de comparación duplicados\r\n        if (this.series.length > 1) {\r\n          this.series.splice(1, 1)\r\n        }\r\n        this.series.push({\r\n          name: 'Período anterior',\r\n          data: comparisonData\r\n        })\r\n      } catch (error) {\r\n        console.error('Error loading comparison data:', error)\r\n      }\r\n    },\r\n\r\n    generateMockData(period) {\r\n      const now = new Date()\r\n      const data = []\r\n      let points = 0\r\n      \r\n      switch(period) {\r\n        case 'day':\r\n          points = 24\r\n          for (let i = 0; i < points; i++) {\r\n            data.push([\r\n              now.setHours(i, 0, 0),\r\n              Math.floor(Math.random() * 50000) + 10000\r\n            ])\r\n          }\r\n          break\r\n        case 'week':\r\n          points = 7\r\n          for (let i = 0; i < points; i++) {\r\n            data.push([\r\n              now.setDate(now.getDate() - 1),\r\n              Math.floor(Math.random() * 200000) + 50000\r\n            ])\r\n          }\r\n          break\r\n        case 'month':\r\n          points = 30\r\n          for (let i = 0; i < points; i++) {\r\n            data.push([\r\n              now.setDate(now.getDate() - 1),\r\n              Math.floor(Math.random() * 500000) + 100000\r\n            ])\r\n          }\r\n          break\r\n        case 'year':\r\n          points = 12\r\n          for (let i = 0; i < points; i++) {\r\n            data.push([\r\n              now.setMonth(now.getMonth() - 1),\r\n              Math.floor(Math.random() * 2000000) + 500000\r\n            ])\r\n          }\r\n          break\r\n      }\r\n      \r\n      return data.reverse()\r\n    },\r\n\r\n    generateMockComparisonData(period) {\r\n      return this.generateMockData(period).map(([date, value]) => {\r\n        const prevDate = new Date(date)\r\n        switch(period) {\r\n          case 'day':\r\n            prevDate.setDate(prevDate.getDate() - 1)\r\n            break\r\n          case 'week':\r\n            prevDate.setDate(prevDate.getDate() - 7)\r\n            break\r\n          case 'month':\r\n            prevDate.setMonth(prevDate.getMonth() - 1)\r\n            break\r\n          case 'year':\r\n            prevDate.setFullYear(prevDate.getFullYear() - 1)\r\n            break\r\n        }\r\n        return [prevDate.getTime(), Math.floor(value * 0.8 + Math.random() * value * 0.4)]\r\n      })\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.revenue-chart {\r\n  background: var(--bg-secondary);\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: \r\n    0 2px 4px rgba(0, 0, 0, 0.05),\r\n    0 4px 8px rgba(0, 0, 0, 0.05),\r\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\r\n  transform: translateY(0);\r\n  transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\r\n  position: relative;\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    rgba(255, 255, 255, 0.1) 0%,\r\n    rgba(255, 255, 255, 0) 20%\r\n  );\r\n}\r\n\r\n/* Efecto de elevación al pasar el mouse */\r\n.revenue-chart:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: \r\n    0 5px 10px rgba(0, 0, 0, 0.1),\r\n    0 10px 20px rgba(0, 0, 0, 0.1),\r\n    0 20px 40px rgba(0, 0, 0, 0.05),\r\n    inset 0 -2px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 2px 0 rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n/* Efecto de presión al hacer clic */\r\n.revenue-chart:active {\r\n  transform: translateY(-2px);\r\n  box-shadow: \r\n    0 2px 5px rgba(0, 0, 0, 0.1),\r\n    0 5px 10px rgba(0, 0, 0, 0.05),\r\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\r\n  transition: all 0.1s cubic-bezier(0.165, 0.84, 0.44, 1);\r\n}\r\n\r\n/* Añadir un pseudo-elemento para el efecto de brillo en el borde */\r\n.revenue-chart::before {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(\r\n    to right,\r\n    rgba(255, 255, 255, 0) 0%,\r\n    rgba(255, 255, 255, 0.5) 50%,\r\n    rgba(255, 255, 255, 0) 100%\r\n  );\r\n  border-top-left-radius: 12px;\r\n  border-top-right-radius: 12px;\r\n}\r\n\r\n/* Añadir un pseudo-elemento para el efecto de sombra en el borde inferior */\r\n.revenue-chart::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(\r\n    to right,\r\n    rgba(0, 0, 0, 0) 0%,\r\n    rgba(0, 0, 0, 0.2) 50%,\r\n    rgba(0, 0, 0, 0) 100%\r\n  );\r\n  border-bottom-left-radius: 12px;\r\n  border-bottom-right-radius: 12px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  color: var(--text-primary);\r\n  margin: 0;\r\n}\r\n\r\n.chart-controls {\r\n  display: flex;\r\n  gap: 20px;\r\n  align-items: center;\r\n}\r\n\r\n.period-select {\r\n  padding: 8px 12px;\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 6px;\r\n  background: var(--bg-secondary);\r\n  color: var(--text-primary);\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.period-select:hover {\r\n  border-color: var(--border-hover);\r\n}\r\n\r\n.switch {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 24px;\r\n}\r\n\r\n.switch input {\r\n  opacity: 0;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n.slider {\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: var(--bg-tertiary);\r\n  transition: .4s;\r\n  border-radius: 24px;\r\n}\r\n\r\n.slider:before {\r\n  position: absolute;\r\n  content: \"\";\r\n  height: 16px;\r\n  width: 16px;\r\n  left: 4px;\r\n  bottom: 4px;\r\n  background-color: var(--bg-primary);\r\n  transition: .4s;\r\n  border-radius: 50%;\r\n}\r\n\r\ninput:checked + .slider {\r\n  background-color: #2E93fA;\r\n}\r\n\r\ninput:checked + .slider:before {\r\n  transform: translateX(26px);\r\n}\r\n\r\n.toggle-label {\r\n  margin-left: 10px;\r\n  color: var(--text-secondary);\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  min-height: 350px;\r\n  background: var(--bg-primary);\r\n}\r\n\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: var(--bg-overlay);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 3px solid var(--spinner-track);\r\n  border-top-color: var(--spinner-color);\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chart-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 15px;\r\n  }\r\n\r\n  .chart-controls {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n\r\n  .period-select {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n:deep(.apexcharts-canvas) {\r\n  background: var(--bg-secondary) !important;\r\n}\r\n\r\n:deep(.apexcharts-svg) {\r\n  background: var(--bg-secondary) !important;\r\n}\r\n\r\n:deep(.apexcharts-plot-area) {\r\n  fill: var(--bg-secondary) !important;\r\n}\r\n\r\n:deep(.apexcharts-grid) {\r\n  background: var(--bg-secondary) !important;\r\n}\r\n\r\n:deep(.apexcharts-gridlines-horizontal),\r\n:deep(.apexcharts-gridlines-vertical) {\r\n  stroke: var(--border-color) !important;\r\n}\r\n\r\n:deep(.apexcharts-plot-background) {\r\n  fill: var(--bg-secondary) !important;\r\n}\r\n\r\n:deep(.apexcharts-inner) {\r\n  background: var(--bg-secondary) !important;\r\n}\r\n\r\n:deep(.apexcharts-area-series) path {\r\n  fill-opacity: 0.5;\r\n}\r\n\r\n:deep(.apexcharts-tooltip) {\r\n  background: var(--bg-secondary) !important;\r\n  border: 1px solid var(--border-color) !important;\r\n}\r\n\r\n:deep(.apexcharts-tooltip-title) {\r\n  background: var(--bg-tertiary) !important;\r\n  border-bottom: 1px solid var(--border-color) !important;\r\n}\r\n\r\n:deep(.apexcharts-xaxistooltip) {\r\n  background: var(--bg-secondary) !important;\r\n  border: 1px solid var(--border-color) !important;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAgB;;EACtBA,KAAK,EAAC;AAAiB;;EAQrBA,KAAK,EAAC;AAAmB;;EACrBA,KAAK,EAAC;AAAQ;;EAStBA,KAAK,EAAC;AAAiB;;EAvBhCC,GAAA;EAwB4BD,KAAK,EAAC;;;;uBAvBhCE,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCJC,mBAAA,CAmBM,OAnBNC,UAmBM,G,0BAlBFD,mBAAA,CAA2C;IAAvCJ,KAAK,EAAC;EAAa,GAAC,gBAAc,sBACxCI,mBAAA,CAgBM,OAhBNE,UAgBM,GAfNF,mBAAA,CAOQ,OAPRG,UAOQ,G,gBANJH,mBAAA,CAKS;IAXnB,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAM2BC,IAAA,CAAAC,cAAc,GAAAF,MAAA;IAAET,KAAK,EAAC;gCACrCI,mBAAA,CAAgC;IAAxBQ,KAAK,EAAC;EAAK,GAAC,KAAG,qBACvBR,mBAAA,CAAyC;IAAjCQ,KAAK,EAAC;EAAM,GAAC,aAAW,qBAChCR,mBAAA,CAAuC;IAA/BQ,KAAK,EAAC;EAAO,GAAC,UAAQ,qBAC9BR,mBAAA,CAAsC;IAA9BQ,KAAK,EAAC;EAAM,GAAC,UAAQ,oB,2CAJdF,IAAA,CAAAC,cAAc,E,KAOjCP,mBAAA,CAMM,OANNS,UAMM,GALJT,mBAAA,CAGQ,SAHRU,UAGQ,G,gBAFNV,mBAAA,CAAgD;IAAzCW,IAAI,EAAC,UAAU;IAflC,uBAAAP,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAe4CC,IAAA,CAAAM,cAAc,GAAAP,MAAA;qDAAdC,IAAA,CAAAM,cAAc,E,6BAC9CZ,mBAAA,CAA4B;IAAtBJ,KAAK,EAAC;EAAQ,4B,6BAEtBI,mBAAA,CAA+D;IAAzDJ,KAAK,EAAC;EAAc,GAAC,+BAA6B,qB,OAK9DI,mBAAA,CAUM,OAVNa,UAUM,GATOP,IAAA,CAAAQ,SAAS,I,cAApBhB,mBAAA,CAEU,OAFViB,UAEU,EAAAX,MAAA,QAAAA,MAAA,OADRJ,mBAAA,CAAmC;IAA9BJ,KAAK,EAAC;EAAiB,2B,MAzBpCoB,mBAAA,gBA2BMC,YAAA,CAKaC,oBAAA;IAJXP,IAAI,EAAC,MAAM;IACXQ,MAAM,EAAC,KAAK;IACXC,OAAO,EAAEd,IAAA,CAAAe,YAAY;IACrBC,MAAM,EAAEhB,IAAA,CAAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}