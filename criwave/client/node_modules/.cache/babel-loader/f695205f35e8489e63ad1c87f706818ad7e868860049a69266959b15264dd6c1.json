{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n/**\r\n * Configuración de navegación del sistema\r\n * \r\n * Este archivo define la estructura jerárquica del menú de navegación.\r\n * Todos los elementos deben tener un ID único para facilitar el control de estado.\r\n * \r\n * Estructura de cada elemento:\r\n * {\r\n *   id: string (identificador único)\r\n *   text: string (texto a mostrar)\r\n *   icon: string (identificador del icono)\r\n *   href: string (enlace de navegación, opcional)\r\n *   expanded: boolean (estado inicial expandido/colapsado, para items con hijos)\r\n *   badge: string (texto para insignia, opcional)\r\n *   active: boolean (indica si es el elemento activo, opcional)\r\n *   isSection: boolean (indica si es un encabezado de sección, opcional)\r\n *   children: array (elementos hijos, opcional)\r\n * }\r\n */\n\nexport const navigationConfig = [\n// Dashboard - Página principal\n{\n  id: 'dashboard',\n  text: 'Dashboard',\n  icon: 'nav-icon-chart',\n  href: '/dashboard',\n  active: true\n},\n// Punto de Venta\n{\n  id: 'pos',\n  text: 'Punto de venta',\n  icon: 'nav-icon-cart',\n  href: '/pos'\n},\n// Tiendas (con subitems)\n{\n  id: 'tiendas',\n  text: 'Tiendas',\n  icon: 'nav-icon-shop',\n  expanded: false,\n  children: [{\n    id: 'tiendas-admin',\n    text: 'Administración de tiendas',\n    icon: 'nav-icon-store',\n    href: '/tiendas/administracion'\n  }, {\n    id: 'tiendas-inventario',\n    text: 'Carga de inventario',\n    icon: 'nav-icon-inventory',\n    href: '/tiendas/inventario'\n  }, {\n    id: 'tiendas-ventas',\n    text: 'Ventas por tienda',\n    icon: 'nav-icon-trending-up',\n    href: '/tiendas/ventas'\n  }, {\n    id: 'tiendas-reportes',\n    text: 'Reportes de tienda',\n    icon: 'nav-icon-report',\n    href: '/tiendas/reportes'\n  }]\n},\n// Compras (con subitems)\n{\n  id: 'compras',\n  text: 'Compras',\n  icon: 'nav-icon-shopping',\n  expanded: false,\n  children: [{\n    id: 'compras-ordenes',\n    text: 'Órdenes de compra',\n    icon: 'nav-icon-order',\n    href: '/compras/ordenes'\n  }, {\n    id: 'compras-proveedores',\n    text: 'Proveedores',\n    icon: 'nav-icon-users',\n    href: '/compras/proveedores'\n  }, {\n    id: 'compras-recepcion',\n    text: 'Recepción de mercancía',\n    icon: 'nav-icon-package',\n    href: '/compras/recepcion'\n  }]\n},\n// Cobranza\n{\n  id: 'cobranza',\n  text: 'Cobranza',\n  icon: 'nav-icon-payment',\n  href: '/cobranza'\n},\n// Logística (encabezado de sección)\n{\n  id: 'logistica-header',\n  text: 'LOGÍSTICA',\n  isSection: true\n},\n// Elementos de logística\n{\n  id: 'bancos',\n  text: 'Bancos',\n  icon: 'nav-icon-bank',\n  href: '/logistica/bancos'\n}, {\n  id: 'administracion',\n  text: 'Administración',\n  icon: 'nav-icon-admin',\n  href: '/logistica/administracion'\n},\n// Catálogos (con subitems)\n{\n  id: 'catalogos',\n  text: 'Catálogos',\n  icon: 'nav-icon-folder',\n  expanded: false,\n  children: [{\n    id: 'catalogos-articulos',\n    text: 'Artículos',\n    icon: 'nav-icon-box',\n    href: '/catalogos/articulos'\n  }, {\n    id: 'catalogos-clientes',\n    text: 'Clientes',\n    icon: 'nav-icon-user',\n    href: '/catalogos/clientes'\n  }, {\n    id: 'catalogos-empleados',\n    text: 'Empleados',\n    icon: 'nav-icon-account',\n    href: '/catalogos/empleados'\n  }, {\n    id: 'catalogos-marcas',\n    text: 'Marcas',\n    icon: 'nav-icon-tag',\n    href: '/catalogos/marcas'\n  }, {\n    id: 'catalogos-departamentos',\n    text: 'Departamentos',\n    icon: 'nav-icon-structure',\n    href: '/catalogos/departamentos'\n  }]\n},\n// Configuración (con subitems)\n{\n  id: 'configuracion',\n  text: 'Configuración',\n  icon: 'nav-icon-settings',\n  expanded: false,\n  children: [{\n    id: 'config-general',\n    text: 'General',\n    icon: 'nav-icon-settings',\n    href: '/configuracion/general'\n  }, {\n    id: 'config-permisos',\n    text: 'Permisos',\n    icon: 'nav-icon-lock',\n    href: '/configuracion/permisos'\n  }, {\n    id: 'config-roles',\n    text: 'Roles',\n    icon: 'nav-icon-people',\n    href: '/configuracion/roles'\n  }, {\n    id: 'config-usuarios',\n    text: 'Usuarios',\n    icon: 'nav-icon-user',\n    href: '/configuracion/usuarios'\n  }, {\n    id: 'config-empresa',\n    text: 'Datos de empresa',\n    icon: 'nav-icon-business',\n    href: '/configuracion/empresa'\n  }, {\n    id: 'config-impuestos',\n    text: 'Impuestos',\n    icon: 'nav-icon-money',\n    href: '/configuracion/impuestos'\n  }]\n}];\n\n/**\r\n * Función auxiliar para buscar un elemento por ID en la estructura de navegación\r\n * @param {string} id - ID del elemento a buscar\r\n * @param {Array} items - Elementos donde buscar (por defecto, toda la navegación)\r\n * @returns {Object|null} - El elemento encontrado o null\r\n */\nexport const findItemById = (id, items = navigationConfig) => {\n  if (!id || !items || !Array.isArray(items)) {\n    return null;\n  }\n\n  // Función recursiva para buscar en toda la estructura\n  const findInItems = itemsToSearch => {\n    if (!itemsToSearch || !Array.isArray(itemsToSearch)) {\n      return null;\n    }\n    for (const item of itemsToSearch) {\n      if (!item) continue;\n\n      // Verificar si es el elemento buscado\n      if (item.id === id) return item;\n\n      // Buscar en hijos si existen\n      if (item.children && item.children.length > 0) {\n        const found = findInItems(item.children);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n  return findInItems(items);\n};\n\n/**\r\n * Función para transformar un array plano de rutas en un árbol de navegación\r\n * Útil para añadir nuevas rutas fácilmente\r\n * \r\n * Ejemplo de uso:\r\n * const nuevasRutas = [\r\n *   { path: '/nueva-seccion', name: 'Nueva Sección', icon: 'nav-icon-folder' },\r\n *   { path: '/nueva-seccion/elemento', name: 'Nuevo Elemento', icon: 'nav-icon-file' }\r\n * ];\r\n * const estructuraActualizada = appendRoutes(navigationConfig, nuevasRutas);\r\n */\nexport const appendRoutes = (navigationTree, flatRoutes) => {\n  // Crear copia de la estructura actual\n  const newTree = JSON.parse(JSON.stringify(navigationTree));\n\n  // Función para generar un ID único basado en el path\n  const pathToId = path => {\n    return path.substring(1).replace(/\\//g, '-');\n  };\n\n  // Procesar cada ruta\n  flatRoutes.forEach(route => {\n    // Separar path en segmentos\n    const segments = route.path.split('/').filter(Boolean);\n\n    // Si es una ruta de nivel superior\n    if (segments.length === 1) {\n      // Generar ID único\n      const id = pathToId(route.path);\n\n      // Verificar si ya existe\n      const existingIndex = newTree.findIndex(item => item.id === id);\n      if (existingIndex === -1) {\n        // Añadir como nuevo elemento\n        newTree.push({\n          id,\n          text: route.name,\n          icon: route.icon || 'nav-icon-folder',\n          href: route.path,\n          expanded: false,\n          children: []\n        });\n      }\n    }\n    // Si es una subruta\n    else {\n      // Encontrar el elemento padre\n      const parentPath = '/' + segments.slice(0, segments.length - 1).join('/');\n      const parentId = pathToId(parentPath);\n\n      // Buscar el elemento padre en toda la estructura\n      const parent = findItemById(parentId, newTree);\n      if (parent) {\n        // Generar ID único para el hijo\n        const childId = pathToId(route.path);\n\n        // Verificar si ya existe\n        const existingChildIndex = parent.children ? parent.children.findIndex(child => child.id === childId) : -1;\n        if (existingChildIndex === -1) {\n          // Añadir como hijo\n          if (!parent.children) parent.children = [];\n          parent.children.push({\n            id: childId,\n            text: route.name,\n            icon: route.icon || 'nav-icon-file',\n            href: route.path\n          });\n        }\n      }\n    }\n  });\n  return newTree;\n};","map":{"version":3,"names":["navigationConfig","id","text","icon","href","active","expanded","children","isSection","findItemById","items","Array","isArray","findInItems","itemsToSearch","item","length","found","appendRoutes","navigationTree","flatRoutes","newTree","JSON","parse","stringify","pathToId","path","substring","replace","forEach","route","segments","split","filter","Boolean","existingIndex","findIndex","push","name","parentPath","slice","join","parentId","parent","childId","existingChildIndex","child"],"sources":["C:/Users/Pc/Desktop/Proyectos/criwave/client/src/config/navigation.js"],"sourcesContent":["/**\r\n * Configuración de navegación del sistema\r\n * \r\n * Este archivo define la estructura jerárquica del menú de navegación.\r\n * Todos los elementos deben tener un ID único para facilitar el control de estado.\r\n * \r\n * Estructura de cada elemento:\r\n * {\r\n *   id: string (identificador único)\r\n *   text: string (texto a mostrar)\r\n *   icon: string (identificador del icono)\r\n *   href: string (enlace de navegación, opcional)\r\n *   expanded: boolean (estado inicial expandido/colapsado, para items con hijos)\r\n *   badge: string (texto para insignia, opcional)\r\n *   active: boolean (indica si es el elemento activo, opcional)\r\n *   isSection: boolean (indica si es un encabezado de sección, opcional)\r\n *   children: array (elementos hijos, opcional)\r\n * }\r\n */\r\n\r\nexport const navigationConfig = [\r\n  // Dashboard - Página principal\r\n  {\r\n    id: 'dashboard',\r\n    text: 'Dashboard',\r\n    icon: 'nav-icon-chart',\r\n    href: '/dashboard',\r\n    active: true\r\n  },\r\n  \r\n  // Punto de Venta\r\n  {\r\n    id: 'pos',\r\n    text: 'Punto de venta',\r\n    icon: 'nav-icon-cart',\r\n    href: '/pos'\r\n  },\r\n  \r\n  // Tiendas (con subitems)\r\n  {\r\n    id: 'tiendas',\r\n    text: 'Tiendas',\r\n    icon: 'nav-icon-shop',\r\n    expanded: false,\r\n    children: [\r\n      {\r\n        id: 'tiendas-admin',\r\n        text: 'Administración de tiendas',\r\n        icon: 'nav-icon-store',\r\n        href: '/tiendas/administracion'\r\n      },\r\n      {\r\n        id: 'tiendas-inventario',\r\n        text: 'Carga de inventario',\r\n        icon: 'nav-icon-inventory',\r\n        href: '/tiendas/inventario'\r\n      },\r\n      {\r\n        id: 'tiendas-ventas',\r\n        text: 'Ventas por tienda',\r\n        icon: 'nav-icon-trending-up',\r\n        href: '/tiendas/ventas'\r\n      },\r\n      {\r\n        id: 'tiendas-reportes',\r\n        text: 'Reportes de tienda',\r\n        icon: 'nav-icon-report',\r\n        href: '/tiendas/reportes'\r\n      }\r\n    ]\r\n  },\r\n  \r\n  // Compras (con subitems)\r\n  {\r\n    id: 'compras',\r\n    text: 'Compras',\r\n    icon: 'nav-icon-shopping',\r\n    expanded: false,\r\n    children: [\r\n      {\r\n        id: 'compras-ordenes',\r\n        text: 'Órdenes de compra',\r\n        icon: 'nav-icon-order',\r\n        href: '/compras/ordenes'\r\n      },\r\n      {\r\n        id: 'compras-proveedores',\r\n        text: 'Proveedores',\r\n        icon: 'nav-icon-users',\r\n        href: '/compras/proveedores'\r\n      },\r\n      {\r\n        id: 'compras-recepcion',\r\n        text: 'Recepción de mercancía',\r\n        icon: 'nav-icon-package',\r\n        href: '/compras/recepcion'\r\n      }\r\n    ]\r\n  },\r\n  \r\n  // Cobranza\r\n  {\r\n    id: 'cobranza',\r\n    text: 'Cobranza',\r\n    icon: 'nav-icon-payment',\r\n    href: '/cobranza'\r\n  },\r\n  \r\n  // Logística (encabezado de sección)\r\n  {\r\n    id: 'logistica-header',\r\n    text: 'LOGÍSTICA',\r\n    isSection: true\r\n  },\r\n  \r\n  // Elementos de logística\r\n  {\r\n    id: 'bancos',\r\n    text: 'Bancos',\r\n    icon: 'nav-icon-bank',\r\n    href: '/logistica/bancos'\r\n  },\r\n  {\r\n    id: 'administracion',\r\n    text: 'Administración',\r\n    icon: 'nav-icon-admin',\r\n    href: '/logistica/administracion'\r\n  },\r\n  \r\n  // Catálogos (con subitems)\r\n  {\r\n    id: 'catalogos',\r\n    text: 'Catálogos',\r\n    icon: 'nav-icon-folder',\r\n    expanded: false,\r\n    children: [\r\n      {\r\n        id: 'catalogos-articulos',\r\n        text: 'Artículos',\r\n        icon: 'nav-icon-box',\r\n        href: '/catalogos/articulos'\r\n      },\r\n      {\r\n        id: 'catalogos-clientes',\r\n        text: 'Clientes',\r\n        icon: 'nav-icon-user',\r\n        href: '/catalogos/clientes'\r\n      },\r\n      {\r\n        id: 'catalogos-empleados',\r\n        text: 'Empleados',\r\n        icon: 'nav-icon-account',\r\n        href: '/catalogos/empleados'\r\n      },\r\n      {\r\n        id: 'catalogos-marcas',\r\n        text: 'Marcas',\r\n        icon: 'nav-icon-tag',\r\n        href: '/catalogos/marcas'\r\n      },\r\n      {\r\n        id: 'catalogos-departamentos',\r\n        text: 'Departamentos',\r\n        icon: 'nav-icon-structure',\r\n        href: '/catalogos/departamentos'\r\n      }\r\n    ]\r\n  },\r\n  \r\n  // Configuración (con subitems)\r\n  {\r\n    id: 'configuracion',\r\n    text: 'Configuración',\r\n    icon: 'nav-icon-settings',\r\n    expanded: false,\r\n    children: [\r\n      {\r\n        id: 'config-general',\r\n        text: 'General',\r\n        icon: 'nav-icon-settings',\r\n        href: '/configuracion/general'\r\n      },\r\n      {\r\n        id: 'config-permisos',\r\n        text: 'Permisos',\r\n        icon: 'nav-icon-lock',\r\n        href: '/configuracion/permisos'\r\n      },\r\n      {\r\n        id: 'config-roles',\r\n        text: 'Roles',\r\n        icon: 'nav-icon-people',\r\n        href: '/configuracion/roles'\r\n      },\r\n      {\r\n        id: 'config-usuarios',\r\n        text: 'Usuarios',\r\n        icon: 'nav-icon-user',\r\n        href: '/configuracion/usuarios'\r\n      },\r\n      {\r\n        id: 'config-empresa',\r\n        text: 'Datos de empresa',\r\n        icon: 'nav-icon-business',\r\n        href: '/configuracion/empresa'\r\n      },\r\n      {\r\n        id: 'config-impuestos',\r\n        text: 'Impuestos',\r\n        icon: 'nav-icon-money',\r\n        href: '/configuracion/impuestos'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n/**\r\n * Función auxiliar para buscar un elemento por ID en la estructura de navegación\r\n * @param {string} id - ID del elemento a buscar\r\n * @param {Array} items - Elementos donde buscar (por defecto, toda la navegación)\r\n * @returns {Object|null} - El elemento encontrado o null\r\n */\r\nexport const findItemById = (id, items = navigationConfig) => {\r\n  if (!id || !items || !Array.isArray(items)) {\r\n    return null;\r\n  }\r\n  \r\n  // Función recursiva para buscar en toda la estructura\r\n  const findInItems = (itemsToSearch) => {\r\n    if (!itemsToSearch || !Array.isArray(itemsToSearch)) {\r\n      return null;\r\n    }\r\n    \r\n    for (const item of itemsToSearch) {\r\n      if (!item) continue;\r\n      \r\n      // Verificar si es el elemento buscado\r\n      if (item.id === id) return item;\r\n      \r\n      // Buscar en hijos si existen\r\n      if (item.children && item.children.length > 0) {\r\n        const found = findInItems(item.children);\r\n        if (found) return found;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  return findInItems(items);\r\n};\r\n\r\n/**\r\n * Función para transformar un array plano de rutas en un árbol de navegación\r\n * Útil para añadir nuevas rutas fácilmente\r\n * \r\n * Ejemplo de uso:\r\n * const nuevasRutas = [\r\n *   { path: '/nueva-seccion', name: 'Nueva Sección', icon: 'nav-icon-folder' },\r\n *   { path: '/nueva-seccion/elemento', name: 'Nuevo Elemento', icon: 'nav-icon-file' }\r\n * ];\r\n * const estructuraActualizada = appendRoutes(navigationConfig, nuevasRutas);\r\n */\r\nexport const appendRoutes = (navigationTree, flatRoutes) => {\r\n  // Crear copia de la estructura actual\r\n  const newTree = JSON.parse(JSON.stringify(navigationTree));\r\n  \r\n  // Función para generar un ID único basado en el path\r\n  const pathToId = (path) => {\r\n    return path.substring(1).replace(/\\//g, '-');\r\n  };\r\n  \r\n  // Procesar cada ruta\r\n  flatRoutes.forEach(route => {\r\n    // Separar path en segmentos\r\n    const segments = route.path.split('/').filter(Boolean);\r\n    \r\n    // Si es una ruta de nivel superior\r\n    if (segments.length === 1) {\r\n      // Generar ID único\r\n      const id = pathToId(route.path);\r\n      \r\n      // Verificar si ya existe\r\n      const existingIndex = newTree.findIndex(item => item.id === id);\r\n      \r\n      if (existingIndex === -1) {\r\n        // Añadir como nuevo elemento\r\n        newTree.push({\r\n          id,\r\n          text: route.name,\r\n          icon: route.icon || 'nav-icon-folder',\r\n          href: route.path,\r\n          expanded: false,\r\n          children: []\r\n        });\r\n      }\r\n    }\r\n    // Si es una subruta\r\n    else {\r\n      // Encontrar el elemento padre\r\n      const parentPath = '/' + segments.slice(0, segments.length - 1).join('/');\r\n      const parentId = pathToId(parentPath);\r\n      \r\n      // Buscar el elemento padre en toda la estructura\r\n      const parent = findItemById(parentId, newTree);\r\n      \r\n      if (parent) {\r\n        // Generar ID único para el hijo\r\n        const childId = pathToId(route.path);\r\n        \r\n        // Verificar si ya existe\r\n        const existingChildIndex = parent.children ? parent.children.findIndex(child => child.id === childId) : -1;\r\n        \r\n        if (existingChildIndex === -1) {\r\n          // Añadir como hijo\r\n          if (!parent.children) parent.children = [];\r\n          \r\n          parent.children.push({\r\n            id: childId,\r\n            text: route.name,\r\n            icon: route.icon || 'nav-icon-file',\r\n            href: route.path\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  return newTree;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}