{"ast":null,"code":"import { createElementVNode as _createElementVNode, toHandlers as _toHandlers, mergeProps as _mergeProps, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"date-range-chart\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"date-controls\"\n};\nconst _hoisted_4 = {\n  class: \"date-picker-container\"\n};\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_8 = {\n  key: 2,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_DatePicker = _resolveComponent(\"DatePicker\");\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", null, \"Ventas por Rango de Fecha\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_DatePicker, {\n    modelValue: _ctx.dateRange,\n    \"onUpdate:modelValue\": [_cache[0] || (_cache[0] = $event => _ctx.dateRange = $event), _ctx.onDateChange],\n    masks: _ctx.masks,\n    \"min-date\": _ctx.minDate,\n    \"max-date\": _ctx.maxDate,\n    mode: \"range\",\n    \"model-config\": _ctx.modelConfig,\n    \"is-expanded\": \"\",\n    onDayclick: _ctx.onDayClick\n  }, {\n    default: _withCtx(({\n      inputValue,\n      inputEvents\n    }) => [_createElementVNode(\"input\", _mergeProps({\n      class: \"date-input\",\n      value: inputValue\n    }, _toHandlers(inputEvents, true), {\n      placeholder: \"Seleccionar rango de fechas\",\n      readonly: \"\"\n    }), null, 16 /* FULL_PROPS */, _hoisted_5)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"masks\", \"min-date\", \"max-date\", \"model-config\", \"onDayclick\", \"onUpdate:modelValue\"])])])]), _ctx.hasDateRange ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, _cache[2] || (_cache[2] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _ctx.hasData ? (_openBlock(), _createBlock(_component_apexchart, {\n    key: 1,\n    type: \"area\",\n    height: \"350\",\n    options: _ctx.chartOptions,\n    series: _ctx.series\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])) : !_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, \" Selecciona un rango de fechas para visualizar los datos \")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_DatePicker","modelValue","_ctx","dateRange","$event","onDateChange","masks","minDate","maxDate","mode","modelConfig","onDayclick","onDayClick","default","_withCtx","inputValue","inputEvents","_mergeProps","value","_toHandlers","placeholder","readonly","_hoisted_5","_","hasDateRange","_hoisted_6","isLoading","_hoisted_7","_cache","_createCommentVNode","hasData","_createBlock","_component_apexchart","type","height","options","chartOptions","series","_hoisted_8"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\DateRangeChart.vue"],"sourcesContent":["<template>\n  <div class=\"date-range-chart\">\n    <div class=\"chart-header\">\n      <h3>Ventas por Rango de Fecha</h3>\n      <div class=\"date-controls\">\n        <div class=\"date-picker-container\">\n          <DatePicker\n            v-model=\"dateRange\"\n            :masks=\"masks\"\n            :min-date=\"minDate\"\n            :max-date=\"maxDate\"\n            mode=\"range\"\n            :model-config=\"modelConfig\"\n            is-expanded\n            @dayclick=\"onDayClick\"\n            @update:modelValue=\"onDateChange\"\n          >\n            <template v-slot=\"{ inputValue, inputEvents }\">\n              <input\n                class=\"date-input\"\n                :value=\"inputValue\"\n                v-on=\"inputEvents\"\n                placeholder=\"Seleccionar rango de fechas\"\n                readonly\n              />\n            </template>\n          </DatePicker>\n        </div>\n      </div>\n    </div>\n      \n    <div class=\"chart-container\" v-if=\"hasDateRange\">\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\n        <div class=\"loading-spinner\"></div>\n      </div>\n      <apexchart\n        v-if=\"hasData\"\n        type=\"area\"\n        height=\"350\"\n        :options=\"chartOptions\"\n        :series=\"series\"\n      ></apexchart>\n      <div v-else-if=\"!isLoading\" class=\"no-data-message\">\n        Selecciona un rango de fechas para visualizar los datos\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue'\nimport VueApexCharts from 'vue3-apexcharts'\nimport { DatePicker } from 'v-calendar'\nimport 'v-calendar/dist/style.css'\n\nexport default defineComponent({\n  name: 'DateRangeChart',\n  components: {\n    apexchart: VueApexCharts,\n    DatePicker\n  },\n  \n  data() {\n    return {\n      dateRange: {\n        start: null,\n        end: null\n      },\n      masks: {\n        input: 'DD/MM/YYYY'\n      },\n      modelConfig: {\n        type: 'string',\n        mask: 'YYYY-MM-DD'\n      },\n      minDate: new Date(2023, 0, 1),\n      maxDate: new Date(),\n      isLoading: false,\n      isDarkMode: false,\n      series: [{\n        name: 'Ventas',\n        data: []\n      }],\n      chartOptions: {\n        chart: {\n          type: 'area',\n          height: 350,\n          background: 'transparent',\n          foreColor: '#666',\n          toolbar: {\n            show: true,\n            tools: {\n              download: true,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              reset: true\n            }\n          },\n          animations: {\n            enabled: true,\n            easing: 'easeinout',\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 150\n            },\n            dynamicAnimation: {\n              enabled: true,\n              speed: 350\n            }\n          }\n        },\n        colors: ['#2E93fA'],\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.45,\n            opacityTo: 0.05,\n            stops: [0, 95, 100]\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 2\n        },\n        grid: {\n          show: true,\n          borderColor: '#f1f1f1',\n          strokeDashArray: 3,\n          position: 'back'\n        },\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: '#666',\n              fontSize: '12px'\n            }\n          },\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Ventas ($)',\n            style: {\n              fontSize: '14px',\n              color: '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: '#666'\n            },\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        },\n        tooltip: {\n          shared: true,\n          intersect: false,\n          y: {\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        }\n      }\n    }\n  },\n\n  computed: {\n    hasDateRange() {\n      return this.dateRange.start && this.dateRange.end\n    },\n    hasData() {\n      return this.series[0].data.length > 0\n    }\n  },\n\n  created() {\n    this.checkDarkMode()\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', this.checkDarkMode)\n  },\n  \n  beforeUnmount() {\n    window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', this.checkDarkMode)\n  },\n  \n  methods: {\n    checkDarkMode() {\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme')\n      this.updateChartTheme()\n    },\n\n    updateChartTheme() {\n      const style = getComputedStyle(document.documentElement)\n      const bgSecondary = style.getPropertyValue('--bg-secondary').trim()\n      const textSecondary = style.getPropertyValue('--text-secondary').trim()\n      const borderColor = style.getPropertyValue('--border-color').trim()\n      \n      this.chartOptions = {\n        ...this.chartOptions,\n        chart: {\n          ...this.chartOptions.chart,\n          background: bgSecondary,\n          foreColor: textSecondary\n        },\n        grid: {\n          ...this.chartOptions.grid,\n          borderColor: borderColor\n        },\n        xaxis: {\n          ...this.chartOptions.xaxis,\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          }\n        },\n        yaxis: {\n          ...this.chartOptions.yaxis,\n          title: {\n            style: {\n              color: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          }\n        },\n        tooltip: {\n          theme: this.isDarkMode ? 'dark' : 'light'\n        }\n      }\n    },\n\n    onDayClick(day) {\n      // Opcional: puedes agregar lógica adicional aquí\n      console.log('Day clicked:', day)\n    },\n\n    onDateChange() {\n      if (!this.dateRange.start || !this.dateRange.end) return\n      \n      const start = new Date(this.dateRange.start)\n      const end = new Date(this.dateRange.end)\n      \n      if (start > end) {\n        this.dateRange.start = this.dateRange.end\n        return\n      }\n\n      // Forzar la actualización de los datos\n      this.series[0].data = []\n      this.$nextTick(() => {\n        this.loadData()\n      })\n    },\n\n    async loadData() {\n      if (!this.hasDateRange) return\n\n      this.isLoading = true\n      this.series[0].data = []\n      \n      try {\n        const start = new Date(this.dateRange.start)\n        const end = new Date(this.dateRange.end)\n        const diffDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24))\n        \n        const data = []\n        let currentValue = Math.floor(Math.random() * 500000) + 100000\n        \n        for (let i = 0; i <= diffDays; i++) {\n          const date = new Date(start)\n          date.setDate(start.getDate() + i)\n          \n          const variation = (Math.random() * 0.2) - 0.1\n          currentValue = Math.floor(currentValue * (1 + variation))\n          currentValue = Math.max(currentValue, 100000)\n          \n          data.push([\n            date.getTime(),\n            currentValue\n          ])\n        }\n        \n        setTimeout(() => {\n          this.series = [{\n            name: 'Ventas',\n            data: data\n          }]\n          this.isLoading = false\n        }, 300)\n        \n      } catch (error) {\n        console.error('Error loading data:', error)\n        this.isLoading = false\n      }\n    }\n  }\n})\n</script>\n\n<style scoped>\n.date-range-chart {\n  background: var(--bg-secondary);\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.chart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.date-controls {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.date-picker-container {\n  min-width: 260px;\n}\n\n.date-input {\n  width: 100%;\n  padding: 8px 12px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  font-size: 0.9rem;\n  cursor: pointer;\n}\n\n:deep(.vc-container) {\n  --vc-bg-light: var(--bg-primary);\n  --vc-bg-dark: var(--bg-secondary);\n  --vc-border: var(--border-color);\n  --vc-popover-content-color: var(--text-primary);\n  --vc-text-gray-900: var(--text-primary);\n  --vc-text-gray-700: var(--text-secondary);\n  --vc-accent-600: var(--primary);\n  border: 1px solid var(--border-color);\n  background: var(--bg-primary);\n}\n\n:deep(.vc-header) {\n  color: var(--text-primary);\n}\n\n:deep(.vc-weekday) {\n  color: var(--text-secondary);\n}\n\n:deep(.vc-day) {\n  color: var(--text-primary);\n}\n\n:deep(.vc-day-content:hover) {\n  background: var(--hover);\n}\n\n:deep(.vc-highlight) {\n  background: var(--primary);\n}\n\n.chart-container {\n  position: relative;\n  min-height: 350px;\n  background: var(--bg-primary);\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: var(--bg-overlay);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 10;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid var(--spinner-track);\n  border-top-color: var(--spinner-color);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n.no-data-message {\n  height: 350px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (max-width: 768px) {\n  .chart-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 15px;\n  }\n\n  .date-controls {\n    flex-direction: column;\n    width: 100%;\n  }\n\n  .date-picker-container {\n    width: 100%;\n    flex-direction: column;\n  }\n\n  .date-input {\n    width: 100%;\n  }\n\n  .update-button {\n    width: 100%;\n    margin-top: 10px;\n  }\n}\n\n:deep(.apexcharts-canvas) {\n  background: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-tooltip) {\n  background: var(--bg-secondary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-tooltip-title) {\n  background: var(--bg-tertiary) !important;\n  border-bottom: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-xaxistooltip) {\n  background: var(--bg-secondary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n\n.update-button {\n  padding: 8px 16px;\n  background: var(--primary);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 100px;\n}\n\n.update-button:hover:not(:disabled) {\n  background: var(--primary-dark);\n  transform: translateY(-1px);\n}\n\n.update-button:disabled {\n  background: var(--disabled);\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.button-text {\n  font-weight: 500;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAuB;mBAL1C;;EAAAC,GAAA;EA+BSD,KAAK,EAAC;;;EA/BfC,GAAA;EAgC4BD,KAAK,EAAC;;;EAhClCC,GAAA;EA0CkCD,KAAK,EAAC;;;;;uBAzCtCE,mBAAA,CA6CM,OA7CNC,UA6CM,GA5CJC,mBAAA,CA2BM,OA3BNC,UA2BM,G,0BA1BJD,mBAAA,CAAkC,YAA9B,2BAAyB,sBAC7BA,mBAAA,CAwBM,OAxBNE,UAwBM,GAvBJF,mBAAA,CAsBM,OAtBNG,UAsBM,GArBJC,YAAA,CAoBaC,qBAAA;IA1BvBC,UAAA,EAOqBC,IAAA,CAAAC,SAAS;IAP9B,wB,oCAOqBD,IAAA,CAAAC,SAAS,GAAAC,MAAA,GAQEF,IAAA,CAAAG,YAAY,C;IAP/BC,KAAK,EAAEJ,IAAA,CAAAI,KAAK;IACZ,UAAQ,EAAEJ,IAAA,CAAAK,OAAO;IACjB,UAAQ,EAAEL,IAAA,CAAAM,OAAO;IAClBC,IAAI,EAAC,OAAO;IACX,cAAY,EAAEP,IAAA,CAAAQ,WAAW;IAC1B,aAAW,EAAX,EAAW;IACVC,UAAQ,EAAET,IAAA,CAAAU;;IAdvBC,OAAA,EAAAC,QAAA,CAkBc,CAME;MAPgBC,UAAU;MAAEC;IAAW,OACzCrB,mBAAA,CAME,SANFsB,WAAA,CAME;MALA1B,KAAK,EAAC,YAAY;MACjB2B,KAAK,EAAEH;OACRI,WAAA,CAAkBH,WAAD;MACjBI,WAAW,EAAC,6BAA6B;MACzCC,QAAQ,EAAR;mCAvBhBC,UAAA,E;IAAAC,CAAA;iIA+BuCrB,IAAA,CAAAsB,YAAY,I,cAA/C/B,mBAAA,CAcM,OAdNgC,UAcM,GAbOvB,IAAA,CAAAwB,SAAS,I,cAApBjC,mBAAA,CAEM,OAFNkC,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJjC,mBAAA,CAAmC;IAA9BJ,KAAK,EAAC;EAAiB,2B,MAjCpCsC,mBAAA,gBAoCc3B,IAAA,CAAA4B,OAAO,I,cADfC,YAAA,CAMaC,oBAAA;IAzCnBxC,GAAA;IAqCQyC,IAAI,EAAC,MAAM;IACXC,MAAM,EAAC,KAAK;IACXC,OAAO,EAAEjC,IAAA,CAAAkC,YAAY;IACrBC,MAAM,EAAEnC,IAAA,CAAAmC;qDAEMnC,IAAA,CAAAwB,SAAS,I,cAA1BjC,mBAAA,CAEM,OAFN6C,UAEM,EAF8C,2DAEpD,KA5CNT,mBAAA,e,KAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}