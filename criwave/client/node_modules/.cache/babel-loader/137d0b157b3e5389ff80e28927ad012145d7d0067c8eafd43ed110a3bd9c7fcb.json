{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\n/**\r\n * Servicio para gestionar los datos de ingresos\r\n * Proporciona funciones para obtener los datos actuales y históricos\r\n */\nimport { ref, computed } from 'vue';\n\n// Meses en español\nconst months = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];\n\n// Cache para los datos\nconst revenueCache = ref({\n  currentYear: new Date().getFullYear(),\n  data: {},\n  loading: false,\n  error: null\n});\n\n/**\r\n * Obtener los últimos 12 meses a partir de una fecha dada\r\n * @param {Date} date - Fecha de referencia \r\n * @returns {Array} - Array con los nombres de los últimos 12 meses\r\n */\nfunction getLast12Months(date = new Date()) {\n  const result = [];\n  let currentDate = new Date(date);\n\n  // Ajustar a final del mes\n  currentDate.setDate(1);\n  currentDate.setHours(0, 0, 0, 0);\n  for (let i = 0; i < 12; i++) {\n    const monthIndex = currentDate.getMonth();\n    const year = currentDate.getFullYear();\n    result.unshift({\n      month: months[monthIndex],\n      monthIndex,\n      year\n    });\n\n    // Retroceder un mes\n    currentDate.setMonth(currentDate.getMonth() - 1);\n  }\n  return result;\n}\n\n/**\r\n * Genera datos de ingresos simulados\r\n * @param {Array} monthsData - Array con datos de los meses\r\n * @param {Object} options - Opciones para la generación\r\n * @returns {Array} - Array con los datos de ingresos\r\n */\nfunction generateRevenueData(monthsData, options = {}) {\n  const {\n    baseAmount = 1000000,\n    variance = 0.5,\n    growth = 0.1,\n    seed = 123\n  } = options;\n\n  // Función para obtener un número aleatorio \"determinista\" basado en una semilla\n  // para que siempre devuelva los mismos valores para los mismos parámetros\n  const seededRandom = seed => {\n    const x = Math.sin(seed) * 10000;\n    return x - Math.floor(x);\n  };\n  let prevAmount = baseAmount;\n  return monthsData.map((monthData, index) => {\n    // Hacer que los ingresos crezcan mes a mes con cierta varianza\n    const growthFactor = 1 + growth * (index / 12);\n    const randomFactor = 1 + (seededRandom(seed + index) * variance * 2 - variance);\n    const amount = Math.floor(prevAmount * growthFactor * randomFactor);\n    prevAmount = amount;\n    return {\n      ...monthData,\n      revenue: amount\n    };\n  });\n}\n\n/**\r\n * Obtiene los datos de ingresos para los últimos 12 meses\r\n * @param {Object} options - Opciones para la petición\r\n * @returns {Promise} - Promise con los datos\r\n */\nasync function getRevenueData(options = {}) {\n  const {\n    forceRefresh = false,\n    includeHistorical = false\n  } = options;\n\n  // Si ya tenemos los datos en caché y no se fuerza la actualización, devolverlos\n  if (!forceRefresh && revenueCache.value.data.current) {\n    if (includeHistorical && !revenueCache.value.data.historical) {\n      await getHistoricalRevenueData();\n    }\n    return Promise.resolve({\n      current: revenueCache.value.data.current,\n      historical: includeHistorical ? revenueCache.value.data.historical : [],\n      changePercent: revenueCache.value.data.changePercent,\n      changeAmount: revenueCache.value.data.changeAmount\n    });\n  }\n\n  // Marcar como cargando\n  revenueCache.value.loading = true;\n  revenueCache.value.error = null;\n  try {\n    // Simular petición a API con un timeout\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Obtener los últimos 12 meses\n    const months = getLast12Months();\n\n    // Generar datos simulados\n    const currentYearData = generateRevenueData(months, {\n      baseAmount: 1000000,\n      variance: 0.4,\n      growth: 0.12,\n      seed: revenueCache.value.currentYear\n    });\n\n    // Guardar en caché\n    revenueCache.value.data.current = currentYearData;\n\n    // Si se piden datos históricos, obtenerlos\n    if (includeHistorical) {\n      await getHistoricalRevenueData();\n    }\n\n    // Calcular cambios\n    calculateYearOverYearChanges();\n\n    // Marcar como no cargando\n    revenueCache.value.loading = false;\n    return {\n      current: revenueCache.value.data.current,\n      historical: includeHistorical ? revenueCache.value.data.historical : [],\n      changePercent: revenueCache.value.data.changePercent,\n      changeAmount: revenueCache.value.data.changeAmount\n    };\n  } catch (error) {\n    revenueCache.value.error = error.message || 'Error al obtener los datos de ingresos';\n    revenueCache.value.loading = false;\n    throw error;\n  }\n}\n\n/**\r\n * Obtiene los datos históricos para comparación\r\n * @returns {Promise} - Promise con los datos\r\n */\nasync function getHistoricalRevenueData() {\n  if (revenueCache.value.data.historical) {\n    return Promise.resolve(revenueCache.value.data.historical);\n  }\n  try {\n    // Simular petición a API con un timeout\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    // Obtener los meses del año anterior\n    const prevYear = revenueCache.value.currentYear - 1;\n    const lastDayOfPrevYear = new Date(prevYear, 11, 31);\n    const prevYearMonths = getLast12Months(lastDayOfPrevYear);\n\n    // Generar datos simulados para el año anterior (valores más bajos)\n    const historicalData = generateRevenueData(prevYearMonths, {\n      baseAmount: 800000,\n      variance: 0.3,\n      growth: 0.08,\n      seed: prevYear\n    });\n\n    // Guardar en caché\n    revenueCache.value.data.historical = historicalData;\n    return historicalData;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\r\n * Calcula los cambios año a año\r\n */\nfunction calculateYearOverYearChanges() {\n  if (!revenueCache.value.data.current || !revenueCache.value.data.historical) {\n    return;\n  }\n  const currentTotal = revenueCache.value.data.current.reduce((total, item) => total + item.revenue, 0);\n  const historicalTotal = revenueCache.value.data.historical.reduce((total, item) => total + item.revenue, 0);\n  const changeAmount = currentTotal - historicalTotal;\n  const changePercent = changeAmount / historicalTotal * 100;\n  revenueCache.value.data.changeAmount = changeAmount;\n  revenueCache.value.data.changePercent = changePercent;\n}\nexport default {\n  getRevenueData,\n  getHistoricalRevenueData,\n  // Propiedades reactivas\n  isLoading: computed(() => revenueCache.value.loading),\n  error: computed(() => revenueCache.value.error)\n};","map":{"version":3,"names":["ref","computed","months","revenueCache","currentYear","Date","getFullYear","data","loading","error","getLast12Months","date","result","currentDate","setDate","setHours","i","monthIndex","getMonth","year","unshift","month","setMonth","generateRevenueData","monthsData","options","baseAmount","variance","growth","seed","seededRandom","x","Math","sin","floor","prevAmount","map","monthData","index","growthFactor","randomFactor","amount","revenue","getRevenueData","forceRefresh","includeHistorical","value","current","historical","getHistoricalRevenueData","Promise","resolve","changePercent","changeAmount","setTimeout","currentYearData","calculateYearOverYearChanges","message","prevYear","lastDayOfPrevYear","prevYearMonths","historicalData","currentTotal","reduce","total","item","historicalTotal","isLoading"],"sources":["C:/Users/Pc/Desktop/Proyectos/criwave/client/src/services/revenueService.js"],"sourcesContent":["/**\r\n * Servicio para gestionar los datos de ingresos\r\n * Proporciona funciones para obtener los datos actuales y históricos\r\n */\r\nimport { ref, computed } from 'vue';\r\n\r\n// Meses en español\r\nconst months = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];\r\n\r\n// Cache para los datos\r\nconst revenueCache = ref({\r\n  currentYear: new Date().getFullYear(),\r\n  data: {},\r\n  loading: false,\r\n  error: null\r\n});\r\n\r\n/**\r\n * Obtener los últimos 12 meses a partir de una fecha dada\r\n * @param {Date} date - Fecha de referencia \r\n * @returns {Array} - Array con los nombres de los últimos 12 meses\r\n */\r\nfunction getLast12Months(date = new Date()) {\r\n  const result = [];\r\n  let currentDate = new Date(date);\r\n  \r\n  // Ajustar a final del mes\r\n  currentDate.setDate(1);\r\n  currentDate.setHours(0, 0, 0, 0);\r\n  \r\n  for (let i = 0; i < 12; i++) {\r\n    const monthIndex = currentDate.getMonth();\r\n    const year = currentDate.getFullYear();\r\n    \r\n    result.unshift({\r\n      month: months[monthIndex],\r\n      monthIndex,\r\n      year\r\n    });\r\n    \r\n    // Retroceder un mes\r\n    currentDate.setMonth(currentDate.getMonth() - 1);\r\n  }\r\n  \r\n  return result;\r\n}\r\n\r\n/**\r\n * Genera datos de ingresos simulados\r\n * @param {Array} monthsData - Array con datos de los meses\r\n * @param {Object} options - Opciones para la generación\r\n * @returns {Array} - Array con los datos de ingresos\r\n */\r\nfunction generateRevenueData(monthsData, options = {}) {\r\n  const { baseAmount = 1000000, variance = 0.5, growth = 0.1, seed = 123 } = options;\r\n  \r\n  // Función para obtener un número aleatorio \"determinista\" basado en una semilla\r\n  // para que siempre devuelva los mismos valores para los mismos parámetros\r\n  const seededRandom = (seed) => {\r\n    const x = Math.sin(seed) * 10000;\r\n    return x - Math.floor(x);\r\n  };\r\n  \r\n  let prevAmount = baseAmount;\r\n  return monthsData.map((monthData, index) => {\r\n    // Hacer que los ingresos crezcan mes a mes con cierta varianza\r\n    const growthFactor = 1 + growth * (index / 12);\r\n    const randomFactor = 1 + (seededRandom(seed + index) * variance * 2 - variance);\r\n    const amount = Math.floor(prevAmount * growthFactor * randomFactor);\r\n    \r\n    prevAmount = amount;\r\n    \r\n    return {\r\n      ...monthData,\r\n      revenue: amount\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene los datos de ingresos para los últimos 12 meses\r\n * @param {Object} options - Opciones para la petición\r\n * @returns {Promise} - Promise con los datos\r\n */\r\nasync function getRevenueData(options = {}) {\r\n  const { forceRefresh = false, includeHistorical = false } = options;\r\n  \r\n  // Si ya tenemos los datos en caché y no se fuerza la actualización, devolverlos\r\n  if (!forceRefresh && revenueCache.value.data.current) {\r\n    if (includeHistorical && !revenueCache.value.data.historical) {\r\n      await getHistoricalRevenueData();\r\n    }\r\n    return Promise.resolve({\r\n      current: revenueCache.value.data.current,\r\n      historical: includeHistorical ? revenueCache.value.data.historical : [],\r\n      changePercent: revenueCache.value.data.changePercent,\r\n      changeAmount: revenueCache.value.data.changeAmount\r\n    });\r\n  }\r\n  \r\n  // Marcar como cargando\r\n  revenueCache.value.loading = true;\r\n  revenueCache.value.error = null;\r\n  \r\n  try {\r\n    // Simular petición a API con un timeout\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    // Obtener los últimos 12 meses\r\n    const months = getLast12Months();\r\n    \r\n    // Generar datos simulados\r\n    const currentYearData = generateRevenueData(months, {\r\n      baseAmount: 1000000,\r\n      variance: 0.4,\r\n      growth: 0.12,\r\n      seed: revenueCache.value.currentYear\r\n    });\r\n    \r\n    // Guardar en caché\r\n    revenueCache.value.data.current = currentYearData;\r\n    \r\n    // Si se piden datos históricos, obtenerlos\r\n    if (includeHistorical) {\r\n      await getHistoricalRevenueData();\r\n    }\r\n    \r\n    // Calcular cambios\r\n    calculateYearOverYearChanges();\r\n    \r\n    // Marcar como no cargando\r\n    revenueCache.value.loading = false;\r\n    \r\n    return {\r\n      current: revenueCache.value.data.current,\r\n      historical: includeHistorical ? revenueCache.value.data.historical : [],\r\n      changePercent: revenueCache.value.data.changePercent,\r\n      changeAmount: revenueCache.value.data.changeAmount\r\n    };\r\n  } catch (error) {\r\n    revenueCache.value.error = error.message || 'Error al obtener los datos de ingresos';\r\n    revenueCache.value.loading = false;\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los datos históricos para comparación\r\n * @returns {Promise} - Promise con los datos\r\n */\r\nasync function getHistoricalRevenueData() {\r\n  if (revenueCache.value.data.historical) {\r\n    return Promise.resolve(revenueCache.value.data.historical);\r\n  }\r\n  \r\n  try {\r\n    // Simular petición a API con un timeout\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    \r\n    // Obtener los meses del año anterior\r\n    const prevYear = revenueCache.value.currentYear - 1;\r\n    const lastDayOfPrevYear = new Date(prevYear, 11, 31);\r\n    const prevYearMonths = getLast12Months(lastDayOfPrevYear);\r\n    \r\n    // Generar datos simulados para el año anterior (valores más bajos)\r\n    const historicalData = generateRevenueData(prevYearMonths, {\r\n      baseAmount: 800000,\r\n      variance: 0.3,\r\n      growth: 0.08,\r\n      seed: prevYear\r\n    });\r\n    \r\n    // Guardar en caché\r\n    revenueCache.value.data.historical = historicalData;\r\n    \r\n    return historicalData;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Calcula los cambios año a año\r\n */\r\nfunction calculateYearOverYearChanges() {\r\n  if (!revenueCache.value.data.current || !revenueCache.value.data.historical) {\r\n    return;\r\n  }\r\n  \r\n  const currentTotal = revenueCache.value.data.current.reduce((total, item) => total + item.revenue, 0);\r\n  const historicalTotal = revenueCache.value.data.historical.reduce((total, item) => total + item.revenue, 0);\r\n  \r\n  const changeAmount = currentTotal - historicalTotal;\r\n  const changePercent = (changeAmount / historicalTotal) * 100;\r\n  \r\n  revenueCache.value.data.changeAmount = changeAmount;\r\n  revenueCache.value.data.changePercent = changePercent;\r\n}\r\n\r\nexport default {\r\n  getRevenueData,\r\n  getHistoricalRevenueData,\r\n  \r\n  // Propiedades reactivas\r\n  isLoading: computed(() => revenueCache.value.loading),\r\n  error: computed(() => revenueCache.value.error)\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}