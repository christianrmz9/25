{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Módulo para simular respuestas de API durante el desarrollo\r\n * Esto permite trabajar sin depender de un backend real\r\n */\n\n// Generar datos aleatorios para gráficos\nfunction generateRandomData(count, min, max, isIncremental = false) {\n  const data = [];\n  let lastValue = Math.floor(Math.random() * (max - min)) + min;\n  for (let i = 0; i < count; i++) {\n    if (isIncremental) {\n      // Variación del 5-15% arriba o abajo\n      const variation = lastValue * (0.05 + Math.random() * 0.1) * (Math.random() > 0.5 ? 1 : -1);\n      lastValue = Math.max(min, Math.min(max, lastValue + variation));\n      data.push(Math.floor(lastValue));\n    } else {\n      data.push(Math.floor(Math.random() * (max - min)) + min);\n    }\n  }\n  return data;\n}\n\n// Generar etiquetas de días para gráficos\nfunction generateDayLabels(count) {\n  const days = ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'];\n  const today = new Date();\n  const labels = [];\n  for (let i = count - 1; i >= 0; i--) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    labels.push(days[date.getDay()]);\n  }\n  return labels;\n}\n\n// Generar etiquetas de semanas para gráficos\nfunction generateWeekLabels(count) {\n  const today = new Date();\n  const labels = [];\n  for (let i = count - 1; i >= 0; i--) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i * 7);\n    const weekStart = new Date(date);\n    weekStart.setDate(date.getDate() - date.getDay() + 1);\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekStart.getDate() + 6);\n    labels.push(`${weekStart.getDate()}/${weekStart.getMonth() + 1} - ${weekEnd.getDate()}/${weekEnd.getMonth() + 1}`);\n  }\n  return labels;\n}\n\n// Generar etiquetas de meses para gráficos\nfunction generateMonthLabels(count) {\n  const months = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];\n  const today = new Date();\n  const currentMonth = today.getMonth();\n  const labels = [];\n  for (let i = count - 1; i >= 0; i--) {\n    const monthIndex = (currentMonth - i + 12) % 12; // Asegurar que sea siempre positivo\n    labels.push(months[monthIndex]);\n  }\n  return labels;\n}\n\n// Generar datos completos del dashboard\nfunction generateDashboardData() {\n  // Generar valores actuales\n  const ventasDiariasValues = generateRandomData(7, 8000, 15000);\n  const ventasSemanalesValues = generateRandomData(4, 50000, 80000, true);\n  const ventasMensualesValues = generateRandomData(6, 200000, 350000, true);\n\n  // Ventas diarias (últimos 7 días)\n  const ventasDiarias = {\n    labels: generateDayLabels(7),\n    values: ventasDiariasValues\n  };\n\n  // Ventas semanales (últimas 4 semanas)\n  const ventasSemanales = {\n    labels: generateWeekLabels(4),\n    values: ventasSemanalesValues\n  };\n\n  // Ventas mensuales (últimos 6 meses)\n  const ventasMensuales = {\n    labels: generateMonthLabels(6),\n    values: ventasMensualesValues\n  };\n\n  // KPIs principales\n  const kpis = {\n    ventasHoy: ventasDiarias.values[ventasDiarias.values.length - 1],\n    ventasSemana: ventasSemanales.values[ventasSemanales.values.length - 1],\n    ventasMes: ventasMensuales.values[ventasMensuales.values.length - 1],\n    clientesNuevos: Math.floor(Math.random() * 50) + 10,\n    pedidosPendientes: Math.floor(Math.random() * 30) + 5,\n    satisfaccionCliente: Math.floor(Math.random() * 20) + 80 // 80-100%\n  };\n\n  // Datos completos\n  return {\n    ventas: {\n      diarias: ventasDiarias,\n      semanales: ventasSemanales,\n      mensuales: ventasMensuales\n    },\n    kpis: kpis,\n    // Añadir más secciones según necesidad\n    productos: {\n      masVendidos: [{\n        id: 1,\n        nombre: 'Producto A',\n        ventas: 245,\n        ingresos: 24500\n      }, {\n        id: 2,\n        nombre: 'Producto B',\n        ventas: 186,\n        ingresos: 18600\n      }, {\n        id: 3,\n        nombre: 'Producto C',\n        ventas: 157,\n        ingresos: 15700\n      }, {\n        id: 4,\n        nombre: 'Producto D',\n        ventas: 124,\n        ingresos: 12400\n      }, {\n        id: 5,\n        nombre: 'Producto E',\n        ventas: 98,\n        ingresos: 9800\n      }]\n    },\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Simular retraso de red\nfunction mockDelay(min = 300, max = 1200) {\n  const delay = Math.random() * (max - min) + min;\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\n// API mock\nexport default {\n  // Simula obtener todos los datos del dashboard\n  async getDashboardOverview() {\n    await mockDelay();\n    return {\n      data: generateDashboardData(),\n      status: 200\n    };\n  },\n  // Simula obtener una sección específica\n  async getSection(section) {\n    await mockDelay();\n    const allData = generateDashboardData();\n    return {\n      data: allData[section] || {},\n      status: allData[section] ? 200 : 404\n    };\n  }\n};","map":{"version":3,"names":["generateRandomData","count","min","max","isIncremental","data","lastValue","Math","floor","random","i","variation","push","generateDayLabels","days","today","Date","labels","date","setDate","getDate","getDay","generateWeekLabels","weekStart","weekEnd","getMonth","generateMonthLabels","months","currentMonth","monthIndex","generateDashboardData","ventasDiariasValues","ventasSemanalesValues","ventasMensualesValues","ventasDiarias","values","ventasSemanales","ventasMensuales","kpis","ventasHoy","length","ventasSemana","ventasMes","clientesNuevos","pedidosPendientes","satisfaccionCliente","ventas","diarias","semanales","mensuales","productos","masVendidos","id","nombre","ingresos","timestamp","toISOString","mockDelay","delay","Promise","resolve","setTimeout","getDashboardOverview","status","getSection","section","allData"],"sources":["C:/Users/Pc/Desktop/Proyectos/criwave/client/src/services/mockApi.js"],"sourcesContent":["/**\r\n * Módulo para simular respuestas de API durante el desarrollo\r\n * Esto permite trabajar sin depender de un backend real\r\n */\r\n\r\n// Generar datos aleatorios para gráficos\r\nfunction generateRandomData(count, min, max, isIncremental = false) {\r\n  const data = [];\r\n  let lastValue = Math.floor(Math.random() * (max - min)) + min;\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    if (isIncremental) {\r\n      // Variación del 5-15% arriba o abajo\r\n      const variation = lastValue * (0.05 + Math.random() * 0.1) * (Math.random() > 0.5 ? 1 : -1);\r\n      lastValue = Math.max(min, Math.min(max, lastValue + variation));\r\n      data.push(Math.floor(lastValue));\r\n    } else {\r\n      data.push(Math.floor(Math.random() * (max - min)) + min);\r\n    }\r\n  }\r\n  \r\n  return data;\r\n}\r\n\r\n// Generar etiquetas de días para gráficos\r\nfunction generateDayLabels(count) {\r\n  const days = ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'];\r\n  const today = new Date();\r\n  const labels = [];\r\n  \r\n  for (let i = count - 1; i >= 0; i--) {\r\n    const date = new Date(today);\r\n    date.setDate(today.getDate() - i);\r\n    labels.push(days[date.getDay()]);\r\n  }\r\n  \r\n  return labels;\r\n}\r\n\r\n// Generar etiquetas de semanas para gráficos\r\nfunction generateWeekLabels(count) {\r\n  const today = new Date();\r\n  const labels = [];\r\n  \r\n  for (let i = count - 1; i >= 0; i--) {\r\n    const date = new Date(today);\r\n    date.setDate(today.getDate() - (i * 7));\r\n    const weekStart = new Date(date);\r\n    weekStart.setDate(date.getDate() - date.getDay() + 1);\r\n    const weekEnd = new Date(weekStart);\r\n    weekEnd.setDate(weekStart.getDate() + 6);\r\n    \r\n    labels.push(`${weekStart.getDate()}/${weekStart.getMonth() + 1} - ${weekEnd.getDate()}/${weekEnd.getMonth() + 1}`);\r\n  }\r\n  \r\n  return labels;\r\n}\r\n\r\n// Generar etiquetas de meses para gráficos\r\nfunction generateMonthLabels(count) {\r\n  const months = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];\r\n  const today = new Date();\r\n  const currentMonth = today.getMonth();\r\n  const labels = [];\r\n  \r\n  for (let i = count - 1; i >= 0; i--) {\r\n    const monthIndex = (currentMonth - i + 12) % 12; // Asegurar que sea siempre positivo\r\n    labels.push(months[monthIndex]);\r\n  }\r\n  \r\n  return labels;\r\n}\r\n\r\n// Generar datos completos del dashboard\r\nfunction generateDashboardData() {\r\n  // Generar valores actuales\r\n  const ventasDiariasValues = generateRandomData(7, 8000, 15000);\r\n  const ventasSemanalesValues = generateRandomData(4, 50000, 80000, true);\r\n  const ventasMensualesValues = generateRandomData(6, 200000, 350000, true);\r\n  \r\n  // Ventas diarias (últimos 7 días)\r\n  const ventasDiarias = {\r\n    labels: generateDayLabels(7),\r\n    values: ventasDiariasValues\r\n  };\r\n  \r\n  // Ventas semanales (últimas 4 semanas)\r\n  const ventasSemanales = {\r\n    labels: generateWeekLabels(4),\r\n    values: ventasSemanalesValues\r\n  };\r\n  \r\n  // Ventas mensuales (últimos 6 meses)\r\n  const ventasMensuales = {\r\n    labels: generateMonthLabels(6),\r\n    values: ventasMensualesValues\r\n  };\r\n  \r\n  // KPIs principales\r\n  const kpis = {\r\n    ventasHoy: ventasDiarias.values[ventasDiarias.values.length - 1],\r\n    ventasSemana: ventasSemanales.values[ventasSemanales.values.length - 1],\r\n    ventasMes: ventasMensuales.values[ventasMensuales.values.length - 1],\r\n    clientesNuevos: Math.floor(Math.random() * 50) + 10,\r\n    pedidosPendientes: Math.floor(Math.random() * 30) + 5,\r\n    satisfaccionCliente: Math.floor(Math.random() * 20) + 80 // 80-100%\r\n  };\r\n  \r\n  // Datos completos\r\n  return {\r\n    ventas: {\r\n      diarias: ventasDiarias,\r\n      semanales: ventasSemanales,\r\n      mensuales: ventasMensuales\r\n    },\r\n    kpis: kpis,\r\n    // Añadir más secciones según necesidad\r\n    productos: {\r\n      masVendidos: [\r\n        { id: 1, nombre: 'Producto A', ventas: 245, ingresos: 24500 },\r\n        { id: 2, nombre: 'Producto B', ventas: 186, ingresos: 18600 },\r\n        { id: 3, nombre: 'Producto C', ventas: 157, ingresos: 15700 },\r\n        { id: 4, nombre: 'Producto D', ventas: 124, ingresos: 12400 },\r\n        { id: 5, nombre: 'Producto E', ventas: 98, ingresos: 9800 }\r\n      ]\r\n    },\r\n    timestamp: new Date().toISOString()\r\n  };\r\n}\r\n\r\n// Simular retraso de red\r\nfunction mockDelay(min = 300, max = 1200) {\r\n  const delay = Math.random() * (max - min) + min;\r\n  return new Promise(resolve => setTimeout(resolve, delay));\r\n}\r\n\r\n// API mock\r\nexport default {\r\n  // Simula obtener todos los datos del dashboard\r\n  async getDashboardOverview() {\r\n    await mockDelay();\r\n    return {\r\n      data: generateDashboardData(),\r\n      status: 200\r\n    };\r\n  },\r\n  \r\n  // Simula obtener una sección específica\r\n  async getSection(section) {\r\n    await mockDelay();\r\n    const allData = generateDashboardData();\r\n    return {\r\n      data: allData[section] || {},\r\n      status: allData[section] ? 200 : 404\r\n    };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}