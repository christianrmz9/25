{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport MaterialIcon from '../ui/Icon.vue';\nexport default {\n  name: 'RevenueChart',\n  components: {\n    icon: MaterialIcon\n  },\n  props: {\n    /**\r\n     * Datos de ingresos de los últimos 12 meses\r\n     * Debe ser un array de objetos con las propiedades \"month\", \"year\" y \"revenue\"\r\n     */\n    revenueData: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    /**\r\n     * Datos de ingresos históricos para comparación (año anterior)\r\n     * Debe seguir la misma estructura que revenueData\r\n     */\n    historicalData: {\n      type: Array,\n      default: () => []\n    },\n    /**\r\n     * Si es true, intenta generar automáticamente datos históricos si no se proporcionan\r\n     */\n    autoGenerateHistorical: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * Si es true, muestra la comparación por defecto\r\n     */\n    defaultShowComparison: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * Cambio porcentual en los ingresos con respecto al período anterior\r\n     */\n    changePercent: {\n      type: Number,\n      default: 0\n    },\n    /**\r\n     * Valor absoluto del cambio en los ingresos\r\n     */\n    changeAmount: {\n      type: Number,\n      default: 0\n    },\n    /**\r\n     * Color principal del gráfico\r\n     */\n    color: {\n      type: String,\n      default: null\n    },\n    /**\r\n     * Color para los datos de comparación del año anterior\r\n     */\n    comparisonColor: {\n      type: String,\n      default: '#777777'\n    }\n  },\n  data() {\n    return {\n      chartWidth: 0,\n      chartHeight: 0,\n      currentMonthIndex: -1,\n      mouseOver: false,\n      mouseX: 0,\n      mouseY: 0,\n      showComparison: this.defaultShowComparison,\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\n      yAxisLabelsCount: 5,\n      // Número de etiquetas en el eje Y\n      // Datos simulados para el gráfico si no se proporcionan\n      defaultData: [{\n        month: 'Ene',\n        year: new Date().getFullYear(),\n        revenue: 1000000\n      }, {\n        month: 'Feb',\n        year: new Date().getFullYear(),\n        revenue: 1200000\n      }, {\n        month: 'Mar',\n        year: new Date().getFullYear(),\n        revenue: 2500000\n      }, {\n        month: 'Abr',\n        year: new Date().getFullYear(),\n        revenue: 3800000\n      }, {\n        month: 'May',\n        year: new Date().getFullYear(),\n        revenue: 5200000\n      }, {\n        month: 'Jun',\n        year: new Date().getFullYear(),\n        revenue: 4800000\n      }, {\n        month: 'Jul',\n        year: new Date().getFullYear(),\n        revenue: 8500000\n      }, {\n        month: 'Ago',\n        year: new Date().getFullYear(),\n        revenue: 12000000\n      }, {\n        month: 'Sep',\n        year: new Date().getFullYear(),\n        revenue: 9500000\n      }, {\n        month: 'Oct',\n        year: new Date().getFullYear(),\n        revenue: 11000000\n      }, {\n        month: 'Nov',\n        year: new Date().getFullYear(),\n        revenue: 12500000\n      }, {\n        month: 'Dic',\n        year: new Date().getFullYear(),\n        revenue: 15000000\n      }],\n      // Datos simulados para comparación del año anterior\n      defaultHistoricalData: [],\n      // Tooltip mostrado actualmente (principal o histórico)\n      activeTooltipType: 'current',\n      // Detectar si estamos en un dispositivo móvil\n      windowWidth: window.innerWidth\n    };\n  },\n  computed: {\n    /**\r\n     * Detecta si estamos en un dispositivo móvil basado en el ancho de la ventana\r\n     */\n    isMobile() {\n      return this.windowWidth <= 768;\n    },\n    /**\r\n     * Determina el color a usar para el gráfico según el valor de cambio\r\n     */\n    chartLineColor() {\n      if (this.color) return this.color;\n\n      // Si es positivo, usar verde como en SalesCard\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      }\n      // Si es negativo, usar rojo como en SalesCard\n      else if (this.totalChange < 0) {\n        return '#e74c3c';\n      }\n      // Si es neutral, usar color turquesa por defecto\n      else {\n        return '#2dc6af';\n      }\n    },\n    /**\r\n     * Color para la línea de comparación del año anterior\r\n     */\n    comparisonLineColor() {\n      return this.comparisonColor || '#777777';\n    },\n    /**\r\n     * Color para la parte superior del gradiente\r\n     */\n    chartGradientTop() {\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      } else if (this.totalChange < 0) {\n        return '#e74c3c';\n      } else {\n        return '#2dc6af';\n      }\n    },\n    /**\r\n     * Color para la parte inferior del gradiente\r\n     */\n    chartGradientBottom() {\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      } else if (this.totalChange < 0) {\n        return '#e74c3c';\n      } else {\n        return '#2dc6af';\n      }\n    },\n    /**\r\n     * Obtiene los datos de ingresos actuales, generando datos con años si es necesario\r\n     */\n    chartData() {\n      if (this.revenueData.length > 0) {\n        return this.ensureYearInData(this.revenueData);\n      }\n      return this.defaultData;\n    },\n    /**\r\n     * Obtiene los datos históricos para la comparación, generando si es necesario\r\n     */\n    historicalChartData() {\n      if (this.historicalData.length > 0) {\n        return this.ensureYearInData(this.historicalData);\n      }\n      if (this.autoGenerateHistorical && this.chartData.length > 0) {\n        return this.generateHistoricalData();\n      }\n      return this.defaultHistoricalData;\n    },\n    /**\r\n     * Calcula el total de ingresos sumando todos los valores\r\n     */\n    totalRevenue() {\n      return this.chartData.reduce((sum, item) => sum + item.revenue, 0);\n    },\n    /**\r\n     * Calcula el total de ingresos del año anterior para comparación\r\n     */\n    totalHistoricalRevenue() {\n      return this.historicalChartData.reduce((sum, item) => sum + item.revenue, 0);\n    },\n    /**\r\n     * Calcula la diferencia porcentual entre el periodo actual y el histórico\r\n     */\n    yearOverYearChangePercent() {\n      if (!this.totalHistoricalRevenue) return 0;\n      return (this.totalRevenue - this.totalHistoricalRevenue) / this.totalHistoricalRevenue * 100;\n    },\n    /**\r\n     * Formatea el total de ingresos para mostrar\r\n     */\n    formattedTotalRevenue() {\n      return this.formatLargeNumber(this.totalRevenue);\n    },\n    /**\r\n     * Obtiene el valor de cambio total\r\n     */\n    totalChange() {\n      if (this.showComparison && this.historicalChartData.length > 0) {\n        return this.totalRevenue - this.totalHistoricalRevenue;\n      }\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\n    },\n    /**\r\n     * Formatea el cambio total para mostrar\r\n     */\n    formattedTotalChange() {\n      return this.formatLargeNumber(this.totalChange);\n    },\n    /**\r\n     * Formatea el porcentaje de cambio\r\n     */\n    formattedChangePercent() {\n      if (this.showComparison && this.historicalChartData.length > 0) {\n        return this.yearOverYearChangePercent.toFixed(1);\n      }\n      return (this.changePercent || 12.2).toFixed(1);\n    },\n    /**\r\n     * Calcula la ruta SVG para la línea del gráfico\r\n     */\n    linePath() {\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      return this.chartData.map((point, index) => {\n        const x = index / (this.chartData.length - 1) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\n      }).join(' ');\n    },\n    /**\r\n     * Calcula la ruta SVG para la línea de comparación del año anterior\r\n     */\n    comparisonLinePath() {\n      if (!this.showComparison || !this.historicalChartData.length || !this.chartWidth || !this.chartHeight) return '';\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      return this.historicalChartData.map((point, index) => {\n        const x = index / (this.historicalChartData.length - 1) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\n      }).join(' ');\n    },\n    /**\r\n     * Calcula la ruta SVG para el área bajo la línea\r\n     */\n    areaPath() {\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      const linePath = this.chartData.map((point, index) => {\n        const x = index / (this.chartData.length - 1) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\n      }).join(' ');\n      return `${linePath} L${availableWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\n    },\n    /**\r\n     * Calcula todos los puntos de datos para determinar el punto exacto a mostrar en cada posición\r\n     */\n    dataPoints() {\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return [];\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      return this.chartData.map((point, index) => {\n        const x = index / (this.chartData.length - 1) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return {\n          x,\n          y,\n          month: point.month,\n          year: point.year,\n          value: point.revenue,\n          index,\n          type: 'current'\n        };\n      });\n    },\n    /**\r\n     * Calcula los puntos de datos para el año anterior\r\n     */\n    historicalDataPoints() {\n      if (!this.showComparison || !this.historicalChartData.length || !this.chartWidth || !this.chartHeight) return [];\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      return this.historicalChartData.map((point, index) => {\n        const x = index / (this.historicalChartData.length - 1) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return {\n          x,\n          y,\n          month: point.month,\n          year: point.year,\n          value: point.revenue,\n          index,\n          type: 'historical'\n        };\n      });\n    },\n    /**\r\n     * Obtiene la información del punto actual seleccionado\r\n     */\n    currentPoint() {\n      if (!this.dataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.dataPoints.length) return null;\n\n      // Siempre devolvemos el punto actual\n      return this.dataPoints[this.currentMonthIndex];\n    },\n    /**\r\n     * Calcula el valor acumulado hasta el punto actual\r\n     */\n    currentPointAccumulated() {\n      if (!this.chartData.length || this.currentMonthIndex < 0) return 0;\n      let sum = 0;\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\n        sum += this.chartData[i].revenue;\n      }\n      return sum;\n    },\n    /**\r\n     * Calcula la diferencia entre el punto actual y el mismo punto del año anterior\r\n     */\n    currentPointYearOverYearChange() {\n      if (!this.currentPoint || !this.showComparison || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.chartData.length || this.currentMonthIndex >= this.historicalChartData.length) {\n        return null;\n      }\n      const currentValue = this.chartData[this.currentMonthIndex].revenue;\n      const historicalValue = this.historicalChartData[this.currentMonthIndex].revenue;\n      return {\n        amount: currentValue - historicalValue,\n        percent: historicalValue ? (currentValue - historicalValue) / historicalValue * 100 : 0\n      };\n    },\n    /**\r\n     * Estilo para la posición del tooltip basado en la posición del mouse\r\n     */\n    tooltipStyle() {\n      // Calcular si el tooltip debe aparecer a la izquierda o derecha del cursor\n      // para evitar que se salga de los bordes\n      const tooltipWidth = 180; // Aumentado para incluir la comparación\n      const tooltipHeight = this.showComparison ? 140 : 80; // Altura aumentada para incluir la comparación\n      const offset = 15; // Distancia del cursor al tooltip\n\n      let left = this.mouseX + offset;\n      let top = this.mouseY - tooltipHeight / 2;\n\n      // Evitar que se salga por el lado derecho\n      if (left + tooltipWidth > this.chartWidth) {\n        left = this.mouseX - tooltipWidth - offset;\n      }\n\n      // Evitar que se salga por arriba\n      if (top < 0) {\n        top = 10;\n      }\n\n      // Evitar que se salga por abajo\n      if (top + tooltipHeight > this.chartHeight) {\n        top = this.chartHeight - tooltipHeight - 10;\n      }\n      return {\n        left: `${left}px`,\n        top: `${top}px`\n      };\n    },\n    /**\r\n     * Calcula dinámicamente las etiquetas del eje Y basándose en los datos reales\r\n     */\n    yAxisLabels() {\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const labels = [];\n\n      // Si no hay datos, retornar array vacío\n      if (maxValue <= 0) return [];\n\n      // Encontrar un valor máximo redondeado adecuado para el eje Y\n      let roundedMax = this.getRoundedMax(maxValue);\n\n      // Calcular el incremento entre etiquetas\n      const increment = roundedMax / (this.yAxisLabelsCount - 1);\n\n      // Generar las etiquetas del eje Y\n      for (let i = 0; i < this.yAxisLabelsCount; i++) {\n        const value = i * increment;\n        labels.push(this.formatAxisLabel(value));\n      }\n\n      // Regresar las etiquetas en orden de mayor a menor (para que coincidan con el dibujo)\n      return labels.reverse();\n    }\n  },\n  mounted() {\n    this.updateChartDimensions();\n    window.addEventListener('resize', this.handleResize);\n    this.initDefaultHistoricalData();\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  watch: {\n    // Observar cambios en la visualización de la comparación\n    showComparison(newValue) {\n      // Emitir evento cuando cambia el modo de comparación\n      this.$emit('comparison-changed', newValue);\n    }\n  },\n  methods: {\n    /**\r\n     * Maneja el evento de redimensionamiento de la ventana\r\n     */\n    handleResize() {\n      this.windowWidth = window.innerWidth;\n      this.updateChartDimensions();\n    },\n    /**\r\n     * Inicializa los datos históricos por defecto\r\n     */\n    initDefaultHistoricalData() {\n      if (this.autoGenerateHistorical && this.defaultHistoricalData.length === 0) {\n        this.defaultHistoricalData = this.defaultData.map(item => ({\n          month: item.month,\n          year: item.year - 1,\n          revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\n        }));\n      }\n    },\n    /**\r\n     * Genera datos históricos basados en los datos actuales\r\n     */\n    generateHistoricalData() {\n      return this.chartData.map(item => ({\n        month: item.month,\n        year: item.year - 1,\n        // Año anterior\n        revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\n      }));\n    },\n    /**\r\n     * Asegura que todos los elementos de datos tengan un año\r\n     */\n    ensureYearInData(data) {\n      return data.map(item => {\n        if (!item.year) {\n          return {\n            ...item,\n            year: new Date().getFullYear() // Añadir el año actual si no existe\n          };\n        }\n        return item;\n      });\n    },\n    /**\r\n     * Calcula el rango de valores para los dos conjuntos de datos\r\n     */\n    calculateDataRange() {\n      let dataToCompare = [...this.chartData];\n      if (this.showComparison && this.historicalChartData.length > 0) {\n        dataToCompare = [...dataToCompare, ...this.historicalChartData];\n      }\n\n      // Obtener el valor máximo real de los datos\n      let maxValue = Math.max(...dataToCompare.map(d => d.revenue));\n\n      // Usar el valor máximo redondeado para asegurar que coincida con las etiquetas del eje Y\n      maxValue = this.getRoundedMax(maxValue);\n      return {\n        maxValue\n      };\n    },\n    /**\r\n     * Actualiza las dimensiones del gráfico en función del contenedor\r\n     */\n    updateChartDimensions() {\n      if (this.$refs.chartContainer) {\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\n      }\n    },\n    /**\r\n     * Gestiona el movimiento del mouse sobre el gráfico\r\n     * Usa un algoritmo de \"snap to nearest point\" mejorado para evitar cambios erráticos\r\n     */\n    handleMouseMove(event) {\n      if (!this.chartData.length || !this.dataPoints.length) return;\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\n      const mouseX = event.clientX - chartRect.left;\n      const mouseY = event.clientY - chartRect.top;\n\n      // Actualizar la posición del mouse para el tooltip\n      this.mouseX = mouseX;\n      this.mouseY = mouseY;\n\n      // Encuentra el punto más cercano al mouse\n      this.updateActivePointFromPosition(mouseX);\n      this.mouseOver = true;\n    },\n    /**\r\n     * Gestiona el movimiento táctil sobre el gráfico (para dispositivos móviles)\r\n     */\n    handleTouchMove(event) {\n      if (!this.chartData.length || !this.dataPoints.length || !event.touches[0]) return;\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\n      const touchX = event.touches[0].clientX - chartRect.left;\n      const touchY = event.touches[0].clientY - chartRect.top;\n\n      // Actualizar la posición del touch para el tooltip\n      this.mouseX = touchX;\n      this.mouseY = touchY;\n      this.updateActivePointFromPosition(touchX);\n      this.mouseOver = true;\n\n      // Prevenir el desplazamiento de la página durante el uso del gráfico\n      event.preventDefault();\n    },\n    /**\r\n     * Actualiza el punto activo basado en la posición X del mouse/touch\r\n     * Algoritmo mejorado para prevenir saltos y movimientos bruscos\r\n     */\n    updateActivePointFromPosition(posX) {\n      // Asegurarse de que posX esté dentro de los límites del gráfico\n      posX = Math.min(Math.max(0, posX), this.chartWidth);\n      if (this.dataPoints.length === 0) return;\n\n      // Encuentra el punto más cercano en los datos actuales\n      let nearestIndex = 0;\n      let minDistance = Infinity;\n      this.dataPoints.forEach((point, index) => {\n        const distance = Math.abs(point.x - posX);\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearestIndex = index;\n        }\n      });\n\n      // Siempre mostramos el punto actual\n      this.activeTooltipType = 'current';\n\n      // Actualiza el índice sólo si es diferente (evita re-renders innecesarios)\n      if (this.currentMonthIndex !== nearestIndex) {\n        this.currentMonthIndex = nearestIndex;\n      }\n    },\n    /**\r\n     * Restablece la visualización cuando el mouse deja el gráfico\r\n     */\n    resetHighlight() {\n      this.mouseOver = false;\n    },\n    /**\r\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\r\n     */\n    formatLargeNumber(value) {\n      if (value >= 1000000000) {\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\n      } else if (value >= 1000000) {\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\n      } else if (value >= 1000) {\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\n      }\n      return value.toString();\n    },\n    /**\r\n     * Formatea un valor monetario con separadores de miles\r\n     */\n    formatCurrency(value) {\n      return new Intl.NumberFormat('es-ES', {\n        maximumFractionDigits: 0\n      }).format(value);\n    },\n    /**\r\n     * Formatea un valor de porcentaje\r\n     */\n    formatPercent(value) {\n      return `${value > 0 ? '+' : ''}${value.toFixed(1)}%`;\n    },\n    /**\r\n     * Obtiene el valor del punto histórico en la posición actual\r\n     */\n    getHistoricalValueAtCurrentIndex() {\n      if (!this.showComparison || !this.historicalDataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.historicalDataPoints.length) return null;\n      return this.historicalDataPoints[this.currentMonthIndex].value;\n    },\n    /**\r\n     * Calcula un valor máximo redondeado apropiado para las etiquetas del eje Y\r\n     */\n    getRoundedMax(maxValue) {\n      // Determinar la magnitud del valor\n      const magnitude = Math.pow(10, Math.floor(Math.log10(maxValue)));\n\n      // Redondear hacia arriba para obtener un valor \"limpio\"\n      let roundedMax = Math.ceil(maxValue / magnitude) * magnitude;\n\n      // Si el valor redondeado es mucho mayor que el máximo real, ajustar\n      if (roundedMax > maxValue * 1.5) {\n        roundedMax = Math.ceil(maxValue / (magnitude / 2)) * (magnitude / 2);\n      }\n      return roundedMax;\n    },\n    /**\r\n     * Formatea las etiquetas del eje Y para que sean legibles\r\n     */\n    formatAxisLabel(value) {\n      return this.formatLargeNumber(value);\n    }\n  }\n};","map":{"version":3,"names":["MaterialIcon","name","components","icon","props","revenueData","type","Array","required","default","historicalData","autoGenerateHistorical","Boolean","defaultShowComparison","changePercent","Number","changeAmount","color","String","comparisonColor","data","chartWidth","chartHeight","currentMonthIndex","mouseOver","mouseX","mouseY","showComparison","monthLabels","yAxisLabelsCount","defaultData","month","year","Date","getFullYear","revenue","defaultHistoricalData","activeTooltipType","windowWidth","window","innerWidth","computed","isMobile","chartLineColor","totalChange","comparisonLineColor","chartGradientTop","chartGradientBottom","chartData","length","ensureYearInData","historicalChartData","generateHistoricalData","totalRevenue","reduce","sum","item","totalHistoricalRevenue","yearOverYearChangePercent","formattedTotalRevenue","formatLargeNumber","formattedTotalChange","formattedChangePercent","toFixed","linePath","maxValue","calculateDataRange","paddingBottom","paddingTop","paddingRight","availableHeight","availableWidth","map","point","index","x","normalizedValue","y","join","comparisonLinePath","areaPath","dataPoints","value","historicalDataPoints","currentPoint","currentPointAccumulated","i","currentPointYearOverYearChange","currentValue","historicalValue","amount","percent","tooltipStyle","tooltipWidth","tooltipHeight","offset","left","top","yAxisLabels","labels","roundedMax","getRoundedMax","increment","push","formatAxisLabel","reverse","mounted","updateChartDimensions","addEventListener","handleResize","initDefaultHistoricalData","beforeUnmount","removeEventListener","watch","newValue","$emit","methods","Math","floor","random","dataToCompare","max","d","$refs","chartContainer","clientWidth","clientHeight","handleMouseMove","event","chartRect","getBoundingClientRect","clientX","clientY","updateActivePointFromPosition","handleTouchMove","touches","touchX","touchY","preventDefault","posX","min","nearestIndex","minDistance","Infinity","forEach","distance","abs","resetHighlight","replace","toString","formatCurrency","Intl","NumberFormat","maximumFractionDigits","format","formatPercent","getHistoricalValueAtCurrentIndex","magnitude","pow","log10","ceil"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"revenue-chart-container\">\r\n    <div class=\"chart-header\">\r\n      <div class=\"chart-title-section\">\r\n        <h2 class=\"chart-title\">Total Ingresos</h2>\r\n        <div class=\"revenue-amount\">${{ formattedTotalRevenue }}</div>\r\n        <div class=\"change-indicator\" :class=\"{ 'positive': totalChange > 0, 'negative': totalChange < 0 }\">\r\n          <span class=\"change-value\">{{ totalChange > 0 ? '+' : '' }}{{ formattedTotalChange }} ({{ formattedChangePercent }}%)</span>\r\n          <span class=\"period\">· {{ showComparison ? 'vs. año anterior' : 'últimos 12 meses' }}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"period-selector\">\r\n        <div class=\"controls\">\r\n          <label class=\"comparison-toggle\">\r\n            <input type=\"checkbox\" v-model=\"showComparison\">\r\n            <span class=\"toggle-label\">Comparar con año anterior</span>\r\n          </label>\r\n          <button class=\"period-button active\">\r\n            Últimos 12 meses\r\n            <icon name=\"arrow_drop_down\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"chart-content\">\r\n      <div class=\"chart-axes\">\r\n        <div class=\"y-axis\">\r\n          <div class=\"axis-label\" v-for=\"(value, index) in yAxisLabels\" :key=\"index\">\r\n            {{ value }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"chart-graphic\" ref=\"chartContainer\" \r\n           @mousemove=\"handleMouseMove\"\r\n           @mouseleave=\"resetHighlight\" \r\n           @touchmove=\"handleTouchMove\"\r\n           @touchend=\"resetHighlight\">\r\n        <!-- La gráfica SVG se generará aquí -->\r\n        <svg class=\"chart-svg\" ref=\"chartSvg\" width=\"100%\" height=\"100%\">\r\n          <defs>\r\n            <linearGradient id=\"areaGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n              <stop offset=\"0%\" :stop-color=\"chartGradientTop\" stop-opacity=\"0.6\" />\r\n              <stop offset=\"100%\" :stop-color=\"chartGradientBottom\" stop-opacity=\"0.05\" />\r\n            </linearGradient>\r\n          </defs>\r\n          <path :d=\"areaPath\" fill=\"url(#areaGradient)\" />\r\n          <path :d=\"linePath\" fill=\"none\" :stroke=\"chartLineColor\" stroke-width=\"2\" />\r\n          \r\n          <!-- Línea de comparación del año anterior (solo visible si showComparison es true) -->\r\n          <path v-if=\"showComparison\" \r\n                :d=\"comparisonLinePath\" \r\n                fill=\"none\" \r\n                :stroke=\"comparisonLineColor\" \r\n                stroke-width=\"2\" \r\n                stroke-dasharray=\"4,2\" />\r\n          \r\n          <!-- Línea vertical para el punto actual -->\r\n          <line v-if=\"currentPoint && mouseOver\" \r\n                :x1=\"currentPoint.x\" \r\n                :y1=\"chartHeight\" \r\n                :x2=\"currentPoint.x\" \r\n                :y2=\"currentPoint.y\" \r\n                :stroke=\"chartLineColor\" \r\n                stroke-width=\"1\" \r\n                stroke-dasharray=\"2,2\" />\r\n          \r\n          <!-- Círculo indicador (solo aparece cuando el mouse está sobre el gráfico) -->\r\n          <circle \r\n            v-if=\"currentPoint && mouseOver\"\r\n            :cx=\"currentPoint.x\" \r\n            :cy=\"currentPoint.y\" \r\n            :r=\"isMobile ? 5 : 6\" \r\n            :fill=\"chartLineColor\" \r\n            stroke=\"#1a1a1a\" \r\n            stroke-width=\"2\"\r\n            class=\"hover-point\"\r\n          />\r\n          \r\n          <!-- Área interactiva transparente para detectar movimiento del mouse -->\r\n          <rect \r\n            class=\"interaction-overlay\" \r\n            :width=\"chartWidth - 10\" \r\n            :height=\"chartHeight\" \r\n            fill=\"transparent\" \r\n            style=\"pointer-events: all;\"\r\n          />\r\n        </svg>\r\n        \r\n        <!-- Eje X con los meses -->\r\n        <div class=\"x-axis\">\r\n          <div \r\n            class=\"x-label\" \r\n            v-for=\"(month, index) in monthLabels\" \r\n            :key=\"index\" \r\n            :class=\"{ \r\n              'active': currentMonthIndex === index && mouseOver,\r\n              [`month-${index}`]: true\r\n            }\"\r\n          >\r\n            {{ month }}\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Tooltip que sigue al mouse -->\r\n        <div \r\n          v-if=\"currentPoint && mouseOver\" \r\n          class=\"tooltip\" \r\n          :style=\"tooltipStyle\"\r\n        >\r\n          <div class=\"tooltip-title\">{{ currentPoint.month }}, {{ currentPoint.year }}</div>\r\n          <div class=\"tooltip-value\">${{ formatCurrency(currentPoint.value) }}</div>\r\n          <div class=\"tooltip-accumulated\">Acumulado: ${{ formatCurrency(currentPointAccumulated) }}</div>\r\n          \r\n          <!-- Comparación con el año anterior (solo si showComparison es true) -->\r\n          <div v-if=\"showComparison && historicalDataPoints.length > 0\" class=\"tooltip-comparison\">\r\n            <div class=\"comparison-label\">{{ currentPoint.year - 1 }}:</div>\r\n            <div class=\"comparison-value\">\r\n              ${{ formatCurrency(getHistoricalValueAtCurrentIndex()) }}\r\n            </div>\r\n            <div class=\"comparison-difference\" :class=\"{ 'positive': currentPointYearOverYearChange?.amount > 0, 'negative': currentPointYearOverYearChange?.amount < 0 }\">\r\n              {{ currentPointYearOverYearChange?.amount > 0 ? '+' : '' }}{{ formatCurrency(currentPointYearOverYearChange?.amount) }} \r\n              ({{ formatPercent(currentPointYearOverYearChange?.percent) }})\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MaterialIcon from '../ui/Icon.vue';\r\n\r\nexport default {\r\n  name: 'RevenueChart',\r\n  \r\n  components: {\r\n    icon: MaterialIcon\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Datos de ingresos de los últimos 12 meses\r\n     * Debe ser un array de objetos con las propiedades \"month\", \"year\" y \"revenue\"\r\n     */\r\n    revenueData: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => []\r\n    },\r\n    \r\n    /**\r\n     * Datos de ingresos históricos para comparación (año anterior)\r\n     * Debe seguir la misma estructura que revenueData\r\n     */\r\n    historicalData: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    \r\n    /**\r\n     * Si es true, intenta generar automáticamente datos históricos si no se proporcionan\r\n     */\r\n    autoGenerateHistorical: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    \r\n    /**\r\n     * Si es true, muestra la comparación por defecto\r\n     */\r\n    defaultShowComparison: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    \r\n    /**\r\n     * Cambio porcentual en los ingresos con respecto al período anterior\r\n     */\r\n    changePercent: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    \r\n    /**\r\n     * Valor absoluto del cambio en los ingresos\r\n     */\r\n    changeAmount: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    \r\n    /**\r\n     * Color principal del gráfico\r\n     */\r\n    color: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    \r\n    /**\r\n     * Color para los datos de comparación del año anterior\r\n     */\r\n    comparisonColor: {\r\n      type: String,\r\n      default: '#777777'\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      chartWidth: 0,\r\n      chartHeight: 0,\r\n      currentMonthIndex: -1,\r\n      mouseOver: false,\r\n      mouseX: 0,\r\n      mouseY: 0,\r\n      showComparison: this.defaultShowComparison,\r\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\r\n      yAxisLabelsCount: 5, // Número de etiquetas en el eje Y\r\n      // Datos simulados para el gráfico si no se proporcionan\r\n      defaultData: [\r\n        { month: 'Ene', year: new Date().getFullYear(), revenue: 1000000 },\r\n        { month: 'Feb', year: new Date().getFullYear(), revenue: 1200000 },\r\n        { month: 'Mar', year: new Date().getFullYear(), revenue: 2500000 },\r\n        { month: 'Abr', year: new Date().getFullYear(), revenue: 3800000 },\r\n        { month: 'May', year: new Date().getFullYear(), revenue: 5200000 },\r\n        { month: 'Jun', year: new Date().getFullYear(), revenue: 4800000 },\r\n        { month: 'Jul', year: new Date().getFullYear(), revenue: 8500000 },\r\n        { month: 'Ago', year: new Date().getFullYear(), revenue: 12000000 },\r\n        { month: 'Sep', year: new Date().getFullYear(), revenue: 9500000 },\r\n        { month: 'Oct', year: new Date().getFullYear(), revenue: 11000000 },\r\n        { month: 'Nov', year: new Date().getFullYear(), revenue: 12500000 },\r\n        { month: 'Dic', year: new Date().getFullYear(), revenue: 15000000 }\r\n      ],\r\n      // Datos simulados para comparación del año anterior\r\n      defaultHistoricalData: [],\r\n      // Tooltip mostrado actualmente (principal o histórico)\r\n      activeTooltipType: 'current',\r\n      // Detectar si estamos en un dispositivo móvil\r\n      windowWidth: window.innerWidth\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    /**\r\n     * Detecta si estamos en un dispositivo móvil basado en el ancho de la ventana\r\n     */\r\n    isMobile() {\r\n      return this.windowWidth <= 768;\r\n    },\r\n    \r\n    /**\r\n     * Determina el color a usar para el gráfico según el valor de cambio\r\n     */\r\n    chartLineColor() {\r\n      if (this.color) return this.color;\r\n      \r\n      // Si es positivo, usar verde como en SalesCard\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      }\r\n      // Si es negativo, usar rojo como en SalesCard\r\n      else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      }\r\n      // Si es neutral, usar color turquesa por defecto\r\n      else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Color para la línea de comparación del año anterior\r\n     */\r\n    comparisonLineColor() {\r\n      return this.comparisonColor || '#777777';\r\n    },\r\n    \r\n    /**\r\n     * Color para la parte superior del gradiente\r\n     */\r\n    chartGradientTop() {\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      } else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      } else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Color para la parte inferior del gradiente\r\n     */\r\n    chartGradientBottom() {\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      } else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      } else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Obtiene los datos de ingresos actuales, generando datos con años si es necesario\r\n     */\r\n    chartData() {\r\n      if (this.revenueData.length > 0) {\r\n        return this.ensureYearInData(this.revenueData);\r\n      }\r\n      return this.defaultData;\r\n    },\r\n    \r\n    /**\r\n     * Obtiene los datos históricos para la comparación, generando si es necesario\r\n     */\r\n    historicalChartData() {\r\n      if (this.historicalData.length > 0) {\r\n        return this.ensureYearInData(this.historicalData);\r\n      }\r\n      \r\n      if (this.autoGenerateHistorical && this.chartData.length > 0) {\r\n        return this.generateHistoricalData();\r\n      }\r\n      \r\n      return this.defaultHistoricalData;\r\n    },\r\n    \r\n    /**\r\n     * Calcula el total de ingresos sumando todos los valores\r\n     */\r\n    totalRevenue() {\r\n      return this.chartData.reduce((sum, item) => sum + item.revenue, 0);\r\n    },\r\n    \r\n    /**\r\n     * Calcula el total de ingresos del año anterior para comparación\r\n     */\r\n    totalHistoricalRevenue() {\r\n      return this.historicalChartData.reduce((sum, item) => sum + item.revenue, 0);\r\n    },\r\n    \r\n    /**\r\n     * Calcula la diferencia porcentual entre el periodo actual y el histórico\r\n     */\r\n    yearOverYearChangePercent() {\r\n      if (!this.totalHistoricalRevenue) return 0;\r\n      return ((this.totalRevenue - this.totalHistoricalRevenue) / this.totalHistoricalRevenue) * 100;\r\n    },\r\n    \r\n    /**\r\n     * Formatea el total de ingresos para mostrar\r\n     */\r\n    formattedTotalRevenue() {\r\n      return this.formatLargeNumber(this.totalRevenue);\r\n    },\r\n    \r\n    /**\r\n     * Obtiene el valor de cambio total\r\n     */\r\n    totalChange() {\r\n      if (this.showComparison && this.historicalChartData.length > 0) {\r\n        return this.totalRevenue - this.totalHistoricalRevenue;\r\n      }\r\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\r\n    },\r\n    \r\n    /**\r\n     * Formatea el cambio total para mostrar\r\n     */\r\n    formattedTotalChange() {\r\n      return this.formatLargeNumber(this.totalChange);\r\n    },\r\n    \r\n    /**\r\n     * Formatea el porcentaje de cambio\r\n     */\r\n    formattedChangePercent() {\r\n      if (this.showComparison && this.historicalChartData.length > 0) {\r\n        return this.yearOverYearChangePercent.toFixed(1);\r\n      }\r\n      return (this.changePercent || 12.2).toFixed(1);\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para la línea del gráfico\r\n     */\r\n    linePath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const { maxValue } = this.calculateDataRange();\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      const availableWidth = this.chartWidth - paddingRight;\r\n      \r\n      return this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * availableWidth;\r\n        const normalizedValue = point.revenue / maxValue;\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para la línea de comparación del año anterior\r\n     */\r\n    comparisonLinePath() {\r\n      if (!this.showComparison || !this.historicalChartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const { maxValue } = this.calculateDataRange();\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      const availableWidth = this.chartWidth - paddingRight;\r\n      \r\n      return this.historicalChartData.map((point, index) => {\r\n        const x = (index / (this.historicalChartData.length - 1)) * availableWidth;\r\n        const normalizedValue = point.revenue / maxValue;\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para el área bajo la línea\r\n     */\r\n    areaPath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const { maxValue } = this.calculateDataRange();\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      const availableWidth = this.chartWidth - paddingRight;\r\n      \r\n      const linePath = this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * availableWidth;\r\n        const normalizedValue = point.revenue / maxValue;\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n      \r\n      return `${linePath} L${availableWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\r\n    },\r\n    \r\n    /**\r\n     * Calcula todos los puntos de datos para determinar el punto exacto a mostrar en cada posición\r\n     */\r\n    dataPoints() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return [];\r\n      \r\n      const { maxValue } = this.calculateDataRange();\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      const availableWidth = this.chartWidth - paddingRight;\r\n      \r\n      return this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * availableWidth;\r\n        const normalizedValue = point.revenue / maxValue;\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        \r\n        return {\r\n          x,\r\n          y,\r\n          month: point.month,\r\n          year: point.year,\r\n          value: point.revenue,\r\n          index,\r\n          type: 'current'\r\n        };\r\n      });\r\n    },\r\n    \r\n    /**\r\n     * Calcula los puntos de datos para el año anterior\r\n     */\r\n    historicalDataPoints() {\r\n      if (!this.showComparison || !this.historicalChartData.length || !this.chartWidth || !this.chartHeight) return [];\r\n      \r\n      const { maxValue } = this.calculateDataRange();\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      const availableWidth = this.chartWidth - paddingRight;\r\n      \r\n      return this.historicalChartData.map((point, index) => {\r\n        const x = (index / (this.historicalChartData.length - 1)) * availableWidth;\r\n        const normalizedValue = point.revenue / maxValue;\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        \r\n        return {\r\n          x,\r\n          y,\r\n          month: point.month,\r\n          year: point.year,\r\n          value: point.revenue,\r\n          index,\r\n          type: 'historical'\r\n        };\r\n      });\r\n    },\r\n    \r\n    /**\r\n     * Obtiene la información del punto actual seleccionado\r\n     */\r\n    currentPoint() {\r\n      if (!this.dataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.dataPoints.length) \r\n        return null;\r\n      \r\n      // Siempre devolvemos el punto actual\r\n      return this.dataPoints[this.currentMonthIndex];\r\n    },\r\n    \r\n    /**\r\n     * Calcula el valor acumulado hasta el punto actual\r\n     */\r\n    currentPointAccumulated() {\r\n      if (!this.chartData.length || this.currentMonthIndex < 0) return 0;\r\n      \r\n      let sum = 0;\r\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\r\n        sum += this.chartData[i].revenue;\r\n      }\r\n      \r\n      return sum;\r\n    },\r\n    \r\n    /**\r\n     * Calcula la diferencia entre el punto actual y el mismo punto del año anterior\r\n     */\r\n    currentPointYearOverYearChange() {\r\n      if (!this.currentPoint || !this.showComparison || \r\n          this.currentMonthIndex < 0 || this.currentMonthIndex >= this.chartData.length ||\r\n          this.currentMonthIndex >= this.historicalChartData.length) {\r\n        return null;\r\n      }\r\n      \r\n      const currentValue = this.chartData[this.currentMonthIndex].revenue;\r\n      const historicalValue = this.historicalChartData[this.currentMonthIndex].revenue;\r\n      \r\n      return {\r\n        amount: currentValue - historicalValue,\r\n        percent: historicalValue ? ((currentValue - historicalValue) / historicalValue) * 100 : 0\r\n      };\r\n    },\r\n    \r\n    /**\r\n     * Estilo para la posición del tooltip basado en la posición del mouse\r\n     */\r\n    tooltipStyle() {\r\n      // Calcular si el tooltip debe aparecer a la izquierda o derecha del cursor\r\n      // para evitar que se salga de los bordes\r\n      const tooltipWidth = 180; // Aumentado para incluir la comparación\r\n      const tooltipHeight = this.showComparison ? 140 : 80; // Altura aumentada para incluir la comparación\r\n      const offset = 15; // Distancia del cursor al tooltip\r\n      \r\n      let left = this.mouseX + offset;\r\n      let top = this.mouseY - tooltipHeight / 2;\r\n      \r\n      // Evitar que se salga por el lado derecho\r\n      if (left + tooltipWidth > this.chartWidth) {\r\n        left = this.mouseX - tooltipWidth - offset;\r\n      }\r\n      \r\n      // Evitar que se salga por arriba\r\n      if (top < 0) {\r\n        top = 10;\r\n      }\r\n      \r\n      // Evitar que se salga por abajo\r\n      if (top + tooltipHeight > this.chartHeight) {\r\n        top = this.chartHeight - tooltipHeight - 10;\r\n      }\r\n      \r\n      return {\r\n        left: `${left}px`,\r\n        top: `${top}px`\r\n      };\r\n    },\r\n    \r\n    /**\r\n     * Calcula dinámicamente las etiquetas del eje Y basándose en los datos reales\r\n     */\r\n    yAxisLabels() {\r\n      const { maxValue } = this.calculateDataRange();\r\n      const labels = [];\r\n      \r\n      // Si no hay datos, retornar array vacío\r\n      if (maxValue <= 0) return [];\r\n      \r\n      // Encontrar un valor máximo redondeado adecuado para el eje Y\r\n      let roundedMax = this.getRoundedMax(maxValue);\r\n      \r\n      // Calcular el incremento entre etiquetas\r\n      const increment = roundedMax / (this.yAxisLabelsCount - 1);\r\n      \r\n      // Generar las etiquetas del eje Y\r\n      for (let i = 0; i < this.yAxisLabelsCount; i++) {\r\n        const value = i * increment;\r\n        labels.push(this.formatAxisLabel(value));\r\n      }\r\n      \r\n      // Regresar las etiquetas en orden de mayor a menor (para que coincidan con el dibujo)\r\n      return labels.reverse();\r\n    },\r\n  },\r\n  \r\n  mounted() {\r\n    this.updateChartDimensions();\r\n    window.addEventListener('resize', this.handleResize);\r\n    this.initDefaultHistoricalData();\r\n  },\r\n  \r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.handleResize);\r\n  },\r\n  \r\n  watch: {\r\n    // Observar cambios en la visualización de la comparación\r\n    showComparison(newValue) {\r\n      // Emitir evento cuando cambia el modo de comparación\r\n      this.$emit('comparison-changed', newValue);\r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Maneja el evento de redimensionamiento de la ventana\r\n     */\r\n    handleResize() {\r\n      this.windowWidth = window.innerWidth;\r\n      this.updateChartDimensions();\r\n    },\r\n    \r\n    /**\r\n     * Inicializa los datos históricos por defecto\r\n     */\r\n    initDefaultHistoricalData() {\r\n      if (this.autoGenerateHistorical && this.defaultHistoricalData.length === 0) {\r\n        this.defaultHistoricalData = this.defaultData.map(item => ({\r\n          month: item.month,\r\n          year: item.year - 1,\r\n          revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\r\n        }));\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Genera datos históricos basados en los datos actuales\r\n     */\r\n    generateHistoricalData() {\r\n      return this.chartData.map(item => ({\r\n        month: item.month,\r\n        year: item.year - 1, // Año anterior\r\n        revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\r\n      }));\r\n    },\r\n    \r\n    /**\r\n     * Asegura que todos los elementos de datos tengan un año\r\n     */\r\n    ensureYearInData(data) {\r\n      return data.map(item => {\r\n        if (!item.year) {\r\n          return {\r\n            ...item,\r\n            year: new Date().getFullYear() // Añadir el año actual si no existe\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n    },\r\n    \r\n    /**\r\n     * Calcula el rango de valores para los dos conjuntos de datos\r\n     */\r\n    calculateDataRange() {\r\n      let dataToCompare = [...this.chartData];\r\n      \r\n      if (this.showComparison && this.historicalChartData.length > 0) {\r\n        dataToCompare = [...dataToCompare, ...this.historicalChartData];\r\n      }\r\n      \r\n      // Obtener el valor máximo real de los datos\r\n      let maxValue = Math.max(...dataToCompare.map(d => d.revenue));\r\n      \r\n      // Usar el valor máximo redondeado para asegurar que coincida con las etiquetas del eje Y\r\n      maxValue = this.getRoundedMax(maxValue);\r\n      \r\n      return { maxValue };\r\n    },\r\n    \r\n    /**\r\n     * Actualiza las dimensiones del gráfico en función del contenedor\r\n     */\r\n    updateChartDimensions() {\r\n      if (this.$refs.chartContainer) {\r\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\r\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Gestiona el movimiento del mouse sobre el gráfico\r\n     * Usa un algoritmo de \"snap to nearest point\" mejorado para evitar cambios erráticos\r\n     */\r\n    handleMouseMove(event) {\r\n      if (!this.chartData.length || !this.dataPoints.length) return;\r\n      \r\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\r\n      const mouseX = event.clientX - chartRect.left;\r\n      const mouseY = event.clientY - chartRect.top;\r\n      \r\n      // Actualizar la posición del mouse para el tooltip\r\n      this.mouseX = mouseX;\r\n      this.mouseY = mouseY;\r\n      \r\n      // Encuentra el punto más cercano al mouse\r\n      this.updateActivePointFromPosition(mouseX);\r\n      this.mouseOver = true;\r\n    },\r\n    \r\n    /**\r\n     * Gestiona el movimiento táctil sobre el gráfico (para dispositivos móviles)\r\n     */\r\n    handleTouchMove(event) {\r\n      if (!this.chartData.length || !this.dataPoints.length || !event.touches[0]) return;\r\n      \r\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\r\n      const touchX = event.touches[0].clientX - chartRect.left;\r\n      const touchY = event.touches[0].clientY - chartRect.top;\r\n      \r\n      // Actualizar la posición del touch para el tooltip\r\n      this.mouseX = touchX;\r\n      this.mouseY = touchY;\r\n      \r\n      this.updateActivePointFromPosition(touchX);\r\n      this.mouseOver = true;\r\n      \r\n      // Prevenir el desplazamiento de la página durante el uso del gráfico\r\n      event.preventDefault();\r\n    },\r\n    \r\n    /**\r\n     * Actualiza el punto activo basado en la posición X del mouse/touch\r\n     * Algoritmo mejorado para prevenir saltos y movimientos bruscos\r\n     */\r\n    updateActivePointFromPosition(posX) {\r\n      // Asegurarse de que posX esté dentro de los límites del gráfico\r\n      posX = Math.min(Math.max(0, posX), this.chartWidth);\r\n      \r\n      if (this.dataPoints.length === 0) return;\r\n      \r\n      // Encuentra el punto más cercano en los datos actuales\r\n      let nearestIndex = 0;\r\n      let minDistance = Infinity;\r\n      \r\n      this.dataPoints.forEach((point, index) => {\r\n        const distance = Math.abs(point.x - posX);\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          nearestIndex = index;\r\n        }\r\n      });\r\n      \r\n      // Siempre mostramos el punto actual\r\n      this.activeTooltipType = 'current';\r\n      \r\n      // Actualiza el índice sólo si es diferente (evita re-renders innecesarios)\r\n      if (this.currentMonthIndex !== nearestIndex) {\r\n        this.currentMonthIndex = nearestIndex;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Restablece la visualización cuando el mouse deja el gráfico\r\n     */\r\n    resetHighlight() {\r\n      this.mouseOver = false;\r\n    },\r\n    \r\n    /**\r\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\r\n     */\r\n    formatLargeNumber(value) {\r\n      if (value >= 1000000000) {\r\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\r\n      } else if (value >= 1000000) {\r\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\r\n      } else if (value >= 1000) {\r\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\r\n      }\r\n      return value.toString();\r\n    },\r\n    \r\n    /**\r\n     * Formatea un valor monetario con separadores de miles\r\n     */\r\n    formatCurrency(value) {\r\n      return new Intl.NumberFormat('es-ES', {\r\n        maximumFractionDigits: 0\r\n      }).format(value);\r\n    },\r\n    \r\n    /**\r\n     * Formatea un valor de porcentaje\r\n     */\r\n    formatPercent(value) {\r\n      return `${value > 0 ? '+' : ''}${value.toFixed(1)}%`;\r\n    },\r\n    \r\n    /**\r\n     * Obtiene el valor del punto histórico en la posición actual\r\n     */\r\n    getHistoricalValueAtCurrentIndex() {\r\n      if (!this.showComparison || !this.historicalDataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.historicalDataPoints.length) return null;\r\n      \r\n      return this.historicalDataPoints[this.currentMonthIndex].value;\r\n    },\r\n    \r\n    /**\r\n     * Calcula un valor máximo redondeado apropiado para las etiquetas del eje Y\r\n     */\r\n    getRoundedMax(maxValue) {\r\n      // Determinar la magnitud del valor\r\n      const magnitude = Math.pow(10, Math.floor(Math.log10(maxValue)));\r\n      \r\n      // Redondear hacia arriba para obtener un valor \"limpio\"\r\n      let roundedMax = Math.ceil(maxValue / magnitude) * magnitude;\r\n      \r\n      // Si el valor redondeado es mucho mayor que el máximo real, ajustar\r\n      if (roundedMax > maxValue * 1.5) {\r\n        roundedMax = Math.ceil(maxValue / (magnitude / 2)) * (magnitude / 2);\r\n      }\r\n      \r\n      return roundedMax;\r\n    },\r\n    \r\n    /**\r\n     * Formatea las etiquetas del eje Y para que sean legibles\r\n     */\r\n    formatAxisLabel(value) {\r\n      return this.formatLargeNumber(value);\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.revenue-chart-container {\r\n  background-color: var(--bg-secondary);\r\n  border-radius: 10px;\r\n  padding: 16px;\r\n  /* Efecto 3D con múltiples sombras */\r\n  box-shadow: \r\n    0 2px 4px rgba(0, 0, 0, 0.05),\r\n    0 4px 8px rgba(0, 0, 0, 0.05),\r\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\r\n  /* Borde con gradiente para efecto 3D */\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\r\n  height: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: var(--text-primary);\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-color: var(--bg-secondary, #1a1a1a);\r\n  color: var(--text-primary, #efefef);\r\n  /* Efecto de brillo en el borde superior */\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    rgba(255, 255, 255, 0.1) 0%,\r\n    rgba(255, 255, 255, 0) 20%\r\n  );\r\n  transition: transform 0.3s cubic-bezier(0.165, 0.84, 0.44, 1), \r\n              box-shadow 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\r\n}\r\n\r\n/* Efecto de elevación al pasar el mouse */\r\n.revenue-chart-container:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: \r\n    0 5px 10px rgba(0, 0, 0, 0.1),\r\n    0 10px 20px rgba(0, 0, 0, 0.05),\r\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n/* Añadir un pseudo-elemento para el efecto de brillo en el borde */\r\n.revenue-chart-container::before {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(\r\n    to right,\r\n    rgba(255, 255, 255, 0) 0%,\r\n    rgba(255, 255, 255, 0.3) 50%,\r\n    rgba(255, 255, 255, 0) 100%\r\n  );\r\n  border-top-left-radius: 10px;\r\n  border-top-right-radius: 10px;\r\n}\r\n\r\n/* Añadir un pseudo-elemento para el efecto de sombra en el borde inferior */\r\n.revenue-chart-container::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(\r\n    to right,\r\n    rgba(0, 0, 0, 0) 0%,\r\n    rgba(0, 0, 0, 0.2) 50%,\r\n    rgba(0, 0, 0, 0) 100%\r\n  );\r\n  border-bottom-left-radius: 10px;\r\n  border-bottom-right-radius: 10px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.chart-title-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 0.9rem;\r\n  font-weight: 600;\r\n  margin: 0 0 8px 0;\r\n  opacity: 0.9;\r\n  /* Efecto de texto 3D sutil */\r\n  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.revenue-amount {\r\n  font-size: 1.8rem;\r\n  font-weight: 700;\r\n  margin-bottom: 4px;\r\n  letter-spacing: -0.5px;\r\n  /* Efecto de texto 3D más pronunciado */\r\n  text-shadow: \r\n    0 1px 1px rgba(0, 0, 0, 0.1),\r\n    0 2px 2px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.change-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.change-value {\r\n  font-weight: 600;\r\n}\r\n\r\n.positive {\r\n  color: #27ae60; /* Verde que coincide con SalesCard */\r\n}\r\n\r\n.negative {\r\n  color: #e74c3c; /* Rojo que coincide con SalesCard */\r\n}\r\n\r\n.period {\r\n  opacity: 0.7;\r\n  margin-left: 4px;\r\n}\r\n\r\n.period-selector {\r\n  margin-left: auto;\r\n}\r\n\r\n.controls {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  gap: 8px;\r\n}\r\n\r\n.comparison-toggle {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.75rem;\r\n  cursor: pointer;\r\n  opacity: 0.9;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.comparison-toggle:hover {\r\n  opacity: 1;\r\n}\r\n\r\n.comparison-toggle input[type=\"checkbox\"] {\r\n  position: relative;\r\n  appearance: none;\r\n  width: 34px;\r\n  height: 16px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 10px;\r\n  margin-right: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.comparison-toggle input[type=\"checkbox\"]::before {\r\n  content: '';\r\n  position: absolute;\r\n  width: 14px;\r\n  height: 14px;\r\n  border-radius: 50%;\r\n  top: 1px;\r\n  left: 1px;\r\n  background: #444;\r\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.comparison-toggle input[type=\"checkbox\"]:checked {\r\n  background: rgba(44, 187, 168, 0.5);\r\n}\r\n\r\n.comparison-toggle input[type=\"checkbox\"]:checked::before {\r\n  left: 19px;\r\n  background: #2dc6af;\r\n}\r\n\r\n.toggle-label {\r\n  white-space: nowrap;\r\n}\r\n\r\n.period-button {\r\n  display: flex;\r\n  align-items: center;\r\n  background: none;\r\n  border: none;\r\n  color: inherit;\r\n  font-size: 0.8rem;\r\n  padding: 4px 8px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  opacity: 0.8;\r\n  transition: opacity 0.3s, background-color 0.3s;\r\n}\r\n\r\n.period-button:hover, \r\n.period-button.active {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  opacity: 1;\r\n}\r\n\r\n.chart-content {\r\n  flex: 1;\r\n  display: flex;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.chart-axes {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 20px; /* Espacio para el eje X */\r\n  width: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 10px 0;\r\n}\r\n\r\n.y-axis {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n\r\n.axis-label {\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  text-align: left;\r\n}\r\n\r\n/* Ajuste para el modo claro - etiquetas del eje Y */\r\n:root:not([data-theme='dark']) .axis-label {\r\n  color: rgba(0, 0, 0, 0.6);\r\n}\r\n\r\n.chart-graphic {\r\n  flex: 1;\r\n  margin-left: 50px; /* Ancho del eje Y */\r\n  position: relative;\r\n  height: 100%;\r\n  cursor: crosshair; /* Cambiar cursor al pasar el mouse sobre el gráfico */\r\n  padding-bottom: 5px; /* Dar más espacio en la parte inferior */\r\n}\r\n\r\n.chart-svg {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: calc(100% - 20px); /* Restar altura del eje X por defecto */\r\n  width: calc(100% - 10px); /* Añadir un pequeño margen a la derecha para mostrar diciembre */\r\n}\r\n\r\n.x-axis {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 5px; /* Pequeño padding para evitar que las etiquetas toquen los bordes */\r\n  width: calc(100% - 10px); /* Hacer que el ancho coincida con el SVG */\r\n}\r\n\r\n.x-label {\r\n  position: absolute;\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  text-align: center;\r\n  transition: color 0.2s ease, font-weight 0.2s ease;\r\n  white-space: nowrap; /* Evitar que las etiquetas se partan en varias líneas */\r\n  transform: translateX(-50%);\r\n}\r\n\r\n/* Ajuste para el modo claro - etiquetas del eje X */\r\n:root:not([data-theme='dark']) .x-label {\r\n  color: rgba(0, 0, 0, 0.6);\r\n}\r\n\r\n/* Ajuste especial para el primer y último mes */\r\n.x-label:first-child {\r\n  left: 0 !important; /* Forzar el primer mes al inicio */\r\n  transform: translateX(0); /* El primer mes se alinea al inicio */\r\n}\r\n\r\n.x-label:last-child {\r\n  left: calc(100% - 10px) !important; /* Forzar el último mes al final */\r\n  transform: translateX(-100%); /* El último mes se alinea al final */\r\n}\r\n\r\n.x-label.active {\r\n  font-weight: 600;\r\n}\r\n\r\n/* Ajuste adicional para noviembre y diciembre para evitar superposición */\r\n.x-label:nth-last-child(1), /* Dic */\r\n.x-label:nth-last-child(2) { /* Nov */\r\n  margin-left: -2px; /* Leve separación entre Nov y Dic */\r\n}\r\n\r\n/* Ajustar altura del eje X para acomodar las etiquetas rotadas */\r\n.x-axis {\r\n  height: 35px;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n/* Los colores activos de los ejes X se definirán dinámicamente basados en chartLineColor */\r\n.positive .x-label.active {\r\n  color: #27ae60;\r\n}\r\n\r\n.negative .x-label.active {\r\n  color: #e74c3c;\r\n}\r\n\r\n/* Ajuste para el modo claro - etiquetas activas */\r\n:root:not([data-theme='dark']) .positive .x-label.active {\r\n  color: #1e8449; /* Verde más oscuro para mejor visibilidad en modo claro */\r\n}\r\n\r\n:root:not([data-theme='dark']) .negative .x-label.active {\r\n  color: #c0392b; /* Rojo más oscuro para mejor visibilidad en modo claro */\r\n}\r\n\r\n/* Estilos para los puntos de datos */\r\n.hover-point {\r\n  filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.3));\r\n  transition: transform 0.1s ease;\r\n}\r\n\r\n/* Ajustar el color del borde del círculo en modo claro */\r\n:root:not([data-theme='dark']) .chart-svg circle.hover-point {\r\n  stroke: #ffffff; /* Borde blanco en modo claro */\r\n  filter: drop-shadow(0 0 4px rgba(0, 0, 0, 0.5)); /* Sombra más pronunciada */\r\n}\r\n\r\n/* Ajustar el color de la línea vertical en modo claro */\r\n:root:not([data-theme='dark']) .chart-svg line {\r\n  stroke: var(--text-primary, #333) !important; /* Asegurar que la línea sea visible */\r\n  stroke-width: 1px; /* Líneas más finas en móvil */\r\n}\r\n\r\n/* Nuevo tooltip que sigue al cursor */\r\n.tooltip {\r\n  position: absolute;\r\n  z-index: 100;\r\n  background: var(--bg-secondary, #222);\r\n  color: var(--text-primary, #efefef);\r\n  border-radius: 6px;\r\n  padding: 6px 10px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  pointer-events: none;\r\n  width: auto;\r\n  min-width: 100px;\r\n  max-width: 220px;\r\n  opacity: 0;\r\n  animation: fadeIn 0.2s forwards;\r\n  transform-origin: center left;\r\n}\r\n\r\n.tooltip::before {\r\n  content: '';\r\n  position: absolute;\r\n  width: 8px;\r\n  height: 8px;\r\n  background: var(--bg-secondary, #222);\r\n  transform: rotate(45deg);\r\n  left: -4px;\r\n  top: 50%;\r\n  margin-top: -4px;\r\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n/* Ajustes para el modo claro */\r\n:root:not([data-theme='dark']) .tooltip {\r\n  background: var(--bg-secondary, #fff);\r\n  color: var(--text-primary, #333);\r\n  border: 1px solid rgba(0, 0, 0, 0.1);\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08), 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n:root:not([data-theme='dark']) .tooltip::before {\r\n  background: var(--bg-secondary, #fff);\r\n  border-left: 1px solid rgba(0, 0, 0, 0.1);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n:root:not([data-theme='dark']) .tooltip-accumulated,\r\n:root:not([data-theme='dark']) .comparison-label {\r\n  color: var(--text-secondary, rgba(0, 0, 0, 0.6));\r\n}\r\n\r\n:root:not([data-theme='dark']) .tooltip-comparison {\r\n  border-top: 1px dashed var(--border-color, rgba(0, 0, 0, 0.1));\r\n}\r\n\r\n.tooltip-title {\r\n  font-size: 0.8rem;\r\n  font-weight: 600;\r\n  margin-bottom: 5px;\r\n  text-align: left;\r\n  color: var(--text-primary, #efefef);\r\n}\r\n\r\n.tooltip-value {\r\n  font-size: 0.9rem;\r\n  font-weight: 700;\r\n  margin-bottom: 3px;\r\n  text-align: left;\r\n}\r\n\r\n/* Aplica color basado en el valor */\r\n.positive .tooltip-value, \r\n.comparison-difference.positive {\r\n  color: #27ae60;\r\n}\r\n\r\n.negative .tooltip-value,\r\n.comparison-difference.negative {\r\n  color: #e74c3c;\r\n}\r\n\r\n/* Aseguramos que los colores positivo/negativo sean visibles en ambos modos */\r\n:root:not([data-theme='dark']) .positive .tooltip-value,\r\n:root:not([data-theme='dark']) .comparison-difference.positive {\r\n  color: #1e8449;\r\n}\r\n\r\n:root:not([data-theme='dark']) .negative .tooltip-value,\r\n:root:not([data-theme='dark']) .comparison-difference.negative {\r\n  color: #c0392b;\r\n}\r\n\r\n.tooltip-accumulated {\r\n  font-size: 0.7rem;\r\n  color: var(--text-secondary, rgba(255, 255, 255, 0.7));\r\n  text-align: left;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n/* Estilos para la comparación de año a año */\r\n.tooltip-comparison {\r\n  margin-top: 5px;\r\n  padding-top: 5px;\r\n  border-top: 1px dashed var(--border-color, rgba(255, 255, 255, 0.15));\r\n}\r\n\r\n.comparison-label {\r\n  font-size: 0.7rem;\r\n  color: var(--text-secondary, rgba(255, 255, 255, 0.7));\r\n  text-align: left;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.comparison-value {\r\n  font-size: 0.8rem;\r\n  font-weight: 600;\r\n  text-align: left;\r\n  margin-bottom: 2px;\r\n  color: var(--text-primary, #efefef);\r\n}\r\n\r\n.comparison-difference {\r\n  font-size: 0.7rem;\r\n  font-weight: 600;\r\n  text-align: left;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateX(-5px); }\r\n  to { opacity: 1; transform: translateX(0); }\r\n}\r\n\r\n/* Eliminamos los estilos redundantes */\r\n.interaction-overlay {\r\n  cursor: crosshair;\r\n}\r\n\r\n/* Ajustes específicos para móviles */\r\n@media (max-width: 768px) {\r\n  .revenue-chart-container {\r\n    height: 300px;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .revenue-amount {\r\n    font-size: 1.6rem;\r\n  }\r\n  \r\n  .chart-title {\r\n    font-size: 0.85rem;\r\n  }\r\n  \r\n  /* Ajustes para mejorar la experiencia táctil en móviles */\r\n  .chart-graphic {\r\n    cursor: pointer;\r\n    padding-bottom: 15px; /* Más espacio en la parte inferior para las etiquetas diagonales */\r\n  }\r\n  \r\n  /* Ajustando el tooltip para móviles */\r\n  .tooltip {\r\n    padding: 6px 10px;\r\n    min-width: 100px;\r\n  }\r\n  \r\n  .tooltip-title {\r\n    font-size: 0.8rem;\r\n  }\r\n  \r\n  .tooltip-value {\r\n    font-size: 0.9rem;\r\n  }\r\n  \r\n  .tooltip-accumulated,\r\n  .comparison-label,\r\n  .comparison-value,\r\n  .comparison-difference {\r\n    font-size: 0.7rem;\r\n  }\r\n  \r\n  /* Ajustar controles y toggle para móviles */\r\n  .controls {\r\n    flex-direction: column;\r\n    gap: 5px;\r\n  }\r\n  \r\n  .comparison-toggle {\r\n    font-size: 0.7rem;\r\n  }\r\n  \r\n  .comparison-toggle input[type=\"checkbox\"] {\r\n    width: 30px;\r\n    height: 14px;\r\n    margin-right: 6px;\r\n  }\r\n  \r\n  .comparison-toggle input[type=\"checkbox\"]::before {\r\n    width: 12px;\r\n    height: 12px;\r\n  }\r\n  \r\n  .comparison-toggle input[type=\"checkbox\"]:checked::before {\r\n    left: 17px;\r\n  }\r\n  \r\n  /* Estilo diagonal para las etiquetas de meses en el eje X */\r\n  .x-label {\r\n    transform: translateX(-50%) rotate(-35deg);\r\n    transform-origin: center top;\r\n    margin-top: 8px;\r\n    font-size: 0.7rem;\r\n    font-weight: 500;\r\n    text-align: center;\r\n  }\r\n  \r\n  .x-label:first-child {\r\n    transform: rotate(-35deg);\r\n    transform-origin: left top;\r\n    left: 5px !important;\r\n    margin-top: 8px;\r\n  }\r\n  \r\n  .x-label:last-child {\r\n    transform: translateX(-100%) rotate(-35deg);\r\n    transform-origin: right top;\r\n    left: calc(100% - 20px) !important;\r\n  }\r\n  \r\n  /* Ajustar la posición de noviembre y diciembre para evitar superposición */\r\n  .x-label:nth-last-child(2) {\r\n    left: calc(100% - 40px) !important;\r\n  }\r\n  \r\n  /* Ajuste para octubre para mejorar distribución */\r\n  .x-label:nth-last-child(3) {\r\n    left: calc(100% - 65px) !important;\r\n  }\r\n  \r\n  /* Ajustar la altura del eje X */\r\n  .x-axis {\r\n    height: 40px; /* Más espacio para las etiquetas diagonales */\r\n    padding-bottom: 10px;\r\n  }\r\n  \r\n  /* Ajustar el tamaño del SVG */\r\n  .chart-svg {\r\n    height: calc(100% - 40px);\r\n  }\r\n  \r\n  /* Líneas más finas en móvil */\r\n  .chart-svg line {\r\n    stroke-width: 1px !important;\r\n  }\r\n  \r\n  /* Asegurar que los meses anteriores también estén bien posicionados */\r\n  .x-label:nth-child(2) { /* Febrero */\r\n    left: calc(9.09% * 1) !important;\r\n  }\r\n  \r\n  .x-label:nth-child(3) { /* Marzo */\r\n    left: calc(9.09% * 2) !important;\r\n  }\r\n  \r\n  .x-label:nth-child(4) { /* Abril */\r\n    left: calc(9.09% * 3) !important;\r\n  }\r\n  \r\n  .x-label:nth-child(5) { /* Mayo */\r\n    left: calc(9.09% * 4) !important;\r\n  }\r\n  \r\n  .x-label:nth-child(6) { /* Junio */\r\n    left: calc(9.09% * 5) !important;\r\n  }\r\n  \r\n  .x-label:nth-child(7) { /* Julio */\r\n    left: calc(9.09% * 6) !important;\r\n  }\r\n  \r\n  .x-label:nth-child(8) { /* Agosto */\r\n    left: calc(9.09% * 7) !important;\r\n  }\r\n  \r\n  .x-label:nth-child(9) { /* Septiembre */\r\n    left: calc(9.09% * 8) !important;\r\n  }\r\n}\r\n\r\n/* Ajustes para los elementos SVG en modo claro */\r\n:root:not([data-theme='dark']) .chart-svg path[fill=\"url(#areaGradient)\"] {\r\n  opacity: 0.7; /* Aumentar la opacidad del área en modo claro */\r\n}\r\n\r\n:root:not([data-theme='dark']) .chart-svg path[stroke] {\r\n  stroke-width: 2.5px; /* Líneas ligeramente más gruesas en modo claro */\r\n}\r\n\r\n/* Ajustes para el contenedor del gráfico en modo claro */\r\n:root:not([data-theme='dark']) .chart-content {\r\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n/* Ajustes para el contenedor del eje Y en modo claro */\r\n:root:not([data-theme='dark']) .chart-axes {\r\n  border-right: 1px dashed rgba(0, 0, 0, 0.1);\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}