{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"date-range-chart\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"date-controls\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_6 = {\n  key: 2,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Datepicker = _resolveComponent(\"Datepicker\");\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", null, \"Ventas por Rango de Fecha\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_Datepicker, {\n    modelValue: _ctx.dateRange,\n    \"onUpdate:modelValue\": [_cache[0] || (_cache[0] = $event => _ctx.dateRange = $event), _ctx.handleRangeChange],\n    range: \"\",\n    \"enable-time-picker\": false,\n    \"max-date\": _ctx.today,\n    \"text-input\": \"\",\n    format: {\n      month: 'long',\n      day: '2-digit',\n      year: 'numeric'\n    },\n    \"auto-apply\": \"\",\n    locale: _ctx.es,\n    placeholder: \"Seleccionar rango de fechas\",\n    dark: _ctx.isDarkMode\n  }, null, 8 /* PROPS */, [\"modelValue\", \"max-date\", \"locale\", \"dark\", \"onUpdate:modelValue\"])])]), _ctx.hasDateRange ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _cache[2] || (_cache[2] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _ctx.hasData ? (_openBlock(), _createBlock(_component_apexchart, {\n    key: 1,\n    type: \"area\",\n    height: \"350\",\n    options: _ctx.chartOptions,\n    series: _ctx.series\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])) : !_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, \" Selecciona un rango de fechas para visualizar los datos \")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","_component_Datepicker","modelValue","_ctx","dateRange","$event","handleRangeChange","range","today","format","month","day","year","locale","es","placeholder","dark","isDarkMode","hasDateRange","_hoisted_4","isLoading","_hoisted_5","_cache","_createCommentVNode","hasData","_createBlock","_component_apexchart","type","height","options","chartOptions","series","_hoisted_6"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\DateRangeChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"date-range-chart\">\r\n    <div class=\"chart-header\">\r\n      <h3>Ventas por Rango de Fecha</h3>\r\n      <div class=\"date-controls\">\r\n        <Datepicker\r\n          v-model=\"dateRange\"\r\n          range\r\n          :enable-time-picker=\"false\"\r\n          :max-date=\"today\"\r\n          text-input\r\n          :format=\"{ month: 'long', day: '2-digit', year: 'numeric' }\"\r\n          auto-apply\r\n          :locale=\"es\"\r\n          placeholder=\"Seleccionar rango de fechas\"\r\n          :dark=\"isDarkMode\"\r\n          @update:model-value=\"handleRangeChange\"\r\n        />\r\n      </div>\r\n    </div>\r\n      \r\n    <div class=\"chart-container\" v-if=\"hasDateRange\">\r\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n        <div class=\"loading-spinner\"></div>\r\n      </div>\r\n      <apexchart\r\n        v-if=\"hasData\"\r\n        type=\"area\"\r\n        height=\"350\"\r\n        :options=\"chartOptions\"\r\n        :series=\"series\"\r\n      ></apexchart>\r\n      <div v-else-if=\"!isLoading\" class=\"no-data-message\">\r\n        Selecciona un rango de fechas para visualizar los datos\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport VueApexCharts from 'vue3-apexcharts'\r\nimport Datepicker from '@vuepic/vue-datepicker'\r\nimport '@vuepic/vue-datepicker/dist/main.css'\r\n\r\nexport default defineComponent({\r\n  name: 'DateRangeChart',\r\n  components: {\r\n    apexchart: VueApexCharts,\r\n    Datepicker\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      dateRange: null,\r\n      today: new Date(),\r\n      isLoading: false,\r\n      isDarkMode: false,\r\n      series: [{\r\n        name: 'Ventas',\r\n        data: []\r\n      }],\r\n      chartOptions: {\r\n        chart: {\r\n          type: 'area',\r\n          height: 350,\r\n          background: 'transparent',\r\n          foreColor: '#666',\r\n          toolbar: {\r\n            show: true,\r\n            tools: {\r\n              download: true,\r\n              selection: true,\r\n              zoom: true,\r\n              zoomin: true,\r\n              zoomout: true,\r\n              pan: true,\r\n              reset: true\r\n            }\r\n          },\r\n          animations: {\r\n            enabled: true,\r\n            easing: 'easeinout',\r\n            speed: 800,\r\n            animateGradually: {\r\n              enabled: true,\r\n              delay: 150\r\n            },\r\n            dynamicAnimation: {\r\n              enabled: true,\r\n              speed: 350\r\n            }\r\n          }\r\n        },\r\n        colors: ['#2E93fA'],\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            shadeIntensity: 1,\r\n            opacityFrom: 0.45,\r\n            opacityTo: 0.05,\r\n            stops: [0, 95, 100]\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          curve: 'smooth',\r\n          width: 2\r\n        },\r\n        grid: {\r\n          show: true,\r\n          borderColor: '#f1f1f1',\r\n          strokeDashArray: 3,\r\n          position: 'back'\r\n        },\r\n        markers: {\r\n          size: 4,\r\n          colors: ['#2E93fA'],\r\n          strokeWidth: 2,\r\n          hover: {\r\n            size: 7\r\n          }\r\n        },\r\n        xaxis: {\r\n          type: 'datetime',\r\n          labels: {\r\n            style: {\r\n              colors: '#666',\r\n              fontSize: '12px'\r\n            }\r\n          },\r\n          axisBorder: {\r\n            show: false\r\n          },\r\n          axisTicks: {\r\n            show: false\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Ventas ($)',\r\n            style: {\r\n              fontSize: '14px',\r\n              color: '#666'\r\n            }\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: '#666'\r\n            },\r\n            formatter: function(value) {\r\n              return new Intl.NumberFormat('es-MX', {\r\n                style: 'currency',\r\n                currency: 'MXN'\r\n              }).format(value)\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          shared: true,\r\n          intersect: false,\r\n          y: {\r\n            formatter: function(value) {\r\n              return new Intl.NumberFormat('es-MX', {\r\n                style: 'currency',\r\n                currency: 'MXN'\r\n              }).format(value)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    hasDateRange() {\r\n      return this.dateRange && this.dateRange[0] && this.dateRange[1]\r\n    },\r\n    startDate() {\r\n      return this.dateRange ? this.dateRange[0].toISOString().split('T')[0] : ''\r\n    },\r\n    endDate() {\r\n      return this.dateRange ? this.dateRange[1].toISOString().split('T')[0] : ''\r\n    },\r\n    hasData() {\r\n      return this.series[0].data.length > 0\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.checkDarkMode()\r\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', this.checkDarkMode)\r\n  },\r\n  \r\n  beforeUnmount() {\r\n    window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', this.checkDarkMode)\r\n  },\r\n  \r\n  methods: {\r\n    checkDarkMode() {\r\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme')\r\n      this.updateChartTheme()\r\n    },\r\n\r\n    updateChartTheme() {\r\n      const style = getComputedStyle(document.documentElement)\r\n      const bgSecondary = style.getPropertyValue('--bg-secondary').trim()\r\n      const textSecondary = style.getPropertyValue('--text-secondary').trim()\r\n      const borderColor = style.getPropertyValue('--border-color').trim()\r\n      \r\n      this.chartOptions = {\r\n        ...this.chartOptions,\r\n        chart: {\r\n          ...this.chartOptions.chart,\r\n          background: bgSecondary,\r\n          foreColor: textSecondary\r\n        },\r\n        grid: {\r\n          ...this.chartOptions.grid,\r\n          borderColor: borderColor\r\n        },\r\n        xaxis: {\r\n          ...this.chartOptions.xaxis,\r\n          labels: {\r\n            style: {\r\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          ...this.chartOptions.yaxis,\r\n          title: {\r\n            style: {\r\n              color: this.isDarkMode ? '#e0e0e0' : '#666'\r\n            }\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          theme: this.isDarkMode ? 'dark' : 'light'\r\n        }\r\n      }\r\n    },\r\n\r\n    async loadData() {\r\n      if (!this.hasDateRange) return\r\n\r\n      this.isLoading = true\r\n      // Resetear los datos actuales\r\n      this.series[0].data = []\r\n      \r\n      try {\r\n        const start = new Date(this.startDate)\r\n        const end = new Date(this.endDate)\r\n        const diffDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24))\r\n        \r\n        const data = []\r\n        let currentValue = Math.floor(Math.random() * 500000) + 100000\r\n        \r\n        for (let i = 0; i <= diffDays; i++) {\r\n          const date = new Date(start)\r\n          date.setDate(start.getDate() + i)\r\n          \r\n          const variation = (Math.random() * 0.2) - 0.1\r\n          currentValue = Math.floor(currentValue * (1 + variation))\r\n          currentValue = Math.max(currentValue, 100000)\r\n          \r\n          data.push([\r\n            date.getTime(),\r\n            currentValue\r\n          ])\r\n        }\r\n        \r\n        // Actualizar los datos con un pequeño retraso para asegurar la re-renderización\r\n        setTimeout(() => {\r\n          this.series = [{\r\n            name: 'Ventas',\r\n            data: data\r\n          }]\r\n          this.isLoading = false\r\n        }, 300)\r\n        \r\n      } catch (error) {\r\n        console.error('Error loading data:', error)\r\n        this.isLoading = false\r\n      }\r\n    },\r\n\r\n    handleRangeChange(newRange) {\r\n      this.dateRange = newRange\r\n      if (this.hasDateRange) {\r\n        this.loadData()\r\n      }\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.date-range-chart {\r\n  background: var(--bg-secondary);\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.date-controls {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.date-picker-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.date-input {\r\n  padding: 8px 12px;\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 6px;\r\n  background: var(--bg-primary);\r\n  color: var(--text-primary);\r\n  font-size: 0.9rem;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.date-input:hover {\r\n  border-color: var(--border-hover);\r\n}\r\n\r\n.date-input:focus {\r\n  outline: none;\r\n  border-color: var(--primary);\r\n  box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);\r\n}\r\n\r\n.date-separator {\r\n  color: var(--text-secondary);\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  min-height: 350px;\r\n  background: var(--bg-primary);\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: var(--bg-overlay);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 3px solid var(--spinner-track);\r\n  border-top-color: var(--spinner-color);\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.no-data-message {\r\n  height: 350px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: var(--text-secondary);\r\n  font-size: 1.1rem;\r\n}\r\n\r\n@keyframes spin {\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chart-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 15px;\r\n  }\r\n\r\n  .date-controls {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n\r\n  .date-picker-container {\r\n    width: 100%;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .date-input {\r\n    width: 100%;\r\n  }\r\n\r\n  .update-button {\r\n    width: 100%;\r\n    margin-top: 10px;\r\n  }\r\n}\r\n\r\n:deep(.apexcharts-canvas) {\r\n  background: var(--bg-secondary) !important;\r\n}\r\n\r\n:deep(.apexcharts-tooltip) {\r\n  background: var(--bg-secondary) !important;\r\n  border: 1px solid var(--border-color) !important;\r\n}\r\n\r\n:deep(.apexcharts-tooltip-title) {\r\n  background: var(--bg-tertiary) !important;\r\n  border-bottom: 1px solid var(--border-color) !important;\r\n}\r\n\r\n:deep(.apexcharts-xaxistooltip) {\r\n  background: var(--bg-secondary) !important;\r\n  border: 1px solid var(--border-color) !important;\r\n}\r\n\r\n.update-button {\r\n  padding: 8px 16px;\r\n  background: var(--primary);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 6px;\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-width: 100px;\r\n}\r\n\r\n.update-button:hover:not(:disabled) {\r\n  background: var(--primary-dark);\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.update-button:disabled {\r\n  background: var(--disabled);\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.button-text {\r\n  font-weight: 500;\r\n}\r\n\r\n.dp__theme_dark {\r\n  --dp-background-color: var(--bg-secondary);\r\n  --dp-text-color: var(--text-primary);\r\n  --dp-hover-color: var(--primary);\r\n  --dp-hover-text-color: white;\r\n  --dp-hover-icon-color: white;\r\n  --dp-primary-color: var(--primary);\r\n  --dp-primary-text-color: white;\r\n  --dp-secondary-color: var(--bg-tertiary);\r\n  --dp-border-color: var(--border-color);\r\n  --dp-menu-border-color: var(--border-color);\r\n}\r\n\r\n.dp__theme_light {\r\n  --dp-background-color: var(--bg-primary);\r\n  --dp-text-color: var(--text-primary);\r\n  --dp-hover-color: var(--primary-light);\r\n  --dp-hover-text-color: var(--primary);\r\n  --dp-hover-icon-color: var(--primary);\r\n  --dp-primary-color: var(--primary);\r\n  --dp-primary-text-color: white;\r\n  --dp-secondary-color: var(--bg-secondary);\r\n  --dp-border-color: var(--border-color);\r\n  --dp-menu-border-color: var(--border-color);\r\n}\r\n\r\n:deep(.dp__input) {\r\n  background: var(--bg-primary);\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 6px;\r\n  color: var(--text-primary);\r\n  font-size: 0.9rem;\r\n  padding: 8px 12px;\r\n  width: 100%;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n:deep(.dp__input:hover) {\r\n  border-color: var(--border-hover);\r\n}\r\n\r\n:deep(.dp__input:focus) {\r\n  outline: none;\r\n  border-color: var(--primary);\r\n  box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAe;;EAJhCC,GAAA;EAqBSD,KAAK,EAAC;;;EArBfC,GAAA;EAsB4BD,KAAK,EAAC;;;EAtBlCC,GAAA;EAgCkCD,KAAK,EAAC;;;;;uBA/BtCE,mBAAA,CAmCM,OAnCNC,UAmCM,GAlCJC,mBAAA,CAiBM,OAjBNC,UAiBM,G,0BAhBJD,mBAAA,CAAkC,YAA9B,2BAAyB,sBAC7BA,mBAAA,CAcM,OAdNE,UAcM,GAbJC,YAAA,CAYEC,qBAAA;IAjBVC,UAAA,EAMmBC,IAAA,CAAAC,SAAS;IAN5B,wB,oCAMmBD,IAAA,CAAAC,SAAS,GAAAC,MAAA,GAUGF,IAAA,CAAAG,iBAAiB,C;IATtCC,KAAK,EAAL,EAAK;IACJ,oBAAkB,EAAE,KAAK;IACzB,UAAQ,EAAEJ,IAAA,CAAAK,KAAK;IAChB,YAAU,EAAV,EAAU;IACTC,MAAM,EAAE;MAAAC,KAAA;MAAAC,GAAA;MAAAC,IAAA;IAAA,CAAkD;IAC3D,YAAU,EAAV,EAAU;IACTC,MAAM,EAAEV,IAAA,CAAAW,EAAE;IACXC,WAAW,EAAC,6BAA6B;IACxCC,IAAI,EAAEb,IAAA,CAAAc;oGAMsBd,IAAA,CAAAe,YAAY,I,cAA/CvB,mBAAA,CAcM,OAdNwB,UAcM,GAbOhB,IAAA,CAAAiB,SAAS,I,cAApBzB,mBAAA,CAEM,OAFN0B,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJzB,mBAAA,CAAmC;IAA9BJ,KAAK,EAAC;EAAiB,2B,MAvBpC8B,mBAAA,gBA0BcpB,IAAA,CAAAqB,OAAO,I,cADfC,YAAA,CAMaC,oBAAA;IA/BnBhC,GAAA;IA2BQiC,IAAI,EAAC,MAAM;IACXC,MAAM,EAAC,KAAK;IACXC,OAAO,EAAE1B,IAAA,CAAA2B,YAAY;IACrBC,MAAM,EAAE5B,IAAA,CAAA4B;qDAEM5B,IAAA,CAAAiB,SAAS,I,cAA1BzB,mBAAA,CAEM,OAFNqC,UAEM,EAF8C,2DAEpD,KAlCNT,mBAAA,e,KAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}