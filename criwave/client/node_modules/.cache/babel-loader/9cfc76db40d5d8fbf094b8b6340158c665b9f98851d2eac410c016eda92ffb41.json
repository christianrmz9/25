{"ast":null,"code":"/**\r\n * Componente principal del Dashboard\r\n * \r\n * Muestra un resumen de las métricas principales del negocio,\r\n * comenzando con las ventas del día.\r\n * \r\n * @component AppDashboard\r\n */\nimport SalesCard from './SalesCard.vue';\n// Importar el servicio de dashboard en lugar de los datos directamente\nimport { getDailySales, getWeeklySales, getMonthlySales } from '../../services/dashboardService';\nexport default {\n  name: 'AppDashboard',\n  components: {\n    SalesCard\n  },\n  data() {\n    return {\n      // Inicializar con valores vacíos que se llenarán al cargar\n      dailySales: {\n        amount: 0,\n        count: 0,\n        average: 0,\n        change: 0,\n        changeAmount: 0\n      },\n      // Datos de ventas semanales\n      weeklySales: {\n        amount: 0,\n        count: 0,\n        average: 0,\n        change: 0,\n        changeAmount: 0\n      },\n      // Datos de ventas mensuales\n      monthlySales: {\n        amount: 0,\n        count: 0,\n        average: 0,\n        change: 0,\n        changeAmount: 0\n      },\n      isLoading: true,\n      error: null\n    };\n  },\n  computed: {\n    /**\r\n     * Genera un mensaje de bienvenida personalizado según la hora del día\r\n     */\n    welcomeMessage() {\n      const hour = new Date().getHours();\n      let greeting = '';\n      if (hour < 12) {\n        greeting = 'Buenos días';\n      } else if (hour < 18) {\n        greeting = 'Buenas tardes';\n      } else {\n        greeting = 'Buenas noches';\n      }\n\n      // Aquí se podría añadir el nombre del usuario cuando haya sistema de autenticación\n      return `${greeting}, Usuario`;\n    }\n  },\n  methods: {\n    /**\r\n     * Carga los datos del dashboard desde el servicio\r\n     */\n    async loadDashboardData() {\n      try {\n        this.isLoading = true;\n        this.error = null;\n\n        // Cargar múltiples conjuntos de datos en paralelo\n        const [dailyData, weeklyData, monthlyData] = await Promise.all([getDailySales(), getWeeklySales(), getMonthlySales()]);\n\n        // Mapear los datos al formato esperado por los componentes\n        this.dailySales = {\n          amount: dailyData.total,\n          count: dailyData.count,\n          average: dailyData.average,\n          change: dailyData.change,\n          changeAmount: dailyData.changeAmount\n        };\n        this.weeklySales = {\n          amount: weeklyData.total,\n          count: weeklyData.count,\n          average: weeklyData.average,\n          change: weeklyData.change,\n          changeAmount: weeklyData.changeAmount\n        };\n        this.monthlySales = {\n          amount: monthlyData.total,\n          count: monthlyData.count,\n          average: monthlyData.average,\n          change: monthlyData.change,\n          changeAmount: monthlyData.changeAmount\n        };\n\n        // Aquí se pueden cargar más datos según sea necesario\n\n        this.isLoading = false;\n      } catch (error) {\n        console.error('Error al cargar datos del dashboard:', error);\n        this.error = 'No se pudieron cargar los datos. Por favor, intenta de nuevo más tarde.';\n        this.isLoading = false;\n      }\n    }\n  },\n  mounted() {\n    // Cargar datos al montar el componente\n    this.loadDashboardData();\n  }\n};","map":{"version":3,"names":["SalesCard","getDailySales","getWeeklySales","getMonthlySales","name","components","data","dailySales","amount","count","average","change","changeAmount","weeklySales","monthlySales","isLoading","error","computed","welcomeMessage","hour","Date","getHours","greeting","methods","loadDashboardData","dailyData","weeklyData","monthlyData","Promise","all","total","console","mounted"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-container\">\r\n    <div class=\"dashboard-header\">\r\n      <!-- Título y subtítulo eliminados -->\r\n    </div>\r\n    \r\n    <div class=\"sales-cards\">\r\n      <!-- Tarjeta de ventas diarias -->\r\n      <sales-card\r\n        title=\"Ventas del día\"\r\n        :amount=\"dailySales.amount\"\r\n        :count=\"dailySales.count\"\r\n        :average=\"dailySales.average\"\r\n        :change=\"dailySales.change\"\r\n        :change-amount=\"dailySales.changeAmount\"\r\n        comparison-period=\"día anterior\"\r\n      />\r\n      \r\n      <!-- Tarjeta de ventas semanales -->\r\n      <sales-card\r\n        title=\"Ventas de la semana\"\r\n        :amount=\"weeklySales.amount\"\r\n        :count=\"weeklySales.count\"\r\n        :average=\"weeklySales.average\"\r\n        :change=\"weeklySales.change\"\r\n        :change-amount=\"weeklySales.changeAmount\"\r\n        comparison-period=\"semana anterior\"\r\n      />\r\n      \r\n      <!-- Tarjeta de ventas mensuales -->\r\n      <sales-card\r\n        title=\"Ventas del mes\"\r\n        :amount=\"monthlySales.amount\"\r\n        :count=\"monthlySales.count\"\r\n        :average=\"monthlySales.average\"\r\n        :change=\"monthlySales.change\"\r\n        :change-amount=\"monthlySales.changeAmount\"\r\n        comparison-period=\"mes anterior\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n/**\r\n * Componente principal del Dashboard\r\n * \r\n * Muestra un resumen de las métricas principales del negocio,\r\n * comenzando con las ventas del día.\r\n * \r\n * @component AppDashboard\r\n */\r\nimport SalesCard from './SalesCard.vue';\r\n// Importar el servicio de dashboard en lugar de los datos directamente\r\nimport { getDailySales, getWeeklySales, getMonthlySales } from '../../services/dashboardService';\r\n\r\nexport default {\r\n  name: 'AppDashboard',\r\n  \r\n  components: {\r\n    SalesCard\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      // Inicializar con valores vacíos que se llenarán al cargar\r\n      dailySales: {\r\n        amount: 0,\r\n        count: 0,\r\n        average: 0,\r\n        change: 0,\r\n        changeAmount: 0\r\n      },\r\n      // Datos de ventas semanales\r\n      weeklySales: {\r\n        amount: 0,\r\n        count: 0,\r\n        average: 0,\r\n        change: 0,\r\n        changeAmount: 0\r\n      },\r\n      // Datos de ventas mensuales\r\n      monthlySales: {\r\n        amount: 0,\r\n        count: 0,\r\n        average: 0,\r\n        change: 0,\r\n        changeAmount: 0\r\n      },\r\n      isLoading: true,\r\n      error: null\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    /**\r\n     * Genera un mensaje de bienvenida personalizado según la hora del día\r\n     */\r\n    welcomeMessage() {\r\n      const hour = new Date().getHours();\r\n      let greeting = '';\r\n      \r\n      if (hour < 12) {\r\n        greeting = 'Buenos días';\r\n      } else if (hour < 18) {\r\n        greeting = 'Buenas tardes';\r\n      } else {\r\n        greeting = 'Buenas noches';\r\n      }\r\n      \r\n      // Aquí se podría añadir el nombre del usuario cuando haya sistema de autenticación\r\n      return `${greeting}, Usuario`;\r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Carga los datos del dashboard desde el servicio\r\n     */\r\n    async loadDashboardData() {\r\n      try {\r\n        this.isLoading = true;\r\n        this.error = null;\r\n        \r\n        // Cargar múltiples conjuntos de datos en paralelo\r\n        const [dailyData, weeklyData, monthlyData] = await Promise.all([\r\n          getDailySales(),\r\n          getWeeklySales(),\r\n          getMonthlySales()\r\n        ]);\r\n        \r\n        // Mapear los datos al formato esperado por los componentes\r\n        this.dailySales = {\r\n          amount: dailyData.total,\r\n          count: dailyData.count,\r\n          average: dailyData.average,\r\n          change: dailyData.change,\r\n          changeAmount: dailyData.changeAmount\r\n        };\r\n        \r\n        this.weeklySales = {\r\n          amount: weeklyData.total,\r\n          count: weeklyData.count,\r\n          average: weeklyData.average,\r\n          change: weeklyData.change,\r\n          changeAmount: weeklyData.changeAmount\r\n        };\r\n        \r\n        this.monthlySales = {\r\n          amount: monthlyData.total,\r\n          count: monthlyData.count,\r\n          average: monthlyData.average,\r\n          change: monthlyData.change,\r\n          changeAmount: monthlyData.changeAmount\r\n        };\r\n        \r\n        // Aquí se pueden cargar más datos según sea necesario\r\n        \r\n        this.isLoading = false;\r\n      } catch (error) {\r\n        console.error('Error al cargar datos del dashboard:', error);\r\n        this.error = 'No se pudieron cargar los datos. Por favor, intenta de nuevo más tarde.';\r\n        this.isLoading = false;\r\n      }\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    // Cargar datos al montar el componente\r\n    this.loadDashboardData();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Estilos del dashboard */\r\n.dashboard-container {\r\n  width: 100%;\r\n  padding: 5px 0;\r\n}\r\n\r\n/* Estilos del encabezado */\r\n.dashboard-header {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.welcome-title {\r\n  font-size: 1.6rem;\r\n  font-weight: 600;\r\n  color: var(--text-primary);\r\n  margin: 0 0 6px 0;\r\n  /* Añadir efecto de texto 3D sutil */\r\n  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);\r\n  opacity: 0.95; /* Alta importancia pero no distrae de los datos */\r\n}\r\n\r\n.welcome-subtitle {\r\n  font-size: 0.9rem;\r\n  color: var(--text-secondary);\r\n  margin: 0;\r\n  opacity: 0.75; /* Menos prominente que el título */\r\n}\r\n\r\n/* Contenedor de tarjetas */\r\n.sales-cards {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 30px;\r\n  /* Añadir perspectiva para mejorar el efecto 3D */\r\n  perspective: 1000px;\r\n}\r\n\r\n/* Estado de carga */\r\n.loading-state {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 40px 0;\r\n  color: var(--text-secondary);\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 3px solid rgba(125, 130, 152, 0.2);\r\n  border-top-color: var(--accent);\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n@keyframes spin {\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n/* Mensaje de error */\r\n.error-message {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 16px;\r\n  background-color: rgba(209, 67, 67, 0.1);\r\n  color: var(--error);\r\n  border-radius: 8px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.error-message svg {\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-right: 12px;\r\n}\r\n\r\n/* Ajustes responsive */\r\n@media (max-width: 768px) {\r\n  .dashboard-container {\r\n    padding: 3px 0;\r\n  }\r\n  \r\n  .welcome-title {\r\n    font-size: 1.4rem;\r\n  }\r\n  \r\n  .welcome-subtitle {\r\n    font-size: 0.85rem;\r\n  }\r\n  \r\n  .sales-cards {\r\n    grid-template-columns: 1fr;\r\n    gap: 18px;\r\n    /* Mantener la perspectiva en móviles */\r\n    perspective: 800px;\r\n  }\r\n  \r\n  .loading-spinner {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}