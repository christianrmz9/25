{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineComponent } from 'vue';\nimport VueApexCharts from 'vue3-apexcharts';\nexport default defineComponent({\n  name: 'RevenueChart',\n  components: {\n    apexchart: VueApexCharts\n  },\n  data() {\n    return {\n      selectedPeriod: 'month',\n      showComparison: false,\n      isLoading: false,\n      series: [{\n        name: 'Ingresos',\n        data: []\n      }],\n      isDarkMode: false,\n      chartOptions: {\n        chart: {\n          type: 'area',\n          height: 350,\n          background: 'transparent',\n          foreColor: '#666',\n          toolbar: {\n            show: true,\n            tools: {\n              download: true,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              reset: true\n            }\n          },\n          animations: {\n            enabled: true,\n            easing: 'easeinout',\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 150\n            },\n            dynamicAnimation: {\n              enabled: true,\n              speed: 350\n            }\n          }\n        },\n        colors: ['#2E93fA', '#66DA26'],\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.7,\n            opacityTo: 0.2,\n            stops: [0, 90, 100]\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 2\n        },\n        grid: {\n          borderColor: '#f1f1f1',\n          row: {\n            colors: ['transparent', 'transparent'],\n            opacity: 0.5\n          }\n        },\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeColors: '#fff',\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: '#666',\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Ingresos ($)',\n            style: {\n              fontSize: '14px'\n            }\n          },\n          labels: {\n            formatter: function (value) {\n              return value >= 1000000 ? `$${(value / 1000000).toFixed(1)}M` : value >= 1000 ? `$${(value / 1000).toFixed(1)}K` : `$${value}`;\n            }\n          }\n        },\n        tooltip: {\n          shared: true,\n          intersect: false,\n          theme: 'light',\n          y: {\n            formatter: function (value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value);\n            }\n          }\n        },\n        theme: {\n          mode: 'light',\n          palette: 'palette1'\n        }\n      }\n    };\n  },\n  created() {\n    // Detectar el tema inicial\n    this.isDarkMode = document.documentElement.classList.contains('dark-theme');\n    // Escuchar cambios en el tema\n    window.addEventListener('theme-changed', this.handleThemeChange);\n  },\n  beforeUnmount() {\n    // Limpiar el event listener\n    window.removeEventListener('theme-changed', this.handleThemeChange);\n  },\n  watch: {\n    selectedPeriod: {\n      handler(newPeriod) {\n        this.loadData(newPeriod);\n      },\n      immediate: true\n    },\n    showComparison(newValue) {\n      if (newValue) {\n        this.loadComparisonData();\n      } else {\n        this.series = this.series.slice(0, 1);\n      }\n    },\n    isDarkMode: {\n      handler() {\n        this.updateChartTheme();\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    handleThemeChange() {\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme');\n      this.updateChartTheme();\n    },\n    updateChartTheme() {\n      const darkThemeColors = {\n        background: 'transparent',\n        foreColor: '#B2BAC2',\n        grid: {\n          borderColor: 'rgba(255, 255, 255, 0.1)'\n        },\n        tooltip: {\n          theme: 'dark'\n        },\n        theme: {\n          mode: 'dark'\n        }\n      };\n      const lightThemeColors = {\n        background: 'transparent',\n        foreColor: '#666',\n        grid: {\n          borderColor: '#f1f1f1'\n        },\n        tooltip: {\n          theme: 'light'\n        },\n        theme: {\n          mode: 'light'\n        }\n      };\n      const themeColors = this.isDarkMode ? darkThemeColors : lightThemeColors;\n      this.chartOptions = {\n        ...this.chartOptions,\n        chart: {\n          ...this.chartOptions.chart,\n          background: themeColors.background,\n          foreColor: themeColors.foreColor\n        },\n        grid: {\n          ...this.chartOptions.grid,\n          borderColor: themeColors.grid.borderColor\n        },\n        tooltip: {\n          ...this.chartOptions.tooltip,\n          theme: themeColors.tooltip.theme\n        },\n        theme: themeColors.theme,\n        xaxis: {\n          ...this.chartOptions.xaxis,\n          labels: {\n            ...this.chartOptions.xaxis.labels,\n            style: {\n              ...this.chartOptions.xaxis.labels.style,\n              colors: themeColors.foreColor\n            }\n          }\n        },\n        yaxis: {\n          ...this.chartOptions.yaxis,\n          labels: {\n            ...this.chartOptions.yaxis.labels,\n            style: {\n              colors: themeColors.foreColor\n            }\n          },\n          title: {\n            ...this.chartOptions.yaxis.title,\n            style: {\n              ...this.chartOptions.yaxis.title.style,\n              color: themeColors.foreColor\n            }\n          }\n        }\n      };\n    },\n    async loadData(period) {\n      this.isLoading = true;\n      try {\n        // Aquí iría la llamada a tu API\n        // Por ahora usamos datos de ejemplo\n        const data = this.generateMockData(period);\n        this.series = [{\n          name: 'Ingresos',\n          data: data\n        }];\n        if (this.showComparison) {\n          await this.loadComparisonData();\n        }\n      } catch (error) {\n        console.error('Error loading revenue data:', error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async loadComparisonData() {\n      try {\n        // Aquí iría la llamada a tu API para datos de comparación\n        const comparisonData = this.generateMockComparisonData(this.selectedPeriod);\n        if (this.series.length > 1) {\n          this.series[1] = {\n            name: 'Período anterior',\n            data: comparisonData\n          };\n        } else {\n          this.series.push({\n            name: 'Período anterior',\n            data: comparisonData\n          });\n        }\n      } catch (error) {\n        console.error('Error loading comparison data:', error);\n      }\n    },\n    generateMockData(period) {\n      const now = new Date();\n      const data = [];\n      let points = 0;\n      switch (period) {\n        case 'day':\n          points = 24;\n          for (let i = 0; i < points; i++) {\n            data.push([now.setHours(i, 0, 0), Math.floor(Math.random() * 50000) + 10000]);\n          }\n          break;\n        case 'week':\n          points = 7;\n          for (let i = 0; i < points; i++) {\n            data.push([now.setDate(now.getDate() - 1), Math.floor(Math.random() * 200000) + 50000]);\n          }\n          break;\n        case 'month':\n          points = 30;\n          for (let i = 0; i < points; i++) {\n            data.push([now.setDate(now.getDate() - 1), Math.floor(Math.random() * 500000) + 100000]);\n          }\n          break;\n        case 'year':\n          points = 12;\n          for (let i = 0; i < points; i++) {\n            data.push([now.setMonth(now.getMonth() - 1), Math.floor(Math.random() * 2000000) + 500000]);\n          }\n          break;\n      }\n      return data.reverse();\n    },\n    generateMockComparisonData(period) {\n      return this.generateMockData(period).map(([date, value]) => {\n        const prevDate = new Date(date);\n        switch (period) {\n          case 'day':\n            prevDate.setDate(prevDate.getDate() - 1);\n            break;\n          case 'week':\n            prevDate.setDate(prevDate.getDate() - 7);\n            break;\n          case 'month':\n            prevDate.setMonth(prevDate.getMonth() - 1);\n            break;\n          case 'year':\n            prevDate.setFullYear(prevDate.getFullYear() - 1);\n            break;\n        }\n        return [prevDate.getTime(), Math.floor(value * 0.8 + Math.random() * value * 0.4)];\n      });\n    }\n  }\n});","map":{"version":3,"names":["defineComponent","VueApexCharts","name","components","apexchart","data","selectedPeriod","showComparison","isLoading","series","isDarkMode","chartOptions","chart","type","height","background","foreColor","toolbar","show","tools","download","selection","zoom","zoomin","zoomout","pan","reset","animations","enabled","easing","speed","animateGradually","delay","dynamicAnimation","colors","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","dataLabels","stroke","curve","width","grid","borderColor","row","opacity","markers","size","strokeColors","strokeWidth","hover","xaxis","labels","style","fontSize","yaxis","title","text","formatter","value","toFixed","tooltip","shared","intersect","theme","y","Intl","NumberFormat","currency","format","mode","palette","created","document","documentElement","classList","contains","window","addEventListener","handleThemeChange","beforeUnmount","removeEventListener","watch","handler","newPeriod","loadData","immediate","newValue","loadComparisonData","slice","updateChartTheme","methods","darkThemeColors","lightThemeColors","themeColors","color","period","generateMockData","error","console","comparisonData","generateMockComparisonData","length","push","now","Date","points","i","setHours","Math","floor","random","setDate","getDate","setMonth","getMonth","reverse","map","date","prevDate","setFullYear","getFullYear","getTime"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"revenue-chart\">\r\n    <div class=\"chart-header\">\r\n      <h2 class=\"chart-title\">Total Ingresos</h2>\r\n      <div class=\"chart-controls\">\r\n        <div class=\"period-selector\">\r\n          <select v-model=\"selectedPeriod\" class=\"period-select\">\r\n            <option value=\"day\">Hoy</option>\r\n            <option value=\"week\">Esta semana</option>\r\n            <option value=\"month\">Este mes</option>\r\n            <option value=\"year\">Este año</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"comparison-toggle\">\r\n          <label class=\"switch\">\r\n            <input type=\"checkbox\" v-model=\"showComparison\">\r\n            <span class=\"slider\"></span>\r\n          </label>\r\n          <span class=\"toggle-label\">Comparar con período anterior</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"chart-container\">\r\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n        <div class=\"loading-spinner\"></div>\r\n      </div>\r\n      <apexchart\r\n        type=\"area\"\r\n        height=\"350\"\r\n        :options=\"chartOptions\"\r\n        :series=\"series\"\r\n      ></apexchart>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport VueApexCharts from 'vue3-apexcharts'\r\n\r\nexport default defineComponent({\r\n  name: 'RevenueChart',\r\n  components: {\r\n    apexchart: VueApexCharts\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      selectedPeriod: 'month',\r\n      showComparison: false,\r\n      isLoading: false,\r\n      series: [{\r\n        name: 'Ingresos',\r\n        data: []\r\n      }],\r\n      isDarkMode: false,\r\n      chartOptions: {\r\n        chart: {\r\n          type: 'area',\r\n          height: 350,\r\n          background: 'transparent',\r\n          foreColor: '#666',\r\n          toolbar: {\r\n            show: true,\r\n            tools: {\r\n              download: true,\r\n              selection: true,\r\n              zoom: true,\r\n              zoomin: true,\r\n              zoomout: true,\r\n              pan: true,\r\n              reset: true\r\n            }\r\n          },\r\n          animations: {\r\n            enabled: true,\r\n            easing: 'easeinout',\r\n            speed: 800,\r\n            animateGradually: {\r\n              enabled: true,\r\n              delay: 150\r\n            },\r\n            dynamicAnimation: {\r\n              enabled: true,\r\n              speed: 350\r\n            }\r\n          }\r\n        },\r\n        colors: ['#2E93fA', '#66DA26'],\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            shadeIntensity: 1,\r\n            opacityFrom: 0.7,\r\n            opacityTo: 0.2,\r\n            stops: [0, 90, 100]\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          curve: 'smooth',\r\n          width: 2\r\n        },\r\n        grid: {\r\n          borderColor: '#f1f1f1',\r\n          row: {\r\n            colors: ['transparent', 'transparent'],\r\n            opacity: 0.5\r\n          }\r\n        },\r\n        markers: {\r\n          size: 4,\r\n          colors: ['#2E93fA'],\r\n          strokeColors: '#fff',\r\n          strokeWidth: 2,\r\n          hover: {\r\n            size: 7\r\n          }\r\n        },\r\n        xaxis: {\r\n          type: 'datetime',\r\n          labels: {\r\n            style: {\r\n              colors: '#666',\r\n              fontSize: '12px'\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Ingresos ($)',\r\n            style: {\r\n              fontSize: '14px'\r\n            }\r\n          },\r\n          labels: {\r\n            formatter: function(value) {\r\n              return value >= 1000000 \r\n                ? `$${(value/1000000).toFixed(1)}M` \r\n                : value >= 1000 \r\n                  ? `$${(value/1000).toFixed(1)}K` \r\n                  : `$${value}`\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          shared: true,\r\n          intersect: false,\r\n          theme: 'light',\r\n          y: {\r\n            formatter: function(value) {\r\n              return new Intl.NumberFormat('es-MX', {\r\n                style: 'currency',\r\n                currency: 'MXN'\r\n              }).format(value)\r\n            }\r\n          }\r\n        },\r\n        theme: {\r\n          mode: 'light',\r\n          palette: 'palette1'\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  created() {\r\n    // Detectar el tema inicial\r\n    this.isDarkMode = document.documentElement.classList.contains('dark-theme')\r\n    // Escuchar cambios en el tema\r\n    window.addEventListener('theme-changed', this.handleThemeChange)\r\n  },\r\n\r\n  beforeUnmount() {\r\n    // Limpiar el event listener\r\n    window.removeEventListener('theme-changed', this.handleThemeChange)\r\n  },\r\n\r\n  watch: {\r\n    selectedPeriod: {\r\n      handler(newPeriod) {\r\n        this.loadData(newPeriod)\r\n      },\r\n      immediate: true\r\n    },\r\n    showComparison(newValue) {\r\n      if (newValue) {\r\n        this.loadComparisonData()\r\n      } else {\r\n        this.series = this.series.slice(0, 1)\r\n      }\r\n    },\r\n    isDarkMode: {\r\n      handler() {\r\n        this.updateChartTheme()\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    handleThemeChange() {\r\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme')\r\n      this.updateChartTheme()\r\n    },\r\n\r\n    updateChartTheme() {\r\n      const darkThemeColors = {\r\n        background: 'transparent',\r\n        foreColor: '#B2BAC2',\r\n        grid: {\r\n          borderColor: 'rgba(255, 255, 255, 0.1)'\r\n        },\r\n        tooltip: {\r\n          theme: 'dark'\r\n        },\r\n        theme: {\r\n          mode: 'dark'\r\n        }\r\n      }\r\n\r\n      const lightThemeColors = {\r\n        background: 'transparent',\r\n        foreColor: '#666',\r\n        grid: {\r\n          borderColor: '#f1f1f1'\r\n        },\r\n        tooltip: {\r\n          theme: 'light'\r\n        },\r\n        theme: {\r\n          mode: 'light'\r\n        }\r\n      }\r\n\r\n      const themeColors = this.isDarkMode ? darkThemeColors : lightThemeColors\r\n\r\n      this.chartOptions = {\r\n        ...this.chartOptions,\r\n        chart: {\r\n          ...this.chartOptions.chart,\r\n          background: themeColors.background,\r\n          foreColor: themeColors.foreColor\r\n        },\r\n        grid: {\r\n          ...this.chartOptions.grid,\r\n          borderColor: themeColors.grid.borderColor\r\n        },\r\n        tooltip: {\r\n          ...this.chartOptions.tooltip,\r\n          theme: themeColors.tooltip.theme\r\n        },\r\n        theme: themeColors.theme,\r\n        xaxis: {\r\n          ...this.chartOptions.xaxis,\r\n          labels: {\r\n            ...this.chartOptions.xaxis.labels,\r\n            style: {\r\n              ...this.chartOptions.xaxis.labels.style,\r\n              colors: themeColors.foreColor\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          ...this.chartOptions.yaxis,\r\n          labels: {\r\n            ...this.chartOptions.yaxis.labels,\r\n            style: {\r\n              colors: themeColors.foreColor\r\n            }\r\n          },\r\n          title: {\r\n            ...this.chartOptions.yaxis.title,\r\n            style: {\r\n              ...this.chartOptions.yaxis.title.style,\r\n              color: themeColors.foreColor\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    async loadData(period) {\r\n      this.isLoading = true\r\n      try {\r\n        // Aquí iría la llamada a tu API\r\n        // Por ahora usamos datos de ejemplo\r\n        const data = this.generateMockData(period)\r\n        this.series = [{\r\n          name: 'Ingresos',\r\n          data: data\r\n        }]\r\n        \r\n        if (this.showComparison) {\r\n          await this.loadComparisonData()\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading revenue data:', error)\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n\r\n    async loadComparisonData() {\r\n      try {\r\n        // Aquí iría la llamada a tu API para datos de comparación\r\n        const comparisonData = this.generateMockComparisonData(this.selectedPeriod)\r\n        if (this.series.length > 1) {\r\n          this.series[1] = {\r\n            name: 'Período anterior',\r\n            data: comparisonData\r\n          }\r\n        } else {\r\n          this.series.push({\r\n            name: 'Período anterior',\r\n            data: comparisonData\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading comparison data:', error)\r\n      }\r\n    },\r\n\r\n    generateMockData(period) {\r\n      const now = new Date()\r\n      const data = []\r\n      let points = 0\r\n      \r\n      switch(period) {\r\n        case 'day':\r\n          points = 24\r\n          for (let i = 0; i < points; i++) {\r\n            data.push([\r\n              now.setHours(i, 0, 0),\r\n              Math.floor(Math.random() * 50000) + 10000\r\n            ])\r\n          }\r\n          break\r\n        case 'week':\r\n          points = 7\r\n          for (let i = 0; i < points; i++) {\r\n            data.push([\r\n              now.setDate(now.getDate() - 1),\r\n              Math.floor(Math.random() * 200000) + 50000\r\n            ])\r\n          }\r\n          break\r\n        case 'month':\r\n          points = 30\r\n          for (let i = 0; i < points; i++) {\r\n            data.push([\r\n              now.setDate(now.getDate() - 1),\r\n              Math.floor(Math.random() * 500000) + 100000\r\n            ])\r\n          }\r\n          break\r\n        case 'year':\r\n          points = 12\r\n          for (let i = 0; i < points; i++) {\r\n            data.push([\r\n              now.setMonth(now.getMonth() - 1),\r\n              Math.floor(Math.random() * 2000000) + 500000\r\n            ])\r\n          }\r\n          break\r\n      }\r\n      \r\n      return data.reverse()\r\n    },\r\n\r\n    generateMockComparisonData(period) {\r\n      return this.generateMockData(period).map(([date, value]) => {\r\n        const prevDate = new Date(date)\r\n        switch(period) {\r\n          case 'day':\r\n            prevDate.setDate(prevDate.getDate() - 1)\r\n            break\r\n          case 'week':\r\n            prevDate.setDate(prevDate.getDate() - 7)\r\n            break\r\n          case 'month':\r\n            prevDate.setMonth(prevDate.getMonth() - 1)\r\n            break\r\n          case 'year':\r\n            prevDate.setFullYear(prevDate.getFullYear() - 1)\r\n            break\r\n        }\r\n        return [prevDate.getTime(), Math.floor(value * 0.8 + Math.random() * value * 0.4)]\r\n      })\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.revenue-chart {\r\n  background: var(--surface-background);\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 6px var(--shadow-color);\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  color: var(--text-primary);\r\n  margin: 0;\r\n}\r\n\r\n.chart-controls {\r\n  display: flex;\r\n  gap: 20px;\r\n  align-items: center;\r\n}\r\n\r\n.period-select {\r\n  padding: 8px 12px;\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 6px;\r\n  background: var(--surface-background);\r\n  color: var(--text-primary);\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.period-select:hover {\r\n  border-color: var(--border-hover-color);\r\n}\r\n\r\n.switch {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 24px;\r\n}\r\n\r\n.switch input {\r\n  opacity: 0;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n.slider {\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: var(--switch-background);\r\n  transition: .4s;\r\n  border-radius: 24px;\r\n}\r\n\r\n.slider:before {\r\n  position: absolute;\r\n  content: \"\";\r\n  height: 16px;\r\n  width: 16px;\r\n  left: 4px;\r\n  bottom: 4px;\r\n  background-color: var(--surface-background);\r\n  transition: .4s;\r\n  border-radius: 50%;\r\n}\r\n\r\ninput:checked + .slider {\r\n  background-color: #2E93fA;\r\n}\r\n\r\ninput:checked + .slider:before {\r\n  transform: translateX(26px);\r\n}\r\n\r\n.toggle-label {\r\n  margin-left: 10px;\r\n  color: var(--text-secondary);\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  min-height: 350px;\r\n}\r\n\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: var(--overlay-background);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 3px solid var(--spinner-track-color);\r\n  border-top-color: var(--spinner-color);\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chart-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 15px;\r\n  }\r\n\r\n  .chart-controls {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n\r\n  .period-select {\r\n    width: 100%;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}