{"ast":null,"code":"/**\r\n * Servicio para obtener datos del dashboard\r\n * \r\n * Este servicio actúa como una capa de abstracción entre los componentes\r\n * y la fuente de datos. Actualmente utiliza datos de ejemplo, pero está\r\n * diseñado para facilitar la transición a una API real en el futuro.\r\n */\n\n// Importar datos de ejemplo\nimport { dailySalesData, weeklySalesData, monthlySalesData, topProductsData, topCustomersData, salesByHourData, salesByDayData, salesByMonthData } from '../data/mockData';\n\n// Configuración del servicio\nconst API_BASE_URL = '/api'; // URL base para la API real (cuando se implemente)\nconst USE_MOCK_DATA = true; // Cambiar a false cuando se conecte a la API real\n\n/**\r\n * Obtiene las ventas del día actual\r\n * @returns {Promise<Object>} Datos de ventas diarias\r\n */\nexport async function getDailySales() {\n  if (USE_MOCK_DATA) {\n    // Simular un retraso de red para imitar una API real\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return dailySalesData;\n  } else {\n    // Código para obtener datos de la API real\n    const response = await fetch(`${API_BASE_URL}/sales/daily`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas diarias');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene las ventas de la semana actual\r\n * @returns {Promise<Object>} Datos de ventas semanales\r\n */\nexport async function getWeeklySales() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return weeklySalesData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/weekly`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas semanales');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene las ventas del mes actual\r\n * @returns {Promise<Object>} Datos de ventas mensuales\r\n */\nexport async function getMonthlySales() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return monthlySalesData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/monthly`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas mensuales');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene los productos más vendidos\r\n * @param {number} limit - Número máximo de productos a obtener\r\n * @returns {Promise<Array>} Lista de productos más vendidos\r\n */\nexport async function getTopProducts(limit = 5) {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return topProductsData.slice(0, limit);\n  } else {\n    const response = await fetch(`${API_BASE_URL}/products/top?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de productos más vendidos');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene los clientes principales\r\n * @param {number} limit - Número máximo de clientes a obtener\r\n * @returns {Promise<Array>} Lista de clientes principales\r\n */\nexport async function getTopCustomers(limit = 5) {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return topCustomersData.slice(0, limit);\n  } else {\n    const response = await fetch(`${API_BASE_URL}/customers/top?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de clientes principales');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene las ventas por hora para el día actual\r\n * @returns {Promise<Array>} Datos de ventas por hora\r\n */\nexport async function getSalesByHour() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByHourData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-hour`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por hora');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene las ventas por día para la semana actual\r\n * @returns {Promise<Array>} Datos de ventas por día\r\n */\nexport async function getSalesByDay() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByDayData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-day`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por día');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene las ventas por mes para el año actual\r\n * @returns {Promise<Array>} Datos de ventas por mes\r\n */\nexport async function getSalesByMonth() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByMonthData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-month`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por mes');\n    }\n    return await response.json();\n  }\n}","map":{"version":3,"names":["dailySalesData","weeklySalesData","monthlySalesData","topProductsData","topCustomersData","salesByHourData","salesByDayData","salesByMonthData","API_BASE_URL","USE_MOCK_DATA","getDailySales","Promise","resolve","setTimeout","response","fetch","ok","Error","json","getWeeklySales","getMonthlySales","getTopProducts","limit","slice","getTopCustomers","getSalesByHour","getSalesByDay","getSalesByMonth"],"sources":["C:/Users/Pc/Desktop/Proyectos/criwave/client/src/services/dashboardService.js"],"sourcesContent":["/**\r\n * Servicio para obtener datos del dashboard\r\n * \r\n * Este servicio actúa como una capa de abstracción entre los componentes\r\n * y la fuente de datos. Actualmente utiliza datos de ejemplo, pero está\r\n * diseñado para facilitar la transición a una API real en el futuro.\r\n */\r\n\r\n// Importar datos de ejemplo\r\nimport {\r\n  dailySalesData,\r\n  weeklySalesData,\r\n  monthlySalesData,\r\n  topProductsData,\r\n  topCustomersData,\r\n  salesByHourData,\r\n  salesByDayData,\r\n  salesByMonthData\r\n} from '../data/mockData';\r\n\r\n// Configuración del servicio\r\nconst API_BASE_URL = '/api'; // URL base para la API real (cuando se implemente)\r\nconst USE_MOCK_DATA = true; // Cambiar a false cuando se conecte a la API real\r\n\r\n/**\r\n * Obtiene las ventas del día actual\r\n * @returns {Promise<Object>} Datos de ventas diarias\r\n */\r\nexport async function getDailySales() {\r\n  if (USE_MOCK_DATA) {\r\n    // Simular un retraso de red para imitar una API real\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return dailySalesData;\r\n  } else {\r\n    // Código para obtener datos de la API real\r\n    const response = await fetch(`${API_BASE_URL}/sales/daily`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas diarias');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene las ventas de la semana actual\r\n * @returns {Promise<Object>} Datos de ventas semanales\r\n */\r\nexport async function getWeeklySales() {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return weeklySalesData;\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/sales/weekly`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas semanales');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene las ventas del mes actual\r\n * @returns {Promise<Object>} Datos de ventas mensuales\r\n */\r\nexport async function getMonthlySales() {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return monthlySalesData;\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/sales/monthly`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas mensuales');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los productos más vendidos\r\n * @param {number} limit - Número máximo de productos a obtener\r\n * @returns {Promise<Array>} Lista de productos más vendidos\r\n */\r\nexport async function getTopProducts(limit = 5) {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return topProductsData.slice(0, limit);\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/products/top?limit=${limit}`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de productos más vendidos');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los clientes principales\r\n * @param {number} limit - Número máximo de clientes a obtener\r\n * @returns {Promise<Array>} Lista de clientes principales\r\n */\r\nexport async function getTopCustomers(limit = 5) {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return topCustomersData.slice(0, limit);\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/customers/top?limit=${limit}`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de clientes principales');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene las ventas por hora para el día actual\r\n * @returns {Promise<Array>} Datos de ventas por hora\r\n */\r\nexport async function getSalesByHour() {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return salesByHourData;\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/sales/by-hour`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas por hora');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene las ventas por día para la semana actual\r\n * @returns {Promise<Array>} Datos de ventas por día\r\n */\r\nexport async function getSalesByDay() {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return salesByDayData;\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/sales/by-day`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas por día');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene las ventas por mes para el año actual\r\n * @returns {Promise<Array>} Datos de ventas por mes\r\n */\r\nexport async function getSalesByMonth() {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return salesByMonthData;\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/sales/by-month`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas por mes');\r\n    }\r\n    return await response.json();\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}