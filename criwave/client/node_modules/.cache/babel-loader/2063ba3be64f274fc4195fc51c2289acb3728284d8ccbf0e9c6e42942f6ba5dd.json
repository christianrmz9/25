{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock, renderSlot as _renderSlot, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-header\"\n};\nconst _hoisted_2 = {\n  class: \"chart-title\"\n};\nconst _hoisted_3 = {\n  class: \"chart-actions\"\n};\nconst _hoisted_4 = [\"disabled\"];\nconst _hoisted_5 = {\n  class: \"chart-content\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_chart_skeleton = _resolveComponent(\"chart-skeleton\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"chart-card\", {\n      'is-loading': $setup.isLoading\n    }]),\n    ref: \"chartRef\"\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"h3\", _hoisted_2, _toDisplayString($props.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [$props.allowRefresh ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"refresh-btn\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.refresh && $setup.refresh(...args)),\n    disabled: $setup.isLoading,\n    title: \"Actualizar datos\"\n  }, _cache[1] || (_cache[1] = [_createElementVNode(\"i\", {\n    class: \"material-icons\"\n  }, \"refresh\", -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_4)) : _createCommentVNode(\"v-if\", true)])]), _createCommentVNode(\" Mostrar skeleton mientras carga \"), $setup.isLoading ? (_openBlock(), _createBlock(_component_chart_skeleton, {\n    key: 0,\n    size: $props.skeletonSize\n  }, null, 8 /* PROPS */, [\"size\"])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Mostrar contenido del gráfico cuando está cargado \"), _createElementVNode(\"div\", _hoisted_5, [_createCommentVNode(\" Aquí iría el componente de gráfico específico \"), _renderSlot(_ctx.$slots, \"default\", {\n    data: $setup.chartData\n  }, undefined, true), _createCommentVNode(\" Mensaje cuando no hay datos \"), !$setup.chartData || !$setup.chartData.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, \" No hay datos disponibles \")) : _createCommentVNode(\"v-if\", true)])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))], 2 /* CLASS */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_normalizeClass","$setup","isLoading","ref","_createElementVNode","_hoisted_1","_hoisted_2","_toDisplayString","$props","title","_hoisted_3","allowRefresh","onClick","_cache","args","refresh","disabled","_hoisted_4","_createCommentVNode","_createBlock","_component_chart_skeleton","size","skeletonSize","_Fragment","_hoisted_5","_renderSlot","_ctx","$slots","data","chartData","undefined","length","_hoisted_6"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\ChartCard.vue"],"sourcesContent":["<template>\r\n  <div \r\n    class=\"chart-card\" \r\n    :class=\"{ 'is-loading': isLoading }\"\r\n    ref=\"chartRef\"\r\n  >\r\n    <div class=\"chart-header\">\r\n      <h3 class=\"chart-title\">{{ title }}</h3>\r\n      <div class=\"chart-actions\">\r\n        <button \r\n          v-if=\"allowRefresh\" \r\n          class=\"refresh-btn\" \r\n          @click=\"refresh\"\r\n          :disabled=\"isLoading\"\r\n          title=\"Actualizar datos\"\r\n        >\r\n          <i class=\"material-icons\">refresh</i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Mostrar skeleton mientras carga -->\r\n    <chart-skeleton \r\n      v-if=\"isLoading\" \r\n      :size=\"skeletonSize\"\r\n    />\r\n    \r\n    <!-- Mostrar contenido del gráfico cuando está cargado -->\r\n    <div v-else class=\"chart-content\">\r\n      <!-- Aquí iría el componente de gráfico específico -->\r\n      <slot :data=\"chartData\"></slot>\r\n      \r\n      <!-- Mensaje cuando no hay datos -->\r\n      <div v-if=\"!chartData || !chartData.length\" class=\"no-data-message\">\r\n        No hay datos disponibles\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { useChartData } from '../../composables/useChartData';\r\nimport ChartSkeleton from '../ui/ChartSkeleton.vue';\r\n\r\nexport default {\r\n  name: 'ChartCard',\r\n  \r\n  components: {\r\n    ChartSkeleton\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Título del gráfico\r\n     */\r\n    title: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    \r\n    /**\r\n     * Tipo de datos que mostrará el gráfico\r\n     * (ej: 'ventasDiarias', 'ventasSemanales', etc.)\r\n     */\r\n    dataType: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    \r\n    /**\r\n     * Si se debe cargar solo cuando sea visible\r\n     */\r\n    loadOnVisible: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    \r\n    /**\r\n     * Si se debe permitir la actualización manual\r\n     */\r\n    allowRefresh: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    \r\n    /**\r\n     * Si se debe actualizar automáticamente\r\n     */\r\n    autoRefresh: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    \r\n    /**\r\n     * Intervalo de actualización automática en ms\r\n     */\r\n    refreshInterval: {\r\n      type: Number,\r\n      default: 60000 // 1 minuto\r\n    },\r\n    \r\n    /**\r\n     * Tamaño del skeleton\r\n     */\r\n    skeletonSize: {\r\n      type: String,\r\n      default: 'medium'\r\n    }\r\n  },\r\n  \r\n  setup(props) {\r\n    // Usar el composable para gestionar los datos del gráfico\r\n    const { \r\n      chartData, \r\n      isLoading, \r\n      error,\r\n      setupObserver,\r\n      refresh \r\n    } = useChartData(props.dataType, {\r\n      loadOnVisible: props.loadOnVisible,\r\n      autoRefresh: props.autoRefresh,\r\n      refreshInterval: props.refreshInterval\r\n    });\r\n    \r\n    return {\r\n      chartData,\r\n      isLoading,\r\n      error,\r\n      setupObserver,\r\n      refresh\r\n    };\r\n  },\r\n  \r\n  mounted() {\r\n    // Configurar el observador para cargar cuando sea visible\r\n    if (this.loadOnVisible) {\r\n      this.setupObserver(this.$refs.chartRef);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chart-card {\r\n  background-color: var(--bg-primary, #ffffff);\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\r\n  padding: 16px;\r\n  overflow: hidden;\r\n  height: 100%;\r\n  transition: box-shadow 0.3s ease;\r\n}\r\n\r\n.chart-card:hover {\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.chart-title {\r\n  margin: 0;\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  color: var(--text-primary);\r\n}\r\n\r\n.chart-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.refresh-btn {\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-secondary);\r\n  cursor: pointer;\r\n  border-radius: 50%;\r\n  width: 32px;\r\n  height: 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.refresh-btn:hover {\r\n  background-color: var(--bg-hover);\r\n  color: var(--primary);\r\n}\r\n\r\n.refresh-btn:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.chart-content {\r\n  height: calc(100% - 50px);\r\n  min-height: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.no-data-message {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  color: var(--text-secondary);\r\n  font-style: italic;\r\n  text-align: center;\r\n}\r\n\r\n.is-loading {\r\n  pointer-events: none;\r\n}\r\n</style> "],"mappings":";;EAMSA,KAAK,EAAC;AAAc;;EACnBA,KAAK,EAAC;AAAa;;EAClBA,KAAK,EAAC;AAAe;mBARhC;;EA4BgBA,KAAK,EAAC;AAAe;;EA5BrCC,GAAA;EAiCkDD,KAAK,EAAC;;;;uBAhCtDE,mBAAA,CAoCM;IAnCJF,KAAK,EAFTG,eAAA,EAEU,YAAY;MAAA,cACMC,MAAA,CAAAC;IAAS;IACjCC,GAAG,EAAC;MAEJC,mBAAA,CAaM,OAbNC,UAaM,GAZJD,mBAAA,CAAwC,MAAxCE,UAAwC,EAAAC,gBAAA,CAAbC,MAAA,CAAAC,KAAK,kBAChCL,mBAAA,CAUM,OAVNM,UAUM,GARIF,MAAA,CAAAG,YAAY,I,cADpBZ,mBAAA,CAQS;IAjBjBD,GAAA;IAWUD,KAAK,EAAC,aAAa;IAClBe,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEb,MAAA,CAAAc,OAAA,IAAAd,MAAA,CAAAc,OAAA,IAAAD,IAAA,CAAO;IACdE,QAAQ,EAAEf,MAAA,CAAAC,SAAS;IACpBO,KAAK,EAAC;gCAENL,mBAAA,CAAqC;IAAlCP,KAAK,EAAC;EAAgB,GAAC,SAAO,oB,kBAhB3CoB,UAAA,KAAAC,mBAAA,e,KAqBIA,mBAAA,qCAAwC,EAEhCjB,MAAA,CAAAC,SAAS,I,cADjBiB,YAAA,CAGEC,yBAAA;IAzBNtB,GAAA;IAwBOuB,IAAI,EAAEb,MAAA,CAAAc;sDAITvB,mBAAA,CAQMwB,SAAA;IApCVzB,GAAA;EAAA,IA2BIoB,mBAAA,uDAA0D,EAC1Dd,mBAAA,CAQM,OARNoB,UAQM,GAPJN,mBAAA,mDAAsD,EACtDO,WAAA,CAA+BC,IAAA,CAAAC,MAAA;IAAxBC,IAAI,EAAE3B,MAAA,CAAA4B;EAAS,GAAAC,SAAA,SAEtBZ,mBAAA,iCAAoC,E,CACxBjB,MAAA,CAAA4B,SAAS,KAAK5B,MAAA,CAAA4B,SAAS,CAACE,MAAM,I,cAA1ChC,mBAAA,CAEM,OAFNiC,UAEM,EAF8D,4BAEpE,KAnCNd,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}