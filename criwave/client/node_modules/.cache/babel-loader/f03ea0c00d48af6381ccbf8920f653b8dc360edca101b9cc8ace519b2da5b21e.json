{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"sales-chart-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"chart-data\"\n};\nconst _hoisted_3 = {\n  class: \"chart-summary\"\n};\nconst _hoisted_4 = {\n  class: \"chart-total\"\n};\nconst _hoisted_5 = {\n  class: \"chart-average\"\n};\nconst _hoisted_6 = {\n  class: \"chart-bars\"\n};\nconst _hoisted_7 = {\n  class: \"chart-bar-label\"\n};\nconst _hoisted_8 = {\n  class: \"chart-bar-value\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_chart_card = _resolveComponent(\"chart-card\");\n  return _openBlock(), _createBlock(_component_chart_card, {\n    title: $props.title,\n    \"data-type\": $props.dataType,\n    \"load-on-visible\": $props.loadOnVisible,\n    \"auto-refresh\": $props.autoRefresh,\n    \"refresh-interval\": $props.refreshInterval\n  }, {\n    default: _withCtx(({\n      data\n    }) => [_createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Para simplicidad, solo mostramos los datos en texto \"), _createCommentVNode(\" En un caso real, aquí usarías un componente de gráfico como Chart.js, Echarts, etc. \"), data && data.labels && data.values ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createTextVNode(_toDisplayString($options.formatCurrency($options.getTotalSales(data.values))) + \" \", 1 /* TEXT */), _cache[0] || (_cache[0] = _createElementVNode(\"span\", {\n      class: \"chart-label\"\n    }, \"Total\", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_5, [_createTextVNode(_toDisplayString($options.formatCurrency($options.getAverageSales(data.values))) + \" \", 1 /* TEXT */), _cache[1] || (_cache[1] = _createElementVNode(\"span\", {\n      class: \"chart-label\"\n    }, \"Promedio\", -1 /* HOISTED */))])]), _createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(data.values, (value, index) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: index,\n        class: \"chart-bar-item\"\n      }, [_createElementVNode(\"div\", {\n        class: \"chart-bar\",\n        style: _normalizeStyle({\n          height: $options.calculateBarHeight(value, data.values)\n        })\n      }, null, 4 /* STYLE */), _createElementVNode(\"div\", _hoisted_7, _toDisplayString(data.labels[index]), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_8, _toDisplayString($options.formatCurrency(value)), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"title\", \"data-type\", \"load-on-visible\", \"auto-refresh\", \"refresh-interval\"]);\n}","map":{"version":3,"names":["class","key","_createBlock","_component_chart_card","title","$props","dataType","loadOnVisible","autoRefresh","refreshInterval","default","_withCtx","data","_createElementVNode","_hoisted_1","_createCommentVNode","labels","values","_createElementBlock","_hoisted_2","_hoisted_3","_hoisted_4","_createTextVNode","_toDisplayString","$options","formatCurrency","getTotalSales","_hoisted_5","getAverageSales","_hoisted_6","_Fragment","_renderList","value","index","style","_normalizeStyle","height","calculateBarHeight","_hoisted_7","_hoisted_8","_"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\SalesChart.vue"],"sourcesContent":["<template>\r\n  <chart-card\r\n    :title=\"title\"\r\n    :data-type=\"dataType\"\r\n    :load-on-visible=\"loadOnVisible\"\r\n    :auto-refresh=\"autoRefresh\"\r\n    :refresh-interval=\"refreshInterval\"\r\n  >\r\n    <template v-slot:default=\"{ data }\">\r\n      <div class=\"sales-chart-container\">\r\n        <!-- Para simplicidad, solo mostramos los datos en texto -->\r\n        <!-- En un caso real, aquí usarías un componente de gráfico como Chart.js, Echarts, etc. -->\r\n        <div v-if=\"data && data.labels && data.values\" class=\"chart-data\">\r\n          <div class=\"chart-summary\">\r\n            <div class=\"chart-total\">\r\n              {{ formatCurrency(getTotalSales(data.values)) }}\r\n              <span class=\"chart-label\">Total</span>\r\n            </div>\r\n            <div class=\"chart-average\">\r\n              {{ formatCurrency(getAverageSales(data.values)) }}\r\n              <span class=\"chart-label\">Promedio</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"chart-bars\">\r\n            <div \r\n              v-for=\"(value, index) in data.values\" \r\n              :key=\"index\"\r\n              class=\"chart-bar-item\"\r\n            >\r\n              <div \r\n                class=\"chart-bar\" \r\n                :style=\"{ height: calculateBarHeight(value, data.values) }\"\r\n              ></div>\r\n              <div class=\"chart-bar-label\">{{ data.labels[index] }}</div>\r\n              <div class=\"chart-bar-value\">{{ formatCurrency(value) }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </chart-card>\r\n</template>\r\n\r\n<script>\r\nimport ChartCard from './ChartCard.vue';\r\n\r\nexport default {\r\n  name: 'SalesChart',\r\n  \r\n  components: {\r\n    ChartCard\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Título del gráfico\r\n     */\r\n    title: {\r\n      type: String,\r\n      default: 'Ventas'\r\n    },\r\n    \r\n    /**\r\n     * Tipo de datos (ventasDiarias, ventasSemanales, ventasMensuales)\r\n     */\r\n    dataType: {\r\n      type: String,\r\n      default: 'ventasDiarias',\r\n      validator: value => ['ventasDiarias', 'ventasSemanales', 'ventasMensuales'].includes(value)\r\n    },\r\n    \r\n    /**\r\n     * Si se debe cargar solo cuando sea visible\r\n     */\r\n    loadOnVisible: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    \r\n    /**\r\n     * Si se debe actualizar automáticamente\r\n     */\r\n    autoRefresh: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    \r\n    /**\r\n     * Intervalo de actualización en ms\r\n     */\r\n    refreshInterval: {\r\n      type: Number,\r\n      default: 60000 // 1 minuto\r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Formatear valor como moneda\r\n     */\r\n    formatCurrency(value) {\r\n      return new Intl.NumberFormat('es-MX', {\r\n        style: 'currency',\r\n        currency: 'MXN',\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0\r\n      }).format(value);\r\n    },\r\n    \r\n    /**\r\n     * Calcular altura de la barra en porcentaje\r\n     */\r\n    calculateBarHeight(value, allValues) {\r\n      if (!allValues || !allValues.length) return '0%';\r\n      \r\n      const maxValue = Math.max(...allValues);\r\n      if (maxValue === 0) return '0%';\r\n      \r\n      const percentage = (value / maxValue) * 100;\r\n      return `${percentage}%`;\r\n    },\r\n    \r\n    /**\r\n     * Obtener suma total de ventas\r\n     */\r\n    getTotalSales(values) {\r\n      if (!values || !values.length) return 0;\r\n      return values.reduce((sum, value) => sum + value, 0);\r\n    },\r\n    \r\n    /**\r\n     * Obtener promedio de ventas\r\n     */\r\n    getAverageSales(values) {\r\n      if (!values || !values.length) return 0;\r\n      return this.getTotalSales(values) / values.length;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.sales-chart-container {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n}\r\n\r\n.chart-data {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chart-summary {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 0 20px;\r\n  border-bottom: 1px solid var(--border, #eee);\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.chart-total, .chart-average {\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 1.4rem;\r\n  font-weight: 700;\r\n  color: var(--text-primary);\r\n}\r\n\r\n.chart-label {\r\n  font-size: 0.8rem;\r\n  font-weight: 400;\r\n  color: var(--text-secondary);\r\n  margin-top: 2px;\r\n}\r\n\r\n.chart-bars {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n  height: 200px;\r\n  margin-top: auto;\r\n  position: relative;\r\n}\r\n\r\n.chart-bar-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n  position: relative;\r\n  z-index: 2;\r\n}\r\n\r\n.chart-bar {\r\n  width: 36px;\r\n  min-height: 4px;\r\n  background-color: var(--primary, #4f46e5);\r\n  border-radius: 4px 4px 0 0;\r\n  transition: height 0.3s ease;\r\n}\r\n\r\n.chart-bar-label {\r\n  margin-top: 8px;\r\n  font-size: 0.75rem;\r\n  color: var(--text-secondary);\r\n  white-space: nowrap;\r\n}\r\n\r\n.chart-bar-value {\r\n  margin-top: 4px;\r\n  font-size: 0.7rem;\r\n  font-weight: 600;\r\n  color: var(--text-primary);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chart-bar {\r\n    width: 24px;\r\n  }\r\n  \r\n  .chart-bar-value {\r\n    font-size: 0.65rem;\r\n  }\r\n  \r\n  .chart-summary {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n  \r\n  .chart-total, .chart-average {\r\n    margin-bottom: 8px;\r\n  }\r\n}\r\n</style> "],"mappings":";;EASWA,KAAK,EAAC;AAAuB;;EATxCC,GAAA;EAYuDD,KAAK,EAAC;;;EAC9CA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAa;;EAInBA,KAAK,EAAC;AAAe;;EAMvBA,KAAK,EAAC;AAAY;;EAUdA,KAAK,EAAC;AAAiB;;EACvBA,KAAK,EAAC;AAAiB;;;uBAlCxCE,YAAA,CAwCaC,qBAAA;IAvCVC,KAAK,EAAEC,MAAA,CAAAD,KAAK;IACZ,WAAS,EAAEC,MAAA,CAAAC,QAAQ;IACnB,iBAAe,EAAED,MAAA,CAAAE,aAAa;IAC9B,cAAY,EAAEF,MAAA,CAAAG,WAAW;IACzB,kBAAgB,EAAEH,MAAA,CAAAI;;IAEFC,OAAO,EAAAC,QAAA,CACtB,CA8BM;MA/BoBC;IAAI,OAC9BC,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BJC,mBAAA,yDAA4D,EAC5DA,mBAAA,yFAA4F,EACjFH,IAAI,IAAIA,IAAI,CAACI,MAAM,IAAIJ,IAAI,CAACK,MAAM,I,cAA7CC,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBJN,mBAAA,CASM,OATNO,UASM,GARJP,mBAAA,CAGM,OAHNQ,UAGM,GAjBlBC,gBAAA,CAAAC,gBAAA,CAeiBC,QAAA,CAAAC,cAAc,CAACD,QAAA,CAAAE,aAAa,CAACd,IAAI,CAACK,MAAM,MAAK,GAChD,iB,0BAAAJ,mBAAA,CAAsC;MAAhCb,KAAK,EAAC;IAAa,GAAC,OAAK,qB,GAEjCa,mBAAA,CAGM,OAHNc,UAGM,GArBlBL,gBAAA,CAAAC,gBAAA,CAmBiBC,QAAA,CAAAC,cAAc,CAACD,QAAA,CAAAI,eAAe,CAAChB,IAAI,CAACK,MAAM,MAAK,GAClD,iB,0BAAAJ,mBAAA,CAAyC;MAAnCb,KAAK,EAAC;IAAa,GAAC,UAAQ,qB,KAItCa,mBAAA,CAaM,OAbNgB,UAaM,I,kBAZJX,mBAAA,CAWMY,SAAA,QApClBC,WAAA,CA0BuCnB,IAAI,CAACK,MAAM,EA1BlD,CA0BsBe,KAAK,EAAEC,KAAK;2BADtBf,mBAAA,CAWM;QATHjB,GAAG,EAAEgC,KAAK;QACXjC,KAAK,EAAC;UAENa,mBAAA,CAGO;QAFLb,KAAK,EAAC,WAAW;QAChBkC,KAAK,EAhCtBC,eAAA;UAAAC,MAAA,EAgCkCZ,QAAA,CAAAa,kBAAkB,CAACL,KAAK,EAAEpB,IAAI,CAACK,MAAM;QAAA;+BAEzDJ,mBAAA,CAA2D,OAA3DyB,UAA2D,EAAAf,gBAAA,CAA3BX,IAAI,CAACI,MAAM,CAACiB,KAAK,mBACjDpB,mBAAA,CAA8D,OAA9D0B,UAA8D,EAAAhB,gBAAA,CAA9BC,QAAA,CAAAC,cAAc,CAACO,KAAK,kB;0CAnClEjB,mBAAA,e;IAAAyB,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}