{"ast":null,"code":"/**\r\n * Servicio para obtener datos de ingresos\r\n * \r\n * Este servicio simula la obtención de datos de ingresos mensuales desde un API \r\n * pero por ahora retorna datos simulados.\r\n */\n\n/**\r\n * Obtiene los datos de ingresos de los últimos 12 meses\r\n * @returns {Promise<Array>} Datos de ingresos mensuales\r\n */\nexport async function getMonthlyRevenue() {\n  // Simulamos una llamada API con un pequeño retraso\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve([{\n        month: 'Ene',\n        revenue: 1500000,\n        year: 2024\n      }, {\n        month: 'Feb',\n        revenue: 1800000,\n        year: 2024\n      }, {\n        month: 'Mar',\n        revenue: 2200000,\n        year: 2024\n      }, {\n        month: 'Abr',\n        revenue: 2500000,\n        year: 2024\n      }, {\n        month: 'May',\n        revenue: 3100000,\n        year: 2024\n      }, {\n        month: 'Jun',\n        revenue: 4200000,\n        year: 2024\n      }, {\n        month: 'Jul',\n        revenue: 8500000,\n        year: 2024\n      }, {\n        month: 'Ago',\n        revenue: 12800000,\n        year: 2024\n      }, {\n        month: 'Sep',\n        revenue: 14500000,\n        year: 2023\n      }, {\n        month: 'Oct',\n        revenue: 15800000,\n        year: 2023\n      }, {\n        month: 'Nov',\n        revenue: 17200000,\n        year: 2023\n      }, {\n        month: 'Dic',\n        revenue: 18500000,\n        year: 2023\n      }]);\n    }, 300);\n  });\n}\n\n/**\r\n * Obtiene los datos de ingresos totales y el cambio respecto al período anterior\r\n * @returns {Promise<Object>} Objeto con el total de ingresos y datos de cambio\r\n */\nexport async function getTotalRevenue() {\n  // Simulamos una llamada API con un pequeño retraso\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        total: 1856231212,\n        // Total de ingresos\n        changeAmount: 22325,\n        // Cambio en valor absoluto\n        changePercent: 12.2,\n        // Cambio porcentual\n        period: 'últimos 12 meses' // Período de los datos\n      });\n    }, 200);\n  });\n}","map":{"version":3,"names":["getMonthlyRevenue","Promise","resolve","setTimeout","month","revenue","year","getTotalRevenue","total","changeAmount","changePercent","period"],"sources":["C:/Users/Pc/Desktop/Proyectos/criwave/client/src/services/revenueService.js"],"sourcesContent":["/**\r\n * Servicio para obtener datos de ingresos\r\n * \r\n * Este servicio simula la obtención de datos de ingresos mensuales desde un API \r\n * pero por ahora retorna datos simulados.\r\n */\r\n\r\n/**\r\n * Obtiene los datos de ingresos de los últimos 12 meses\r\n * @returns {Promise<Array>} Datos de ingresos mensuales\r\n */\r\nexport async function getMonthlyRevenue() {\r\n  // Simulamos una llamada API con un pequeño retraso\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve([\r\n        { month: 'Ene', revenue: 1500000, year: 2024 },\r\n        { month: 'Feb', revenue: 1800000, year: 2024 },\r\n        { month: 'Mar', revenue: 2200000, year: 2024 },\r\n        { month: 'Abr', revenue: 2500000, year: 2024 },\r\n        { month: 'May', revenue: 3100000, year: 2024 },\r\n        { month: 'Jun', revenue: 4200000, year: 2024 },\r\n        { month: 'Jul', revenue: 8500000, year: 2024 },\r\n        { month: 'Ago', revenue: 12800000, year: 2024 },\r\n        { month: 'Sep', revenue: 14500000, year: 2023 },\r\n        { month: 'Oct', revenue: 15800000, year: 2023 },\r\n        { month: 'Nov', revenue: 17200000, year: 2023 },\r\n        { month: 'Dic', revenue: 18500000, year: 2023 },\r\n      ]);\r\n    }, 300);\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene los datos de ingresos totales y el cambio respecto al período anterior\r\n * @returns {Promise<Object>} Objeto con el total de ingresos y datos de cambio\r\n */\r\nexport async function getTotalRevenue() {\r\n  // Simulamos una llamada API con un pequeño retraso\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        total: 1856231212, // Total de ingresos\r\n        changeAmount: 22325, // Cambio en valor absoluto\r\n        changePercent: 12.2, // Cambio porcentual\r\n        period: 'últimos 12 meses' // Período de los datos\r\n      });\r\n    }, 200);\r\n  });\r\n} "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeA,iBAAiBA,CAAA,EAAG;EACxC;EACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC,CACN;QAAEE,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC9C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC9C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC9C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC9C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC9C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC9C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC9C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,QAAQ;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC/C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,QAAQ;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC/C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,QAAQ;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC/C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,QAAQ;QAAEC,IAAI,EAAE;MAAK,CAAC,EAC/C;QAAEF,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,QAAQ;QAAEC,IAAI,EAAE;MAAK,CAAC,CAChD,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeC,eAAeA,CAAA,EAAG;EACtC;EACA,OAAO,IAAIN,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC;QACNM,KAAK,EAAE,UAAU;QAAE;QACnBC,YAAY,EAAE,KAAK;QAAE;QACrBC,aAAa,EAAE,IAAI;QAAE;QACrBC,MAAM,EAAE,kBAAkB,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}