{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport MaterialIcon from '../ui/Icon.vue';\nexport default {\n  name: 'RevenueChart',\n  components: {\n    icon: MaterialIcon\n  },\n  props: {\n    /**\r\n     * Datos de ingresos de los últimos 12 meses\r\n     * Debe ser un array de objetos con las propiedades \"month\" y \"revenue\"\r\n     */\n    revenueData: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    /**\r\n     * Cambio porcentual en los ingresos con respecto al período anterior\r\n     */\n    changePercent: {\n      type: Number,\n      default: 0\n    },\n    /**\r\n     * Valor absoluto del cambio en los ingresos\r\n     */\n    changeAmount: {\n      type: Number,\n      default: 0\n    },\n    /**\r\n     * Color principal del gráfico\r\n     */\n    color: {\n      type: String,\n      default: null\n    }\n  },\n  data() {\n    return {\n      chartWidth: 0,\n      chartHeight: 0,\n      currentMonthIndex: -1,\n      // Inicialmente ningún mes está seleccionado\n      mouseOver: false,\n      mouseX: 0,\n      mouseY: 0,\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\n      yAxisLabels: ['$1M', '$10M', '$50M', '$100M', '$1B'],\n      // Datos simulados para el gráfico si no se proporcionan\n      defaultData: [{\n        month: 'Ene',\n        revenue: 1000000\n      }, {\n        month: 'Feb',\n        revenue: 1200000\n      }, {\n        month: 'Mar',\n        revenue: 2500000\n      }, {\n        month: 'Abr',\n        revenue: 3800000\n      }, {\n        month: 'May',\n        revenue: 5200000\n      }, {\n        month: 'Jun',\n        revenue: 4800000\n      }, {\n        month: 'Jul',\n        revenue: 8500000\n      }, {\n        month: 'Ago',\n        revenue: 12000000\n      }, {\n        month: 'Sep',\n        revenue: 9500000\n      }, {\n        month: 'Oct',\n        revenue: 11000000\n      }, {\n        month: 'Nov',\n        revenue: 12500000\n      }, {\n        month: 'Dic',\n        revenue: 15000000\n      }]\n    };\n  },\n  computed: {\n    /**\r\n     * Determina el color a usar para el gráfico según el valor de cambio\r\n     */\n    chartLineColor() {\n      if (this.color) return this.color;\n\n      // Si es positivo, usar verde como en SalesCard\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      }\n      // Si es negativo, usar rojo como en SalesCard\n      else if (this.totalChange < 0) {\n        return '#e74c3c';\n      }\n      // Si es neutral, usar color turquesa por defecto\n      else {\n        return '#2dc6af';\n      }\n    },\n    /**\r\n     * Color para la parte superior del gradiente\r\n     */\n    chartGradientTop() {\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      } else if (this.totalChange < 0) {\n        return '#e74c3c';\n      } else {\n        return '#2dc6af';\n      }\n    },\n    /**\r\n     * Color para la parte inferior del gradiente\r\n     */\n    chartGradientBottom() {\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      } else if (this.totalChange < 0) {\n        return '#e74c3c';\n      } else {\n        return '#2dc6af';\n      }\n    },\n    /**\r\n     * Obtiene los datos de ingresos, usando los predeterminados si no se proporcionan\r\n     */\n    chartData() {\n      return this.revenueData.length > 0 ? this.revenueData : this.defaultData;\n    },\n    /**\r\n     * Calcula el total de ingresos sumando todos los valores\r\n     */\n    totalRevenue() {\n      return this.chartData.reduce((sum, item) => sum + item.revenue, 0);\n    },\n    /**\r\n     * Formatea el total de ingresos para mostrar\r\n     */\n    formattedTotalRevenue() {\n      return this.formatLargeNumber(this.totalRevenue);\n    },\n    /**\r\n     * Obtiene el valor de cambio total\r\n     */\n    totalChange() {\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\n    },\n    /**\r\n     * Formatea el cambio total para mostrar\r\n     */\n    formattedTotalChange() {\n      return this.formatLargeNumber(this.totalChange);\n    },\n    /**\r\n     * Formatea el porcentaje de cambio\r\n     */\n    formattedChangePercent() {\n      return (this.changePercent || 12.2).toFixed(1);\n    },\n    /**\r\n     * Calcula la ruta SVG para la línea del gráfico\r\n     */\n    linePath() {\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      return this.chartData.map((point, index) => {\n        const x = index / (this.chartData.length - 1) * this.chartWidth;\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\n      }).join(' ');\n    },\n    /**\r\n     * Calcula la ruta SVG para el área bajo la línea\r\n     */\n    areaPath() {\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const linePath = this.chartData.map((point, index) => {\n        const x = index / (this.chartData.length - 1) * this.chartWidth;\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\n      }).join(' ');\n      return `${linePath} L${this.chartWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\n    },\n    /**\r\n     * Calcula todos los puntos de datos para determinar el punto exacto a mostrar en cada posición\r\n     */\n    dataPoints() {\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return [];\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      return this.chartData.map((point, index) => {\n        const x = index / (this.chartData.length - 1) * this.chartWidth;\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return {\n          x,\n          y,\n          month: point.month,\n          value: point.revenue,\n          index\n        };\n      });\n    },\n    /**\r\n     * Obtiene la información del punto actual seleccionado\r\n     */\n    currentPoint() {\n      if (!this.dataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.dataPoints.length) return null;\n      return this.dataPoints[this.currentMonthIndex];\n    },\n    /**\r\n     * Obtiene la etiqueta del punto actual\r\n     */\n    currentPointLabel() {\n      if (!this.currentPoint) return '';\n      const year = this.chartData[this.currentMonthIndex].year || '2024';\n      return `${this.currentPoint.month}, ${year}`;\n    },\n    /**\r\n     * Calcula el valor acumulado hasta el punto actual\r\n     */\n    currentPointAccumulated() {\n      if (!this.chartData.length || this.currentMonthIndex < 0) return 0;\n      let sum = 0;\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\n        sum += this.chartData[i].revenue;\n      }\n      return sum;\n    },\n    /**\r\n     * Estilo para la posición del tooltip basado en la posición del mouse\r\n     */\n    tooltipStyle() {\n      // Calcular si el tooltip debe aparecer a la izquierda o derecha del cursor\n      // para evitar que se salga de los bordes\n      const tooltipWidth = 150;\n      const tooltipHeight = 80;\n      const offset = 15; // Distancia del cursor al tooltip\n\n      let left = this.mouseX + offset;\n      let top = this.mouseY - tooltipHeight / 2;\n\n      // Evitar que se salga por el lado derecho\n      if (left + tooltipWidth > this.chartWidth) {\n        left = this.mouseX - tooltipWidth - offset;\n      }\n\n      // Evitar que se salga por arriba\n      if (top < 0) {\n        top = 10;\n      }\n\n      // Evitar que se salga por abajo\n      if (top + tooltipHeight > this.chartHeight) {\n        top = this.chartHeight - tooltipHeight - 10;\n      }\n      return {\n        left: `${left}px`,\n        top: `${top}px`\n      };\n    }\n  },\n  mounted() {\n    this.updateChartDimensions();\n    window.addEventListener('resize', this.updateChartDimensions);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.updateChartDimensions);\n  },\n  methods: {\n    /**\r\n     * Actualiza las dimensiones del gráfico en función del contenedor\r\n     */\n    updateChartDimensions() {\n      if (this.$refs.chartContainer) {\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\n      }\n    },\n    /**\r\n     * Gestiona el movimiento del mouse sobre el gráfico\r\n     * Usa un algoritmo de \"snap to nearest point\" mejorado para evitar cambios erráticos\r\n     */\n    handleMouseMove(event) {\n      if (!this.chartData.length || !this.dataPoints.length) return;\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\n      const mouseX = event.clientX - chartRect.left;\n      const mouseY = event.clientY - chartRect.top;\n\n      // Actualizar la posición del mouse para el tooltip\n      this.mouseX = mouseX;\n      this.mouseY = mouseY;\n\n      // Encuentra el punto más cercano al mouse\n      this.updateActivePointFromPosition(mouseX);\n      this.mouseOver = true;\n    },\n    /**\r\n     * Gestiona el movimiento táctil sobre el gráfico (para dispositivos móviles)\r\n     */\n    handleTouchMove(event) {\n      if (!this.chartData.length || !this.dataPoints.length || !event.touches[0]) return;\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\n      const touchX = event.touches[0].clientX - chartRect.left;\n      const touchY = event.touches[0].clientY - chartRect.top;\n\n      // Actualizar la posición del touch para el tooltip\n      this.mouseX = touchX;\n      this.mouseY = touchY;\n      this.updateActivePointFromPosition(touchX);\n      this.mouseOver = true;\n\n      // Prevenir el desplazamiento de la página durante el uso del gráfico\n      event.preventDefault();\n    },\n    /**\r\n     * Actualiza el punto activo basado en la posición X del mouse/touch\r\n     * Algoritmo mejorado para prevenir saltos y movimientos bruscos\r\n     */\n    updateActivePointFromPosition(posX) {\n      // Asegurarse de que posX esté dentro de los límites del gráfico\n      posX = Math.min(Math.max(0, posX), this.chartWidth);\n      if (this.dataPoints.length === 0) return;\n\n      // Encuentra el punto más cercano (usando distancia absoluta)\n      let nearestIndex = 0;\n      let minDistance = Infinity;\n      this.dataPoints.forEach((point, index) => {\n        const distance = Math.abs(point.x - posX);\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearestIndex = index;\n        }\n      });\n\n      // Actualiza el índice sólo si es diferente (evita re-renders innecesarios)\n      if (this.currentMonthIndex !== nearestIndex) {\n        this.currentMonthIndex = nearestIndex;\n      }\n    },\n    /**\r\n     * Restablece la visualización cuando el mouse deja el gráfico\r\n     */\n    resetHighlight() {\n      this.mouseOver = false;\n    },\n    /**\r\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\r\n     */\n    formatLargeNumber(value) {\n      if (value >= 1000000000) {\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\n      } else if (value >= 1000000) {\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\n      } else if (value >= 1000) {\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\n      }\n      return value.toString();\n    },\n    /**\r\n     * Formatea un valor monetario con separadores de miles\r\n     */\n    formatCurrency(value) {\n      return new Intl.NumberFormat('es-ES', {\n        maximumFractionDigits: 0\n      }).format(value);\n    }\n  }\n};","map":{"version":3,"names":["MaterialIcon","name","components","icon","props","revenueData","type","Array","required","default","changePercent","Number","changeAmount","color","String","data","chartWidth","chartHeight","currentMonthIndex","mouseOver","mouseX","mouseY","monthLabels","yAxisLabels","defaultData","month","revenue","computed","chartLineColor","totalChange","chartGradientTop","chartGradientBottom","chartData","length","totalRevenue","reduce","sum","item","formattedTotalRevenue","formatLargeNumber","formattedTotalChange","formattedChangePercent","toFixed","linePath","maxValue","Math","max","map","d","minValue","min","paddingBottom","paddingTop","availableHeight","point","index","x","normalizedValue","y","join","areaPath","dataPoints","value","currentPoint","currentPointLabel","year","currentPointAccumulated","i","tooltipStyle","tooltipWidth","tooltipHeight","offset","left","top","mounted","updateChartDimensions","window","addEventListener","beforeUnmount","removeEventListener","methods","$refs","chartContainer","clientWidth","clientHeight","handleMouseMove","event","chartRect","getBoundingClientRect","clientX","clientY","updateActivePointFromPosition","handleTouchMove","touches","touchX","touchY","preventDefault","posX","nearestIndex","minDistance","Infinity","forEach","distance","abs","resetHighlight","replace","toString","formatCurrency","Intl","NumberFormat","maximumFractionDigits","format"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"revenue-chart-container\">\r\n    <div class=\"chart-header\">\r\n      <div class=\"chart-title-section\">\r\n        <h2 class=\"chart-title\">Total Ingresos</h2>\r\n        <div class=\"revenue-amount\">${{ formattedTotalRevenue }}</div>\r\n        <div class=\"change-indicator\" :class=\"{ 'positive': totalChange > 0, 'negative': totalChange < 0 }\">\r\n          <span class=\"change-value\">{{ totalChange > 0 ? '+' : '' }}{{ formattedTotalChange }} ({{ formattedChangePercent }}%)</span>\r\n          <span class=\"period\">· últimos 12 meses</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"period-selector\">\r\n        <button class=\"period-button active\">\r\n          Últimos 12 meses\r\n          <icon name=\"arrow_drop_down\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"chart-content\">\r\n      <div class=\"chart-axes\">\r\n        <div class=\"y-axis\">\r\n          <div class=\"axis-label\" v-for=\"(value, index) in yAxisLabels\" :key=\"index\">\r\n            {{ value }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"chart-graphic\" ref=\"chartContainer\" \r\n           @mousemove=\"handleMouseMove\"\r\n           @mouseleave=\"resetHighlight\" \r\n           @touchmove=\"handleTouchMove\"\r\n           @touchend=\"resetHighlight\">\r\n        <!-- La gráfica SVG se generará aquí -->\r\n        <svg class=\"chart-svg\" ref=\"chartSvg\" width=\"100%\" height=\"100%\">\r\n          <defs>\r\n            <linearGradient id=\"areaGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n              <stop offset=\"0%\" :stop-color=\"chartGradientTop\" stop-opacity=\"0.6\" />\r\n              <stop offset=\"100%\" :stop-color=\"chartGradientBottom\" stop-opacity=\"0.05\" />\r\n            </linearGradient>\r\n          </defs>\r\n          <path :d=\"areaPath\" fill=\"url(#areaGradient)\" />\r\n          <path :d=\"linePath\" fill=\"none\" :stroke=\"chartLineColor\" stroke-width=\"2\" />\r\n          \r\n          <!-- Línea vertical para el punto actual -->\r\n          <line v-if=\"currentPoint && mouseOver\" :x1=\"currentPoint.x\" :y1=\"chartHeight\" :x2=\"currentPoint.x\" :y2=\"currentPoint.y\" :stroke=\"chartLineColor\" stroke-width=\"1\" stroke-dasharray=\"2,2\" />\r\n          \r\n          <!-- Círculo indicador (solo aparece cuando el mouse está sobre el gráfico) -->\r\n          <circle \r\n            v-if=\"currentPoint && mouseOver\"\r\n            :cx=\"currentPoint.x\" \r\n            :cy=\"currentPoint.y\" \r\n            r=\"6\" \r\n            :fill=\"chartLineColor\" \r\n            stroke=\"#1a1a1a\" \r\n            stroke-width=\"2\"\r\n            class=\"hover-point\"\r\n          />\r\n          \r\n          <!-- Área interactiva transparente para detectar movimiento del mouse -->\r\n          <rect \r\n            class=\"interaction-overlay\" \r\n            :width=\"chartWidth\" \r\n            :height=\"chartHeight\" \r\n            fill=\"transparent\" \r\n            style=\"pointer-events: all;\"\r\n          />\r\n        </svg>\r\n        \r\n        <!-- Eje X con los meses -->\r\n        <div class=\"x-axis\">\r\n          <div \r\n            class=\"x-label\" \r\n            v-for=\"(month, index) in monthLabels\" \r\n            :key=\"index\" \r\n            :style=\"{ left: `${(index / (monthLabels.length - 1)) * 100}%` }\"\r\n            :class=\"{ 'active': currentMonthIndex === index && mouseOver }\"\r\n          >\r\n            {{ month }}\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Tooltip que sigue al mouse -->\r\n        <div \r\n          v-if=\"currentPoint && mouseOver\" \r\n          class=\"tooltip\" \r\n          :style=\"tooltipStyle\"\r\n        >\r\n          <div class=\"tooltip-title\">{{ currentPointLabel }}</div>\r\n          <div class=\"tooltip-value\">${{ formatCurrency(currentPoint.value) }}</div>\r\n          <div class=\"tooltip-accumulated\">Acumulado: ${{ formatCurrency(currentPointAccumulated) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MaterialIcon from '../ui/Icon.vue';\r\n\r\nexport default {\r\n  name: 'RevenueChart',\r\n  \r\n  components: {\r\n    icon: MaterialIcon\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Datos de ingresos de los últimos 12 meses\r\n     * Debe ser un array de objetos con las propiedades \"month\" y \"revenue\"\r\n     */\r\n    revenueData: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => []\r\n    },\r\n    \r\n    /**\r\n     * Cambio porcentual en los ingresos con respecto al período anterior\r\n     */\r\n    changePercent: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    \r\n    /**\r\n     * Valor absoluto del cambio en los ingresos\r\n     */\r\n    changeAmount: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    \r\n    /**\r\n     * Color principal del gráfico\r\n     */\r\n    color: {\r\n      type: String,\r\n      default: null\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      chartWidth: 0,\r\n      chartHeight: 0,\r\n      currentMonthIndex: -1, // Inicialmente ningún mes está seleccionado\r\n      mouseOver: false,\r\n      mouseX: 0,\r\n      mouseY: 0,\r\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\r\n      yAxisLabels: ['$1M', '$10M', '$50M', '$100M', '$1B'],\r\n      // Datos simulados para el gráfico si no se proporcionan\r\n      defaultData: [\r\n        { month: 'Ene', revenue: 1000000 },\r\n        { month: 'Feb', revenue: 1200000 },\r\n        { month: 'Mar', revenue: 2500000 },\r\n        { month: 'Abr', revenue: 3800000 },\r\n        { month: 'May', revenue: 5200000 },\r\n        { month: 'Jun', revenue: 4800000 },\r\n        { month: 'Jul', revenue: 8500000 },\r\n        { month: 'Ago', revenue: 12000000 },\r\n        { month: 'Sep', revenue: 9500000 },\r\n        { month: 'Oct', revenue: 11000000 },\r\n        { month: 'Nov', revenue: 12500000 },\r\n        { month: 'Dic', revenue: 15000000 }\r\n      ]\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    /**\r\n     * Determina el color a usar para el gráfico según el valor de cambio\r\n     */\r\n    chartLineColor() {\r\n      if (this.color) return this.color;\r\n      \r\n      // Si es positivo, usar verde como en SalesCard\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      }\r\n      // Si es negativo, usar rojo como en SalesCard\r\n      else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      }\r\n      // Si es neutral, usar color turquesa por defecto\r\n      else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Color para la parte superior del gradiente\r\n     */\r\n    chartGradientTop() {\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      } else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      } else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Color para la parte inferior del gradiente\r\n     */\r\n    chartGradientBottom() {\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      } else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      } else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Obtiene los datos de ingresos, usando los predeterminados si no se proporcionan\r\n     */\r\n    chartData() {\r\n      return this.revenueData.length > 0 ? this.revenueData : this.defaultData;\r\n    },\r\n    \r\n    /**\r\n     * Calcula el total de ingresos sumando todos los valores\r\n     */\r\n    totalRevenue() {\r\n      return this.chartData.reduce((sum, item) => sum + item.revenue, 0);\r\n    },\r\n    \r\n    /**\r\n     * Formatea el total de ingresos para mostrar\r\n     */\r\n    formattedTotalRevenue() {\r\n      return this.formatLargeNumber(this.totalRevenue);\r\n    },\r\n    \r\n    /**\r\n     * Obtiene el valor de cambio total\r\n     */\r\n    totalChange() {\r\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\r\n    },\r\n    \r\n    /**\r\n     * Formatea el cambio total para mostrar\r\n     */\r\n    formattedTotalChange() {\r\n      return this.formatLargeNumber(this.totalChange);\r\n    },\r\n    \r\n    /**\r\n     * Formatea el porcentaje de cambio\r\n     */\r\n    formattedChangePercent() {\r\n      return (this.changePercent || 12.2).toFixed(1);\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para la línea del gráfico\r\n     */\r\n    linePath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      return this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * this.chartWidth;\r\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para el área bajo la línea\r\n     */\r\n    areaPath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      const linePath = this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * this.chartWidth;\r\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n      \r\n      return `${linePath} L${this.chartWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\r\n    },\r\n    \r\n    /**\r\n     * Calcula todos los puntos de datos para determinar el punto exacto a mostrar en cada posición\r\n     */\r\n    dataPoints() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return [];\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      return this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * this.chartWidth;\r\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        \r\n        return {\r\n          x,\r\n          y,\r\n          month: point.month,\r\n          value: point.revenue,\r\n          index\r\n        };\r\n      });\r\n    },\r\n    \r\n    /**\r\n     * Obtiene la información del punto actual seleccionado\r\n     */\r\n    currentPoint() {\r\n      if (!this.dataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.dataPoints.length) \r\n        return null;\r\n      \r\n      return this.dataPoints[this.currentMonthIndex];\r\n    },\r\n    \r\n    /**\r\n     * Obtiene la etiqueta del punto actual\r\n     */\r\n    currentPointLabel() {\r\n      if (!this.currentPoint) return '';\r\n      const year = this.chartData[this.currentMonthIndex].year || '2024';\r\n      return `${this.currentPoint.month}, ${year}`;\r\n    },\r\n    \r\n    /**\r\n     * Calcula el valor acumulado hasta el punto actual\r\n     */\r\n    currentPointAccumulated() {\r\n      if (!this.chartData.length || this.currentMonthIndex < 0) return 0;\r\n      \r\n      let sum = 0;\r\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\r\n        sum += this.chartData[i].revenue;\r\n      }\r\n      \r\n      return sum;\r\n    },\r\n    \r\n    /**\r\n     * Estilo para la posición del tooltip basado en la posición del mouse\r\n     */\r\n    tooltipStyle() {\r\n      // Calcular si el tooltip debe aparecer a la izquierda o derecha del cursor\r\n      // para evitar que se salga de los bordes\r\n      const tooltipWidth = 150;\r\n      const tooltipHeight = 80;\r\n      const offset = 15; // Distancia del cursor al tooltip\r\n      \r\n      let left = this.mouseX + offset;\r\n      let top = this.mouseY - tooltipHeight / 2;\r\n      \r\n      // Evitar que se salga por el lado derecho\r\n      if (left + tooltipWidth > this.chartWidth) {\r\n        left = this.mouseX - tooltipWidth - offset;\r\n      }\r\n      \r\n      // Evitar que se salga por arriba\r\n      if (top < 0) {\r\n        top = 10;\r\n      }\r\n      \r\n      // Evitar que se salga por abajo\r\n      if (top + tooltipHeight > this.chartHeight) {\r\n        top = this.chartHeight - tooltipHeight - 10;\r\n      }\r\n      \r\n      return {\r\n        left: `${left}px`,\r\n        top: `${top}px`\r\n      };\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    this.updateChartDimensions();\r\n    window.addEventListener('resize', this.updateChartDimensions);\r\n  },\r\n  \r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.updateChartDimensions);\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Actualiza las dimensiones del gráfico en función del contenedor\r\n     */\r\n    updateChartDimensions() {\r\n      if (this.$refs.chartContainer) {\r\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\r\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Gestiona el movimiento del mouse sobre el gráfico\r\n     * Usa un algoritmo de \"snap to nearest point\" mejorado para evitar cambios erráticos\r\n     */\r\n    handleMouseMove(event) {\r\n      if (!this.chartData.length || !this.dataPoints.length) return;\r\n      \r\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\r\n      const mouseX = event.clientX - chartRect.left;\r\n      const mouseY = event.clientY - chartRect.top;\r\n      \r\n      // Actualizar la posición del mouse para el tooltip\r\n      this.mouseX = mouseX;\r\n      this.mouseY = mouseY;\r\n      \r\n      // Encuentra el punto más cercano al mouse\r\n      this.updateActivePointFromPosition(mouseX);\r\n      this.mouseOver = true;\r\n    },\r\n    \r\n    /**\r\n     * Gestiona el movimiento táctil sobre el gráfico (para dispositivos móviles)\r\n     */\r\n    handleTouchMove(event) {\r\n      if (!this.chartData.length || !this.dataPoints.length || !event.touches[0]) return;\r\n      \r\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\r\n      const touchX = event.touches[0].clientX - chartRect.left;\r\n      const touchY = event.touches[0].clientY - chartRect.top;\r\n      \r\n      // Actualizar la posición del touch para el tooltip\r\n      this.mouseX = touchX;\r\n      this.mouseY = touchY;\r\n      \r\n      this.updateActivePointFromPosition(touchX);\r\n      this.mouseOver = true;\r\n      \r\n      // Prevenir el desplazamiento de la página durante el uso del gráfico\r\n      event.preventDefault();\r\n    },\r\n    \r\n    /**\r\n     * Actualiza el punto activo basado en la posición X del mouse/touch\r\n     * Algoritmo mejorado para prevenir saltos y movimientos bruscos\r\n     */\r\n    updateActivePointFromPosition(posX) {\r\n      // Asegurarse de que posX esté dentro de los límites del gráfico\r\n      posX = Math.min(Math.max(0, posX), this.chartWidth);\r\n      \r\n      if (this.dataPoints.length === 0) return;\r\n      \r\n      // Encuentra el punto más cercano (usando distancia absoluta)\r\n      let nearestIndex = 0;\r\n      let minDistance = Infinity;\r\n      \r\n      this.dataPoints.forEach((point, index) => {\r\n        const distance = Math.abs(point.x - posX);\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          nearestIndex = index;\r\n        }\r\n      });\r\n      \r\n      // Actualiza el índice sólo si es diferente (evita re-renders innecesarios)\r\n      if (this.currentMonthIndex !== nearestIndex) {\r\n        this.currentMonthIndex = nearestIndex;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Restablece la visualización cuando el mouse deja el gráfico\r\n     */\r\n    resetHighlight() {\r\n      this.mouseOver = false;\r\n    },\r\n    \r\n    /**\r\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\r\n     */\r\n    formatLargeNumber(value) {\r\n      if (value >= 1000000000) {\r\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\r\n      } else if (value >= 1000000) {\r\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\r\n      } else if (value >= 1000) {\r\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\r\n      }\r\n      return value.toString();\r\n    },\r\n    \r\n    /**\r\n     * Formatea un valor monetario con separadores de miles\r\n     */\r\n    formatCurrency(value) {\r\n      return new Intl.NumberFormat('es-ES', {\r\n        maximumFractionDigits: 0\r\n      }).format(value);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.revenue-chart-container {\r\n  background-color: var(--bg-secondary);\r\n  border-radius: 10px;\r\n  padding: 16px;\r\n  /* Efecto 3D con múltiples sombras */\r\n  box-shadow: \r\n    0 2px 4px rgba(0, 0, 0, 0.05),\r\n    0 4px 8px rgba(0, 0, 0, 0.05),\r\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\r\n  /* Borde con gradiente para efecto 3D */\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\r\n  height: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: var(--text-primary);\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-color: var(--bg-secondary, #1a1a1a);\r\n  color: var(--text-primary, #efefef);\r\n  /* Efecto de brillo en el borde superior */\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    rgba(255, 255, 255, 0.1) 0%,\r\n    rgba(255, 255, 255, 0) 20%\r\n  );\r\n  transition: transform 0.3s cubic-bezier(0.165, 0.84, 0.44, 1), \r\n              box-shadow 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\r\n}\r\n\r\n/* Efecto de elevación al pasar el mouse */\r\n.revenue-chart-container:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: \r\n    0 5px 10px rgba(0, 0, 0, 0.1),\r\n    0 10px 20px rgba(0, 0, 0, 0.05),\r\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n/* Añadir un pseudo-elemento para el efecto de brillo en el borde */\r\n.revenue-chart-container::before {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(\r\n    to right,\r\n    rgba(255, 255, 255, 0) 0%,\r\n    rgba(255, 255, 255, 0.3) 50%,\r\n    rgba(255, 255, 255, 0) 100%\r\n  );\r\n  border-top-left-radius: 10px;\r\n  border-top-right-radius: 10px;\r\n}\r\n\r\n/* Añadir un pseudo-elemento para el efecto de sombra en el borde inferior */\r\n.revenue-chart-container::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(\r\n    to right,\r\n    rgba(0, 0, 0, 0) 0%,\r\n    rgba(0, 0, 0, 0.2) 50%,\r\n    rgba(0, 0, 0, 0) 100%\r\n  );\r\n  border-bottom-left-radius: 10px;\r\n  border-bottom-right-radius: 10px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.chart-title-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 0.9rem;\r\n  font-weight: 600;\r\n  margin: 0 0 8px 0;\r\n  opacity: 0.9;\r\n  /* Efecto de texto 3D sutil */\r\n  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.revenue-amount {\r\n  font-size: 1.8rem;\r\n  font-weight: 700;\r\n  margin-bottom: 4px;\r\n  letter-spacing: -0.5px;\r\n  /* Efecto de texto 3D más pronunciado */\r\n  text-shadow: \r\n    0 1px 1px rgba(0, 0, 0, 0.1),\r\n    0 2px 2px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.change-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.change-value {\r\n  font-weight: 600;\r\n}\r\n\r\n.positive {\r\n  color: #27ae60; /* Verde que coincide con SalesCard */\r\n}\r\n\r\n.negative {\r\n  color: #e74c3c; /* Rojo que coincide con SalesCard */\r\n}\r\n\r\n.period {\r\n  opacity: 0.7;\r\n  margin-left: 4px;\r\n}\r\n\r\n.period-selector {\r\n  margin-left: auto;\r\n}\r\n\r\n.period-button {\r\n  display: flex;\r\n  align-items: center;\r\n  background: none;\r\n  border: none;\r\n  color: inherit;\r\n  font-size: 0.8rem;\r\n  padding: 4px 8px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  opacity: 0.8;\r\n  transition: opacity 0.3s, background-color 0.3s;\r\n}\r\n\r\n.period-button:hover, \r\n.period-button.active {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  opacity: 1;\r\n}\r\n\r\n.chart-content {\r\n  flex: 1;\r\n  display: flex;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.chart-axes {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 20px; /* Espacio para el eje X */\r\n  width: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 10px 0;\r\n}\r\n\r\n.y-axis {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n\r\n.axis-label {\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  text-align: left;\r\n}\r\n\r\n.chart-graphic {\r\n  flex: 1;\r\n  margin-left: 50px; /* Ancho del eje Y */\r\n  position: relative;\r\n  height: 100%;\r\n  cursor: crosshair; /* Cambiar cursor al pasar el mouse sobre el gráfico */\r\n}\r\n\r\n.chart-svg {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: calc(100% - 20px); /* Restar altura del eje X */\r\n}\r\n\r\n.x-axis {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.x-label {\r\n  position: absolute;\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  transform: translateX(-50%);\r\n  text-align: center;\r\n  transition: color 0.2s ease, font-weight 0.2s ease;\r\n}\r\n\r\n.x-label.active {\r\n  font-weight: 600;\r\n}\r\n\r\n/* Los colores activos de los ejes X se definirán dinámicamente basados en chartLineColor */\r\n.positive .x-label.active {\r\n  color: #27ae60;\r\n}\r\n\r\n.negative .x-label.active {\r\n  color: #e74c3c;\r\n}\r\n\r\n/* Estilos para los puntos de datos */\r\n.hover-point {\r\n  filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.3));\r\n  transition: transform 0.1s ease;\r\n}\r\n\r\n/* Estilos para la etiqueta de punto */\r\n.point-label {\r\n  transition: all 0.2s ease;\r\n  opacity: 0;\r\n  animation: fadeIn 0.3s forwards;\r\n  pointer-events: none;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateY(5px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n/* Eliminamos los estilos redundantes */\r\n.interaction-overlay {\r\n  cursor: crosshair;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .revenue-chart-container {\r\n    height: 300px;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .revenue-amount {\r\n    font-size: 1.6rem;\r\n  }\r\n  \r\n  .chart-title {\r\n    font-size: 0.85rem;\r\n  }\r\n  \r\n  /* Ajustes para mejorar la experiencia táctil en móviles */\r\n  .chart-graphic {\r\n    cursor: pointer;\r\n  }\r\n  \r\n  /* Ajustar el tamaño del popup para móviles */\r\n  .point-label rect {\r\n    height: 40px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}