{"ast":null,"code":"import { ref, onMounted, onUnmounted } from 'vue';\nimport SalesChart from '../components/dashboard/SalesChart.vue';\nimport dashboardService from '../services/dashboardService';\nexport default {\n  name: 'DashboardView',\n  components: {\n    SalesChart\n  },\n  setup() {\n    // Estado para KPIs\n    const kpiData = ref(null);\n\n    // Estado para productos\n    const topProducts = ref(null);\n    const isProductsLoading = ref(true);\n    const isProductsVisible = ref(false);\n    const productsTableRef = ref(null);\n\n    // Observer para productos\n    let productsObserver = null;\n\n    // Definición de KPIs\n    const kpis = [{\n      id: 'ventasHoy',\n      label: 'Ventas de hoy',\n      format: 'currency'\n    }, {\n      id: 'ventasSemana',\n      label: 'Ventas de la semana',\n      format: 'currency'\n    }, {\n      id: 'ventasMes',\n      label: 'Ventas del mes',\n      format: 'currency'\n    }, {\n      id: 'clientesNuevos',\n      label: 'Clientes nuevos',\n      format: 'number'\n    }, {\n      id: 'pedidosPendientes',\n      label: 'Pedidos pendientes',\n      format: 'number'\n    }, {\n      id: 'satisfaccionCliente',\n      label: 'Satisfacción',\n      format: 'percent'\n    }];\n\n    /**\r\n     * Cargar datos KPI\r\n     */\n    const loadKpiData = async () => {\n      try {\n        const dashboardData = await dashboardService.getDashboardData();\n        kpiData.value = dashboardData.kpis;\n      } catch (error) {\n        console.error('Error cargando KPIs:', error);\n      }\n    };\n\n    /**\r\n     * Cargar datos de productos más vendidos\r\n     */\n    const loadTopProducts = async () => {\n      if (!isProductsVisible.value) return;\n      isProductsLoading.value = true;\n      try {\n        const dashboardData = await dashboardService.getDashboardData();\n        topProducts.value = dashboardData.productos?.masVendidos || [];\n      } catch (error) {\n        console.error('Error cargando productos más vendidos:', error);\n      } finally {\n        isProductsLoading.value = false;\n      }\n    };\n\n    /**\r\n     * Configurar observer para productos\r\n     */\n    const setupProductsObserver = () => {\n      if (!productsTableRef.value) return;\n      productsObserver = new IntersectionObserver(entries => {\n        if (entries[0].isIntersecting && !isProductsVisible.value) {\n          isProductsVisible.value = true;\n          loadTopProducts();\n          productsObserver.disconnect();\n        }\n      }, {\n        threshold: 0.1\n      });\n      productsObserver.observe(productsTableRef.value);\n    };\n\n    /**\r\n     * Formatear valor de KPI según su tipo\r\n     */\n    const formatKpiValue = (id, value) => {\n      if (value === undefined || value === null) return '-';\n      const kpi = kpis.find(k => k.id === id);\n      if (!kpi) return value;\n      switch (kpi.format) {\n        case 'currency':\n          return formatCurrency(value);\n        case 'percent':\n          return `${value}%`;\n        case 'number':\n        default:\n          return value.toLocaleString();\n      }\n    };\n\n    /**\r\n     * Formatear valor como moneda\r\n     */\n    const formatCurrency = value => {\n      return new Intl.NumberFormat('es-MX', {\n        style: 'currency',\n        currency: 'MXN',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      }).format(value);\n    };\n\n    // Configurar al montar el componente\n    onMounted(() => {\n      // Cargar KPIs inmediatamente (datos críticos)\n      loadKpiData();\n\n      // Configurar observación para productos (carga diferida)\n      setupProductsObserver();\n    });\n\n    // Limpiar recursos al desmontar\n    onUnmounted(() => {\n      if (productsObserver) {\n        productsObserver.disconnect();\n      }\n    });\n    return {\n      kpis,\n      kpiData,\n      topProducts,\n      isProductsLoading,\n      isProductsVisible,\n      productsTableRef,\n      formatKpiValue,\n      formatCurrency\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","SalesChart","dashboardService","name","components","setup","kpiData","topProducts","isProductsLoading","isProductsVisible","productsTableRef","productsObserver","kpis","id","label","format","loadKpiData","dashboardData","getDashboardData","value","error","console","loadTopProducts","productos","masVendidos","setupProductsObserver","IntersectionObserver","entries","isIntersecting","disconnect","threshold","observe","formatKpiValue","undefined","kpi","find","k","formatCurrency","toLocaleString","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\views\\DashboardView.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-view\">\r\n    <h1 class=\"dashboard-title\">Dashboard</h1>\r\n    \r\n    <!-- KPIs / Métricas principales -->\r\n    <section class=\"dashboard-kpis\">\r\n      <div class=\"kpi-cards\">\r\n        <div v-for=\"(kpi, index) in kpis\" :key=\"index\" class=\"kpi-card\">\r\n          <div class=\"kpi-value\" :class=\"{ 'is-loading': !kpiData }\">\r\n            <div v-if=\"kpiData\" class=\"value\">\r\n              {{ formatKpiValue(kpi.id, kpiData[kpi.id]) }}\r\n            </div>\r\n            <div v-else class=\"skeleton-value\"></div>\r\n          </div>\r\n          <div class=\"kpi-label\">{{ kpi.label }}</div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    \r\n    <!-- Gráficos principales -->\r\n    <section class=\"dashboard-charts\">\r\n      <div class=\"charts-grid\">\r\n        <!-- Gráfico de ventas diarias (prioridad alta, cargar inmediatamente) -->\r\n        <sales-chart \r\n          title=\"Ventas diarias\" \r\n          data-type=\"ventasDiarias\"\r\n          :load-on-visible=\"false\"\r\n        />\r\n        \r\n        <!-- Gráfico de ventas semanales (prioridad media, cargar cuando sea visible) -->\r\n        <sales-chart \r\n          title=\"Ventas semanales\" \r\n          data-type=\"ventasSemanales\"\r\n        />\r\n        \r\n        <!-- Gráfico de ventas mensuales (prioridad media, cargar cuando sea visible) -->\r\n        <sales-chart \r\n          title=\"Ventas mensuales\" \r\n          data-type=\"ventasMensuales\"\r\n        />\r\n      </div>\r\n    </section>\r\n    \r\n    <!-- Sección productos más vendidos (carga diferida) -->\r\n    <section class=\"dashboard-top-products\">\r\n      <h2 class=\"section-title\">Productos más vendidos</h2>\r\n      <div class=\"products-table-container\" ref=\"productsTableRef\">\r\n        <div v-if=\"!isProductsVisible || isProductsLoading\" class=\"products-skeleton\">\r\n          <div class=\"skeleton-row header\"></div>\r\n          <div v-for=\"i in 5\" :key=\"i\" class=\"skeleton-row\"></div>\r\n        </div>\r\n        \r\n        <table v-else-if=\"topProducts && topProducts.length\" class=\"products-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Producto</th>\r\n              <th>Unidades</th>\r\n              <th>Ingresos</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(product, index) in topProducts\" :key=\"product.id\">\r\n              <td>{{ index + 1 }}</td>\r\n              <td>{{ product.nombre }}</td>\r\n              <td>{{ product.ventas }}</td>\r\n              <td>{{ formatCurrency(product.ingresos) }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        \r\n        <div v-else class=\"no-data-message\">\r\n          No hay datos de productos disponibles\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onUnmounted } from 'vue';\r\nimport SalesChart from '../components/dashboard/SalesChart.vue';\r\nimport dashboardService from '../services/dashboardService';\r\n\r\nexport default {\r\n  name: 'DashboardView',\r\n  \r\n  components: {\r\n    SalesChart\r\n  },\r\n  \r\n  setup() {\r\n    // Estado para KPIs\r\n    const kpiData = ref(null);\r\n    \r\n    // Estado para productos\r\n    const topProducts = ref(null);\r\n    const isProductsLoading = ref(true);\r\n    const isProductsVisible = ref(false);\r\n    const productsTableRef = ref(null);\r\n    \r\n    // Observer para productos\r\n    let productsObserver = null;\r\n    \r\n    // Definición de KPIs\r\n    const kpis = [\r\n      { id: 'ventasHoy', label: 'Ventas de hoy', format: 'currency' },\r\n      { id: 'ventasSemana', label: 'Ventas de la semana', format: 'currency' },\r\n      { id: 'ventasMes', label: 'Ventas del mes', format: 'currency' },\r\n      { id: 'clientesNuevos', label: 'Clientes nuevos', format: 'number' },\r\n      { id: 'pedidosPendientes', label: 'Pedidos pendientes', format: 'number' },\r\n      { id: 'satisfaccionCliente', label: 'Satisfacción', format: 'percent' }\r\n    ];\r\n    \r\n    /**\r\n     * Cargar datos KPI\r\n     */\r\n    const loadKpiData = async () => {\r\n      try {\r\n        const dashboardData = await dashboardService.getDashboardData();\r\n        kpiData.value = dashboardData.kpis;\r\n      } catch (error) {\r\n        console.error('Error cargando KPIs:', error);\r\n      }\r\n    };\r\n    \r\n    /**\r\n     * Cargar datos de productos más vendidos\r\n     */\r\n    const loadTopProducts = async () => {\r\n      if (!isProductsVisible.value) return;\r\n      \r\n      isProductsLoading.value = true;\r\n      \r\n      try {\r\n        const dashboardData = await dashboardService.getDashboardData();\r\n        topProducts.value = dashboardData.productos?.masVendidos || [];\r\n      } catch (error) {\r\n        console.error('Error cargando productos más vendidos:', error);\r\n      } finally {\r\n        isProductsLoading.value = false;\r\n      }\r\n    };\r\n    \r\n    /**\r\n     * Configurar observer para productos\r\n     */\r\n    const setupProductsObserver = () => {\r\n      if (!productsTableRef.value) return;\r\n      \r\n      productsObserver = new IntersectionObserver(entries => {\r\n        if (entries[0].isIntersecting && !isProductsVisible.value) {\r\n          isProductsVisible.value = true;\r\n          loadTopProducts();\r\n          productsObserver.disconnect();\r\n        }\r\n      }, { threshold: 0.1 });\r\n      \r\n      productsObserver.observe(productsTableRef.value);\r\n    };\r\n    \r\n    /**\r\n     * Formatear valor de KPI según su tipo\r\n     */\r\n    const formatKpiValue = (id, value) => {\r\n      if (value === undefined || value === null) return '-';\r\n      \r\n      const kpi = kpis.find(k => k.id === id);\r\n      if (!kpi) return value;\r\n      \r\n      switch (kpi.format) {\r\n        case 'currency':\r\n          return formatCurrency(value);\r\n        case 'percent':\r\n          return `${value}%`;\r\n        case 'number':\r\n        default:\r\n          return value.toLocaleString();\r\n      }\r\n    };\r\n    \r\n    /**\r\n     * Formatear valor como moneda\r\n     */\r\n    const formatCurrency = (value) => {\r\n      return new Intl.NumberFormat('es-MX', {\r\n        style: 'currency',\r\n        currency: 'MXN',\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0\r\n      }).format(value);\r\n    };\r\n    \r\n    // Configurar al montar el componente\r\n    onMounted(() => {\r\n      // Cargar KPIs inmediatamente (datos críticos)\r\n      loadKpiData();\r\n      \r\n      // Configurar observación para productos (carga diferida)\r\n      setupProductsObserver();\r\n    });\r\n    \r\n    // Limpiar recursos al desmontar\r\n    onUnmounted(() => {\r\n      if (productsObserver) {\r\n        productsObserver.disconnect();\r\n      }\r\n    });\r\n    \r\n    return {\r\n      kpis,\r\n      kpiData,\r\n      topProducts,\r\n      isProductsLoading,\r\n      isProductsVisible,\r\n      productsTableRef,\r\n      formatKpiValue,\r\n      formatCurrency\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard-view {\r\n  padding: 20px;\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.dashboard-title {\r\n  margin-bottom: 24px;\r\n  font-size: 1.8rem;\r\n  font-weight: 700;\r\n  color: var(--text-primary);\r\n}\r\n\r\n/* KPIs */\r\n.dashboard-kpis {\r\n  margin-bottom: 32px;\r\n}\r\n\r\n.kpi-cards {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 16px;\r\n}\r\n\r\n.kpi-card {\r\n  background-color: var(--bg-primary);\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n  text-align: center;\r\n}\r\n\r\n.kpi-value {\r\n  font-size: 1.8rem;\r\n  font-weight: 700;\r\n  color: var(--text-primary);\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.kpi-label {\r\n  font-size: 0.9rem;\r\n  color: var(--text-secondary);\r\n}\r\n\r\n.skeleton-value {\r\n  height: 36px;\r\n  width: 80%;\r\n  margin: 0 auto 8px;\r\n  background-color: var(--skeleton-color, rgba(0, 0, 0, 0.1));\r\n  border-radius: 4px;\r\n  animation: pulse 1.5s ease-in-out infinite;\r\n}\r\n\r\n/* Gráficos */\r\n.dashboard-charts {\r\n  margin-bottom: 32px;\r\n}\r\n\r\n.charts-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n  gap: 24px;\r\n}\r\n\r\n/* Productos más vendidos */\r\n.dashboard-top-products {\r\n  margin-bottom: 32px;\r\n}\r\n\r\n.section-title {\r\n  font-size: 1.4rem;\r\n  font-weight: 600;\r\n  margin-bottom: 16px;\r\n  color: var(--text-primary);\r\n}\r\n\r\n.products-table-container {\r\n  background-color: var(--bg-primary);\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n  overflow-x: auto;\r\n}\r\n\r\n.products-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.products-table th {\r\n  text-align: left;\r\n  padding: 12px;\r\n  border-bottom: 2px solid var(--border);\r\n  color: var(--text-secondary);\r\n  font-weight: 600;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.products-table td {\r\n  padding: 12px;\r\n  border-bottom: 1px solid var(--border);\r\n}\r\n\r\n.products-skeleton {\r\n  width: 100%;\r\n}\r\n\r\n.skeleton-row {\r\n  height: 50px;\r\n  background-color: var(--skeleton-color, rgba(0, 0, 0, 0.1));\r\n  border-radius: 4px;\r\n  margin-bottom: 8px;\r\n  animation: pulse 1.5s ease-in-out infinite;\r\n}\r\n\r\n.skeleton-row.header {\r\n  height: 40px;\r\n  width: 100%;\r\n}\r\n\r\n.no-data-message {\r\n  padding: 32px;\r\n  text-align: center;\r\n  color: var(--text-secondary);\r\n  font-style: italic;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    opacity: 0.6;\r\n  }\r\n  50% {\r\n    opacity: 0.8;\r\n  }\r\n  100% {\r\n    opacity: 0.6;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .charts-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .kpi-cards {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .kpi-cards {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}