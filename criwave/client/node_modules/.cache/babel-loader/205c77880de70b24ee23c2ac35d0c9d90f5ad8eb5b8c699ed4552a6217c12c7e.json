{"ast":null,"code":"/**\n * Componente para renderizar ítems de menú, soportando estructura jerárquica\n * \n * Características:\n * - Soporta elementos simples y elementos con hijos (expansibles)\n * - Gestiona el estado de expandido/colapsado\n * - Permite marcado como favorito\n * - Renderiza correctamente elementos de cabecera de sección\n * \n * @component MenuItem\n */\nimport { computed } from 'vue';\nexport default {\n  name: 'MenuItem',\n  props: {\n    /**\n     * Elemento a renderizar\n     */\n    item: {\n      type: Object,\n      required: true\n    },\n    /**\n     * Nivel de profundidad para indentación\n     */\n    depth: {\n      type: Number,\n      default: 0\n    }\n  },\n  emits: ['item-click'],\n  setup(props, {\n    emit\n  }) {\n    // Verificar si el elemento tiene hijos\n    const hasChildren = computed(() => {\n      return props.item.children && props.item.children.length > 0;\n    });\n\n    // Estado de expansión del elemento - extraído de props para evitar mutación directa\n    const isExpanded = computed(() => {\n      return props.item.expanded || false;\n    });\n\n    // Verificar si el elemento está en favoritos\n    const isFavorite = computed(() => {\n      try {\n        const visitHistory = JSON.parse(localStorage.getItem('visitHistory') || '{}');\n\n        // Crear identificador único del elemento\n        const itemPath = props.item.parent ? `${props.item.parent} > ${props.item.text}` : props.item.text;\n        const itemId = `${itemPath}-${props.item.href}`;\n\n        // Un elemento es favorito si tiene 3 o más visitas\n        return (visitHistory[itemId] || 0) >= 3;\n      } catch (error) {\n        console.error('Error al verificar favorito:', error);\n        return false;\n      }\n    });\n\n    // Manejar clic en elemento\n    const handleClick = () => {\n      // Emitir el evento para registrar la visita en todos los casos\n      emit('item-click', props.item);\n\n      // Si tiene hijos, expandir/colapsar\n      if (hasChildren.value) {\n        toggleExpanded();\n      }\n      // La navegación se manejará en el componente padre\n    };\n\n    // Manejar clic en elemento hijo (pasar al padre)\n    const handleChildClick = item => {\n      // Verificar si ya tiene parent establecido\n      if (!item.parent && props.item.text) {\n        // Establecer la referencia al padre si no existe\n        const childWithParent = {\n          ...item,\n          parent: props.item.text\n        };\n        emit('item-click', childWithParent);\n      } else {\n        emit('item-click', item);\n      }\n    };\n\n    // Cambiar estado de expandido/colapsado\n    const toggleExpanded = () => {\n      // Usar una copia para evitar modificar la prop directamente\n      const updatedExpanded = !isExpanded.value;\n\n      // Guardar estado en localStorage\n      saveExpandedState(updatedExpanded);\n\n      // Actualizar el estado usando el event bus o establecer en el componente padre\n      // Esta es una solución temporal, ya que no podemos modificar la prop directamente\n      if (props.item.id) {\n        try {\n          // Emitir un evento personalizado para que el padre pueda actualizar el estado\n          window.dispatchEvent(new CustomEvent('menu-item-expanded', {\n            detail: {\n              id: props.item.id,\n              expanded: updatedExpanded\n            }\n          }));\n        } catch (error) {\n          console.error('Error al emitir evento de expansión:', error);\n        }\n      }\n    };\n\n    // Guardar estado de expandido en localStorage\n    const saveExpandedState = expanded => {\n      try {\n        // Obtener estado actual\n        const expandedState = JSON.parse(localStorage.getItem('menuExpandedState') || '{}');\n\n        // Actualizar con el nuevo estado\n        if (props.item.id) {\n          expandedState[props.item.id] = expanded;\n        }\n\n        // Guardar en localStorage\n        localStorage.setItem('menuExpandedState', JSON.stringify(expandedState));\n      } catch (error) {\n        console.error('Error al guardar estado expandido:', error);\n      }\n    };\n    return {\n      hasChildren,\n      isExpanded,\n      isFavorite,\n      handleClick,\n      handleChildClick,\n      toggleExpanded\n    };\n  }\n};","map":{"version":3,"names":["computed","name","props","item","type","Object","required","depth","Number","default","emits","setup","emit","hasChildren","children","length","isExpanded","expanded","isFavorite","visitHistory","JSON","parse","localStorage","getItem","itemPath","parent","text","itemId","href","error","console","handleClick","value","toggleExpanded","handleChildClick","childWithParent","updatedExpanded","saveExpandedState","id","window","dispatchEvent","CustomEvent","detail","expandedState","setItem","stringify"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\layout\\MenuItem.vue"],"sourcesContent":["<template>\n  <div class=\"menu-item-wrapper\" :class=\"{ 'with-children': hasChildren }\">\n    <!-- Elemento principal -->\n    <div \n      class=\"menu-item\" \n      :class=\"{ \n        'expanded': isExpanded,\n        'section-header': item.isSection\n      }\"\n    >\n      <a \n        v-if=\"!item.isSection\" \n        :href=\"item.href || '#'\" \n        class=\"nav-link\" \n        :class=\"{ 'active': item.active }\"\n        @click.prevent=\"handleClick\"\n      >\n        <span class=\"nav-text\">{{ item.text }}</span>\n        <span v-if=\"item.badge\" class=\"nav-badge\">{{ item.badge }}</span>\n        \n        <!-- Flecha para expandir/colapsar -->\n        <span v-if=\"hasChildren\" class=\"expand-arrow\" :class=\"{ 'expanded': isExpanded }\">\n          ▼\n        </span>\n      </a>\n      \n      <!-- Título de sección -->\n      <div v-else class=\"section-title\">\n        {{ item.text }}\n      </div>\n    </div>\n    \n    <!-- Subelementos (renderizado recursivo) -->\n    <transition name=\"slide-children\">\n      <div v-if=\"hasChildren && isExpanded\" class=\"children-wrapper\">\n        <menu-item \n          v-for=\"child in item.children\" \n          :key=\"child.id\" \n          :item=\"child\"\n          :depth=\"depth + 1\"\n          @item-click=\"handleChildClick\"\n        />\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\n/**\n * Componente para renderizar ítems de menú, soportando estructura jerárquica\n * \n * Características:\n * - Soporta elementos simples y elementos con hijos (expansibles)\n * - Gestiona el estado de expandido/colapsado\n * - Permite marcado como favorito\n * - Renderiza correctamente elementos de cabecera de sección\n * \n * @component MenuItem\n */\nimport { computed } from 'vue';\n\nexport default {\n  name: 'MenuItem',\n  \n  props: {\n    /**\n     * Elemento a renderizar\n     */\n    item: {\n      type: Object,\n      required: true\n    },\n    \n    /**\n     * Nivel de profundidad para indentación\n     */\n    depth: {\n      type: Number,\n      default: 0\n    }\n  },\n  \n  emits: ['item-click'],\n  \n  setup(props, { emit }) {\n    // Verificar si el elemento tiene hijos\n    const hasChildren = computed(() => {\n      return props.item.children && props.item.children.length > 0;\n    });\n    \n    // Estado de expansión del elemento - extraído de props para evitar mutación directa\n    const isExpanded = computed(() => {\n      return props.item.expanded || false;\n    });\n    \n    // Verificar si el elemento está en favoritos\n    const isFavorite = computed(() => {\n      try {\n        const visitHistory = JSON.parse(localStorage.getItem('visitHistory') || '{}');\n        \n        // Crear identificador único del elemento\n        const itemPath = props.item.parent ? `${props.item.parent} > ${props.item.text}` : props.item.text;\n        const itemId = `${itemPath}-${props.item.href}`;\n        \n        // Un elemento es favorito si tiene 3 o más visitas\n        return (visitHistory[itemId] || 0) >= 3;\n      } catch (error) {\n        console.error('Error al verificar favorito:', error);\n        return false;\n      }\n    });\n    \n    // Manejar clic en elemento\n    const handleClick = () => {\n      // Emitir el evento para registrar la visita en todos los casos\n      emit('item-click', props.item);\n      \n      // Si tiene hijos, expandir/colapsar\n      if (hasChildren.value) {\n        toggleExpanded();\n      }\n      // La navegación se manejará en el componente padre\n    };\n    \n    // Manejar clic en elemento hijo (pasar al padre)\n    const handleChildClick = (item) => {\n      // Verificar si ya tiene parent establecido\n      if (!item.parent && props.item.text) {\n        // Establecer la referencia al padre si no existe\n        const childWithParent = {\n          ...item,\n          parent: props.item.text\n        };\n        emit('item-click', childWithParent);\n      } else {\n        emit('item-click', item);\n      }\n    };\n    \n    // Cambiar estado de expandido/colapsado\n    const toggleExpanded = () => {\n      // Usar una copia para evitar modificar la prop directamente\n      const updatedExpanded = !isExpanded.value;\n      \n      // Guardar estado en localStorage\n      saveExpandedState(updatedExpanded);\n      \n      // Actualizar el estado usando el event bus o establecer en el componente padre\n      // Esta es una solución temporal, ya que no podemos modificar la prop directamente\n      if (props.item.id) {\n        try {\n          // Emitir un evento personalizado para que el padre pueda actualizar el estado\n          window.dispatchEvent(\n            new CustomEvent('menu-item-expanded', { \n              detail: { \n                id: props.item.id, \n                expanded: updatedExpanded \n              } \n            })\n          );\n        } catch (error) {\n          console.error('Error al emitir evento de expansión:', error);\n        }\n      }\n    };\n    \n    // Guardar estado de expandido en localStorage\n    const saveExpandedState = (expanded) => {\n      try {\n        // Obtener estado actual\n        const expandedState = JSON.parse(localStorage.getItem('menuExpandedState') || '{}');\n        \n        // Actualizar con el nuevo estado\n        if (props.item.id) {\n          expandedState[props.item.id] = expanded;\n        }\n        \n        // Guardar en localStorage\n        localStorage.setItem('menuExpandedState', JSON.stringify(expandedState));\n      } catch (error) {\n        console.error('Error al guardar estado expandido:', error);\n      }\n    };\n    \n    return {\n      hasChildren,\n      isExpanded,\n      isFavorite,\n      handleClick,\n      handleChildClick,\n      toggleExpanded\n    };\n  }\n};\n</script>\n\n<style scoped>\n.menu-item-wrapper {\n  position: relative;\n}\n\n.menu-item {\n  position: relative;\n}\n\n.nav-link {\n  display: flex;\n  align-items: center;\n  padding: var(--nav-link-padding);\n  color: var(--nav-link-text-color);\n  text-decoration: none;\n  transition: background-color 0.2s ease, color 0.2s ease, border-left 0.2s ease;\n  position: relative;\n  border-radius: var(--border-radius-sm, 4px);\n  margin: 0.125rem 0.5rem;\n}\n\n.nav-link:hover {\n  background-color: var(--nav-link-hover-bg);\n}\n\n.nav-link.active {\n  background-color: var(--nav-link-active-bg);\n  color: var(--nav-link-active-color);\n  font-weight: 500;\n}\n\n/* Los estilos para el tema oscuro se manejan globalmente en main.css */\n\n.nav-text {\n  flex: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.nav-badge {\n  background-color: var(--badge-bg);\n  color: var(--badge-text);\n  padding: 0.15rem 0.5rem;\n  border-radius: 10px;\n  font-size: 0.7rem;\n  font-weight: 500;\n  margin-left: 0.5rem;\n}\n\n/* Estilos para elementos con hijos */\n.with-children > .menu-item > .nav-link {\n  font-weight: 500;\n}\n\n.expand-arrow {\n  transition: transform 0.3s ease;\n  display: flex;\n  align-items: center;\n  font-size: 0.8em;\n  margin-left: 0.5rem;\n}\n\n.expand-arrow.expanded {\n  transform: rotate(-180deg);\n}\n\n/* Indentación de subelementos */\n.children-wrapper {\n  padding-left: 1rem;\n  overflow: hidden;\n}\n\n/* Hijos de segundo nivel o más */\n.children-wrapper .children-wrapper {\n  border-left: 1px solid var(--border);\n  margin-left: 0.75rem;\n}\n\n/* Animación para mostrar/ocultar hijos */\n.slide-children-enter-active,\n.slide-children-leave-active {\n  transition: all 0.3s ease-out;\n  max-height: 1000px;\n  opacity: 1;\n  overflow: hidden;\n}\n\n.slide-children-enter-from,\n.slide-children-leave-to {\n  max-height: 0;\n  opacity: 0;\n  overflow: hidden;\n}\n\n/* Estilos para cabeceras de sección */\n.section-title {\n  font-size: var(--section-title-size);\n  font-weight: var(--section-title-weight);\n  color: var(--section-title-color);\n  text-transform: var(--section-title-transform);\n  letter-spacing: var(--section-title-spacing);\n  padding: var(--section-title-padding);\n}\n\n.section-header {\n  margin-top: 0.5rem;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}