{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"revenue-chart\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"chart-controls\"\n};\nconst _hoisted_4 = {\n  class: \"date-range-picker\"\n};\nconst _hoisted_5 = {\n  class: \"chart-container\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_flat_pickr = _resolveComponent(\"flat-pickr\");\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", null, \"Ingresos\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_flat_pickr, {\n    modelValue: $data.dateRange,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.dateRange = $event),\n    config: $data.flatpickrConfig,\n    onOnChange: $options.onDateRangeChange,\n    placeholder: \"Seleccionar rango de fechas\",\n    class: \"date-range-input\"\n  }, null, 8 /* PROPS */, [\"modelValue\", \"config\", \"onOnChange\"])])])]), _createElementVNode(\"div\", _hoisted_5, [$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _cache[2] || (_cache[2] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createVNode(_component_apexchart, {\n    type: \"area\",\n    height: \"350\",\n    options: $data.chartOptions,\n    series: $data.series\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_flat_pickr","modelValue","$data","dateRange","_cache","$event","config","flatpickrConfig","onOnChange","$options","onDateRangeChange","placeholder","_hoisted_5","isLoading","_hoisted_6","_createCommentVNode","_component_apexchart","type","height","options","chartOptions","series"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\n  <div class=\"revenue-chart\">\n    <div class=\"chart-header\">\n      <h3>Ingresos</h3>\n      <div class=\"chart-controls\">\n        <div class=\"date-range-picker\">\n          <flat-pickr\n            v-model=\"dateRange\"\n            :config=\"flatpickrConfig\"\n            @on-change=\"onDateRangeChange\"\n            placeholder=\"Seleccionar rango de fechas\"\n            class=\"date-range-input\"\n          />\n        </div>\n      </div>\n    </div>\n      \n    <div class=\"chart-container\">\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\n        <div class=\"loading-spinner\"></div>\n              </div>\n      <apexchart\n        type=\"area\"\n        height=\"350\"\n        :options=\"chartOptions\"\n        :series=\"series\"\n      ></apexchart>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch } from 'vue'\nimport VueApexCharts from 'vue3-apexcharts'\nimport { useThemeStore } from '@/stores/theme'\nimport flatPickr from 'vue-flatpickr-component'\nimport 'flatpickr/dist/flatpickr.css'\n\nexport default {\n  name: 'RevenueChart',\n  components: {\n    apexchart: VueApexCharts,\n    flatPickr\n  },\n  setup() {\n    const themeStore = useThemeStore()\n    return { themeStore }\n  },\n  data() {\n    return {\n      dateRange: null,\n      startDate: '',\n      endDate: '',\n      isLoading: false,\n      isDarkMode: false,\n      flatpickrConfig: {\n        mode: 'range',\n        dateFormat: 'Y-m-d',\n        maxDate: 'today',\n        minDate: '2020-01-01',\n        maxRange: 365,\n        locale: {\n          firstDayOfWeek: 1\n        }\n      },\n      series: [{\n        name: 'Ingresos',\n        data: []\n      }],\n      chartOptions: {\n        chart: {\n          type: 'area',\n          height: 350,\n          toolbar: {\n            show: false\n          },\n          background: 'transparent',\n          foreColor: '#666'\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 2\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.7,\n            opacityTo: 0.3,\n            stops: [0, 90, 100]\n          }\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: '#666',\n              fontSize: '12px'\n            }\n          },\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          crosshairs: {\n            show: true,\n            stroke: {\n              color: '#666',\n              width: 1,\n              dashArray: 3\n            }\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Ingresos ($)',\n            style: {\n              fontSize: '14px',\n              color: '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: '#666'\n            },\n            formatter: function(value) {\n              return value >= 1000000 \n                ? `$${(value/1000000).toFixed(1)}M` \n                : value >= 1000 \n                  ? `$${(value/1000).toFixed(1)}K` \n                  : `$${value}`\n            }\n          }\n        },\n        tooltip: {\n          shared: true,\n          intersect: false,\n          y: {\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        },\n        theme: {\n          mode: 'light'\n        }\n      }\n    }\n  },\n  methods: {\n    onDateRangeChange(selectedDates) {\n      if (!selectedDates || selectedDates.length !== 2) return\n      \n      this.startDate = selectedDates[0].toISOString().split('T')[0]\n      this.endDate = selectedDates[1].toISOString().split('T')[0]\n      this.loadData()\n    },\n    async loadData() {\n      this.isLoading = true\n      try {\n        // Convertir fechas a objetos Date\n        const start = new Date(this.startDate)\n        const end = new Date(this.endDate)\n        const diffDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24))\n        \n        // Generar datos para el rango seleccionado\n        const data = []\n        let currentValue = Math.floor(Math.random() * 500000) + 100000 // Valor inicial\n        \n        for (let i = 0; i <= diffDays; i++) {\n          const date = new Date(start)\n          date.setDate(start.getDate() + i)\n          \n          // Generar variaciÃ³n aleatoria entre -10% y +10%\n          const variation = (Math.random() * 0.2) - 0.1\n          currentValue = Math.floor(currentValue * (1 + variation))\n          \n          // Asegurar que el valor no sea negativo\n          currentValue = Math.max(currentValue, 100000)\n          \n          data.push([\n            date.getTime(),\n            currentValue\n          ])\n        }\n        \n        // Actualizar las series con los datos\n        this.series = [{\n          name: 'Ingresos',\n          data: data\n        }]\n      } catch (error) {\n        console.error('Error loading revenue data:', error)\n      } finally {\n        this.isLoading = false\n      }\n    },\n    updateChartTheme() {\n      const style = getComputedStyle(document.documentElement)\n      const bgSecondary = style.getPropertyValue('--bg-secondary').trim()\n      const textPrimary = style.getPropertyValue('--text-primary').trim()\n      const textSecondary = style.getPropertyValue('--text-secondary').trim()\n      const borderColor = style.getPropertyValue('--border-color').trim()\n      \n      this.chartOptions = {\n        ...this.chartOptions,\n        chart: {\n          ...this.chartOptions.chart,\n          background: bgSecondary,\n          foreColor: textSecondary\n        },\n        grid: {\n          ...this.chartOptions.grid,\n          borderColor: borderColor\n        },\n        colors: ['#2E93fA'],\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeColors: bgSecondary,\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          ...this.chartOptions.xaxis,\n          labels: {\n            style: {\n              colors: textSecondary,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: true,\n            stroke: {\n              color: borderColor,\n              width: 1,\n              dashArray: 3\n            }\n          }\n        },\n        yaxis: {\n          ...this.chartOptions.yaxis,\n          title: {\n            text: 'Ingresos ($)',\n            style: {\n              fontSize: '14px',\n              color: textSecondary\n            }\n          },\n          labels: {\n            style: {\n              colors: textSecondary\n            }\n          }\n        },\n        tooltip: {\n          theme: this.isDarkMode ? 'dark' : 'light',\n          shared: true,\n          intersect: false,\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        }\n      }\n    },\n  },\n  mounted() {\n    // Establecer el rango de fechas por defecto (Ãºltimos 30 dÃ­as)\n    const end = new Date()\n    const start = new Date()\n    start.setDate(start.getDate() - 30)\n    \n    this.startDate = start.toISOString().split('T')[0]\n    this.endDate = end.toISOString().split('T')[0]\n    this.dateRange = [start, end]\n    \n    this.loadData()\n    this.updateChartTheme()\n  }\n}\n</script>\n\n<style scoped>\n.revenue-chart {\n  background: var(--bg-secondary);\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: \n    0 2px 4px rgba(0, 0, 0, 0.05),\n    0 4px 8px rgba(0, 0, 0, 0.05),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\n  transform: translateY(0);\n  transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\n  position: relative;\n  background-image: linear-gradient(\n    to bottom,\n    rgba(255, 255, 255, 0.1) 0%,\n    rgba(255, 255, 255, 0) 20%\n  );\n}\n\n/* Efecto de elevaciÃ³n al pasar el mouse */\n.revenue-chart:hover {\n  transform: translateY(-5px);\n  box-shadow: \n    0 5px 10px rgba(0, 0, 0, 0.1),\n    0 10px 20px rgba(0, 0, 0, 0.1),\n    0 20px 40px rgba(0, 0, 0, 0.05),\n    inset 0 -2px 0 rgba(0, 0, 0, 0.1),\n    inset 0 2px 0 rgba(255, 255, 255, 0.1);\n}\n\n/* Efecto de presiÃ³n al hacer clic */\n.revenue-chart:active {\n  transform: translateY(-2px);\n  box-shadow: \n    0 2px 5px rgba(0, 0, 0, 0.1),\n    0 5px 10px rgba(0, 0, 0, 0.05),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  transition: all 0.1s cubic-bezier(0.165, 0.84, 0.44, 1);\n}\n\n/* AÃ±adir un pseudo-elemento para el efecto de brillo en el borde */\n.revenue-chart::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 1px;\n  background: linear-gradient(\n    to right,\n    rgba(255, 255, 255, 0) 0%,\n    rgba(255, 255, 255, 0.5) 50%,\n    rgba(255, 255, 255, 0) 100%\n  );\n  border-top-left-radius: 12px;\n  border-top-right-radius: 12px;\n}\n\n/* AÃ±adir un pseudo-elemento para el efecto de sombra en el borde inferior */\n.revenue-chart::after {\n  content: \"\";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 1px;\n  background: linear-gradient(\n    to right,\n    rgba(0, 0, 0, 0) 0%,\n    rgba(0, 0, 0, 0.2) 50%,\n    rgba(0, 0, 0, 0) 100%\n  );\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n}\n\n.chart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.chart-header h3 {\n  margin: 0;\n  font-size: 1.25rem;\n  color: var(--text-primary);\n}\n\n.chart-controls {\n  display: flex;\n  align-items: center;\n}\n\n.date-range-picker {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  background: var(--bg-secondary);\n  padding: 8px;\n  border-radius: 6px;\n  border: 1px solid var(--border-color);\n}\n\n.date-range-input {\n  padding: 8px 12px;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  font-size: 14px;\n  width: 250px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.date-range-input:hover {\n  border-color: var(--primary-color);\n}\n\n.date-range-input:focus {\n  outline: none;\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 2px rgba(46, 147, 250, 0.1);\n}\n\n.date-separator {\n  color: var(--text-secondary);\n  font-size: 0.9rem;\n}\n\n.chart-container {\n  position: relative;\n  min-height: 350px;\n  background: var(--bg-primary);\n}\n\n.loading-overlay {\n    position: absolute;\n  top: 0;\n    left: 0;\n    right: 0;\n  bottom: 0;\n  background: var(--bg-overlay);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 10;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid var(--spinner-track);\n  border-top-color: var(--spinner-color);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (max-width: 768px) {\n  .chart-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 15px;\n  }\n\n  .chart-controls {\n    flex-direction: column;\n    width: 100%;\n  }\n\n  .date-range-picker {\n    flex-direction: column;\n    width: 100%;\n  }\n\n  .date-input {\n    width: 100%;\n  }\n}\n\n:deep(.apexcharts-canvas) {\n  background: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-svg) {\n  background: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-plot-area) {\n  fill: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-grid) {\n  background: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-gridlines-horizontal),\n:deep(.apexcharts-gridlines-vertical) {\n  stroke: var(--border-color) !important;\n}\n\n:deep(.apexcharts-plot-background) {\n  fill: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-inner) {\n  background: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-area-series) path {\n  fill-opacity: 0.5;\n}\n\n:deep(.apexcharts-tooltip) {\n  background: var(--bg-secondary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-tooltip-title) {\n  background: var(--bg-tertiary) !important;\n  border-bottom: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-xaxistooltip) {\n  background: var(--bg-secondary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n\n:deep(.flatpickr-calendar) {\n  background: var(--bg-secondary);\n  border-color: var(--border-color);\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n:deep(.flatpickr-day) {\n  color: var(--text-primary);\n}\n\n:deep(.flatpickr-day.selected) {\n  background: var(--primary-color);\n  border-color: var(--primary-color);\n}\n\n:deep(.flatpickr-day.inRange) {\n  background: rgba(46, 147, 250, 0.1);\n  border-color: rgba(46, 147, 250, 0.1);\n}\n\n:deep(.flatpickr-day:hover) {\n  background: rgba(46, 147, 250, 0.1);\n}\n\n:deep(.flatpickr-months .flatpickr-month) {\n  color: var(--text-primary);\n}\n\n:deep(.flatpickr-current-month .flatpickr-monthDropdown-months) {\n  color: var(--text-primary);\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAmB;;EAY7BA,KAAK,EAAC;AAAiB;;EAjBhCC,GAAA;EAkB4BD,KAAK,EAAC;;;;;uBAjBhCE,mBAAA,CA2BM,OA3BNC,UA2BM,GA1BJC,mBAAA,CAaM,OAbNC,UAaM,G,0BAZJD,mBAAA,CAAiB,YAAb,UAAQ,sBACZA,mBAAA,CAUM,OAVNE,UAUM,GATJF,mBAAA,CAQM,OARNG,UAQM,GAPJC,YAAA,CAMEC,qBAAA;IAZZC,UAAA,EAOqBC,KAAA,CAAAC,SAAS;IAP9B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOqBH,KAAA,CAAAC,SAAS,GAAAE,MAAA;IACjBC,MAAM,EAAEJ,KAAA,CAAAK,eAAe;IACvBC,UAAS,EAAEC,QAAA,CAAAC,iBAAiB;IAC7BC,WAAW,EAAC,6BAA6B;IACzCpB,KAAK,EAAC;yEAMdI,mBAAA,CAUM,OAVNiB,UAUM,GATOV,KAAA,CAAAW,SAAS,I,cAApBpB,mBAAA,CAEc,OAFdqB,UAEc,EAAAV,MAAA,QAAAA,MAAA,OADZT,mBAAA,CAAmC;IAA9BJ,KAAK,EAAC;EAAiB,2B,MAnBpCwB,mBAAA,gBAqBMhB,YAAA,CAKaiB,oBAAA;IAJXC,IAAI,EAAC,MAAM;IACXC,MAAM,EAAC,KAAK;IACXC,OAAO,EAAEjB,KAAA,CAAAkB,YAAY;IACrBC,MAAM,EAAEnB,KAAA,CAAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}