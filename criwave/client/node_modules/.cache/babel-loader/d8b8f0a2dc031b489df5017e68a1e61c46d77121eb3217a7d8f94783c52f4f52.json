{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"date-range-chart\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"date-controls\"\n};\nconst _hoisted_4 = {\n  class: \"date-picker-container\"\n};\nconst _hoisted_5 = [\"max\"];\nconst _hoisted_6 = [\"min\", \"max\"];\nconst _hoisted_7 = [\"disabled\"];\nconst _hoisted_8 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_10 = {\n  key: 2,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"h3\", null, \"Ventas por Rango de Fecha\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.startDate = $event),\n    max: _ctx.endDate,\n    class: \"date-input\",\n    placeholder: \"Fecha inicial\"\n  }, null, 8 /* PROPS */, _hoisted_5), [[_vModelText, _ctx.startDate]]), _cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n    class: \"date-separator\"\n  }, \"hasta\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.endDate = $event),\n    min: _ctx.startDate,\n    max: _ctx.today,\n    class: \"date-input\",\n    placeholder: \"Fecha final\"\n  }, null, 8 /* PROPS */, _hoisted_6), [[_vModelText, _ctx.endDate]])]), _createElementVNode(\"button\", {\n    class: \"update-button\",\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.onDateChange && _ctx.onDateChange(...args)),\n    disabled: !_ctx.startDate || !_ctx.endDate\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"span\", {\n    class: \"button-text\"\n  }, \"Actualizar\", -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_7)])]), _ctx.hasDateRange ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, _cache[6] || (_cache[6] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _ctx.hasData ? (_openBlock(), _createBlock(_component_apexchart, {\n    key: 1,\n    type: \"area\",\n    height: \"350\",\n    options: _ctx.chartOptions,\n    series: _ctx.series\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])) : !_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, \" Selecciona un rango de fechas para visualizar los datos \")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","type","_cache","$event","_ctx","startDate","max","endDate","placeholder","_hoisted_5","min","today","_hoisted_6","onClick","args","onDateChange","disabled","_hoisted_7","hasDateRange","_hoisted_8","isLoading","_hoisted_9","_createCommentVNode","hasData","_createBlock","_component_apexchart","height","options","chartOptions","series","_hoisted_10"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\DateRangeChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"date-range-chart\">\r\n    <div class=\"chart-header\">\r\n      <h3>Ventas por Rango de Fecha</h3>\r\n      <div class=\"date-controls\">\r\n        <div class=\"date-picker-container\">\r\n          <input \r\n            type=\"date\" \r\n            v-model=\"startDate\" \r\n            :max=\"endDate\"\r\n            class=\"date-input\"\r\n            placeholder=\"Fecha inicial\"\r\n          >\r\n          <span class=\"date-separator\">hasta</span>\r\n          <input \r\n            type=\"date\" \r\n            v-model=\"endDate\" \r\n            :min=\"startDate\"\r\n            :max=\"today\"\r\n            class=\"date-input\"\r\n            placeholder=\"Fecha final\"\r\n          >\r\n        </div>\r\n        <button \r\n          class=\"update-button\" \r\n          @click=\"onDateChange\"\r\n          :disabled=\"!startDate || !endDate\"\r\n        >\r\n          <span class=\"button-text\">Actualizar</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n      \r\n    <div class=\"chart-container\" v-if=\"hasDateRange\">\r\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n        <div class=\"loading-spinner\"></div>\r\n      </div>\r\n      <apexchart\r\n        v-if=\"hasData\"\r\n        type=\"area\"\r\n        height=\"350\"\r\n        :options=\"chartOptions\"\r\n        :series=\"series\"\r\n      ></apexchart>\r\n      <div v-else-if=\"!isLoading\" class=\"no-data-message\">\r\n        Selecciona un rango de fechas para visualizar los datos\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport VueApexCharts from 'vue3-apexcharts'\r\n\r\nexport default defineComponent({\r\n  name: 'DateRangeChart',\r\n  components: {\r\n    apexchart: VueApexCharts\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      startDate: '',\r\n      endDate: '',\r\n      today: new Date().toISOString().split('T')[0],\r\n      isLoading: false,\r\n      isDarkMode: false,\r\n      series: [{\r\n        name: 'Ventas',\r\n        data: []\r\n      }],\r\n      chartOptions: {\r\n        chart: {\r\n          type: 'area',\r\n          height: 350,\r\n          background: 'transparent',\r\n          foreColor: '#666',\r\n          toolbar: {\r\n            show: true,\r\n            tools: {\r\n              download: true,\r\n              selection: true,\r\n              zoom: true,\r\n              zoomin: true,\r\n              zoomout: true,\r\n              pan: true,\r\n              reset: true\r\n            }\r\n          },\r\n          animations: {\r\n            enabled: true,\r\n            easing: 'easeinout',\r\n            speed: 800,\r\n            animateGradually: {\r\n              enabled: true,\r\n              delay: 150\r\n            },\r\n            dynamicAnimation: {\r\n              enabled: true,\r\n              speed: 350\r\n            }\r\n          }\r\n        },\r\n        colors: ['#2E93fA'],\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            shadeIntensity: 1,\r\n            opacityFrom: 0.45,\r\n            opacityTo: 0.05,\r\n            stops: [0, 95, 100]\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          curve: 'smooth',\r\n          width: 2\r\n        },\r\n        grid: {\r\n          show: true,\r\n          borderColor: '#f1f1f1',\r\n          strokeDashArray: 3,\r\n          position: 'back'\r\n        },\r\n        markers: {\r\n          size: 4,\r\n          colors: ['#2E93fA'],\r\n          strokeWidth: 2,\r\n          hover: {\r\n            size: 7\r\n          }\r\n        },\r\n        xaxis: {\r\n          type: 'datetime',\r\n          labels: {\r\n            style: {\r\n              colors: '#666',\r\n              fontSize: '12px'\r\n            }\r\n          },\r\n          axisBorder: {\r\n            show: false\r\n          },\r\n          axisTicks: {\r\n            show: false\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Ventas ($)',\r\n            style: {\r\n              fontSize: '14px',\r\n              color: '#666'\r\n            }\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: '#666'\r\n            },\r\n            formatter: function(value) {\r\n              return new Intl.NumberFormat('es-MX', {\r\n                style: 'currency',\r\n                currency: 'MXN'\r\n              }).format(value)\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          shared: true,\r\n          intersect: false,\r\n          y: {\r\n            formatter: function(value) {\r\n              return new Intl.NumberFormat('es-MX', {\r\n                style: 'currency',\r\n                currency: 'MXN'\r\n              }).format(value)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    hasDateRange() {\r\n      return this.startDate && this.endDate\r\n    },\r\n    hasData() {\r\n      return this.series[0].data.length > 0\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.checkDarkMode()\r\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', this.checkDarkMode)\r\n  },\r\n  \r\n  beforeUnmount() {\r\n    window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', this.checkDarkMode)\r\n  },\r\n  \r\n  methods: {\r\n    checkDarkMode() {\r\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme')\r\n      this.updateChartTheme()\r\n    },\r\n\r\n    updateChartTheme() {\r\n      const style = getComputedStyle(document.documentElement)\r\n      const bgSecondary = style.getPropertyValue('--bg-secondary').trim()\r\n      const textSecondary = style.getPropertyValue('--text-secondary').trim()\r\n      const borderColor = style.getPropertyValue('--border-color').trim()\r\n      \r\n      this.chartOptions = {\r\n        ...this.chartOptions,\r\n        chart: {\r\n          ...this.chartOptions.chart,\r\n          background: bgSecondary,\r\n          foreColor: textSecondary\r\n        },\r\n        grid: {\r\n          ...this.chartOptions.grid,\r\n          borderColor: borderColor\r\n        },\r\n        xaxis: {\r\n          ...this.chartOptions.xaxis,\r\n          labels: {\r\n            style: {\r\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          ...this.chartOptions.yaxis,\r\n          title: {\r\n            style: {\r\n              color: this.isDarkMode ? '#e0e0e0' : '#666'\r\n            }\r\n          },\r\n          labels: {\r\n            style: {\r\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          theme: this.isDarkMode ? 'dark' : 'light'\r\n        }\r\n      }\r\n    },\r\n\r\n    async loadData() {\r\n      if (!this.hasDateRange) return\r\n\r\n      this.isLoading = true\r\n      // Resetear los datos actuales\r\n      this.series[0].data = []\r\n      \r\n      try {\r\n        const start = new Date(this.startDate)\r\n        const end = new Date(this.endDate)\r\n        const diffDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24))\r\n        \r\n        const data = []\r\n        let currentValue = Math.floor(Math.random() * 500000) + 100000\r\n        \r\n        for (let i = 0; i <= diffDays; i++) {\r\n          const date = new Date(start)\r\n          date.setDate(start.getDate() + i)\r\n          \r\n          const variation = (Math.random() * 0.2) - 0.1\r\n          currentValue = Math.floor(currentValue * (1 + variation))\r\n          currentValue = Math.max(currentValue, 100000)\r\n          \r\n          data.push([\r\n            date.getTime(),\r\n            currentValue\r\n          ])\r\n        }\r\n        \r\n        // Actualizar los datos con un pequeño retraso para asegurar la re-renderización\r\n        setTimeout(() => {\r\n          this.series = [{\r\n            name: 'Ventas',\r\n            data: data\r\n          }]\r\n          this.isLoading = false\r\n        }, 300)\r\n        \r\n      } catch (error) {\r\n        console.error('Error loading data:', error)\r\n        this.isLoading = false\r\n      }\r\n    },\r\n\r\n    onDateChange() {\r\n      if (!this.startDate || !this.endDate) return\r\n      \r\n      const start = new Date(this.startDate)\r\n      const end = new Date(this.endDate)\r\n      const today = new Date()\r\n\r\n      if (start > end) {\r\n        this.startDate = this.endDate\r\n        return\r\n      }\r\n\r\n      if (end > today) {\r\n        this.endDate = today.toISOString().split('T')[0]\r\n        return\r\n      }\r\n\r\n      // Forzar la actualización de los datos\r\n      this.series[0].data = []\r\n      this.$nextTick(() => {\r\n        this.loadData()\r\n      })\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.date-range-chart {\r\n  background: var(--bg-secondary);\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.date-controls {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.date-picker-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.date-input {\r\n  padding: 8px 12px;\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 6px;\r\n  background: var(--bg-primary);\r\n  color: var(--text-primary);\r\n  font-size: 0.9rem;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.date-input:hover {\r\n  border-color: var(--border-hover);\r\n}\r\n\r\n.date-input:focus {\r\n  outline: none;\r\n  border-color: var(--primary);\r\n  box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);\r\n}\r\n\r\n.date-separator {\r\n  color: var(--text-secondary);\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  min-height: 350px;\r\n  background: var(--bg-primary);\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: var(--bg-overlay);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 3px solid var(--spinner-track);\r\n  border-top-color: var(--spinner-color);\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.no-data-message {\r\n  height: 350px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: var(--text-secondary);\r\n  font-size: 1.1rem;\r\n}\r\n\r\n@keyframes spin {\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chart-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 15px;\r\n  }\r\n\r\n  .date-controls {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n\r\n  .date-picker-container {\r\n    width: 100%;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .date-input {\r\n    width: 100%;\r\n  }\r\n\r\n  .update-button {\r\n    width: 100%;\r\n    margin-top: 10px;\r\n  }\r\n}\r\n\r\n:deep(.apexcharts-canvas) {\r\n  background: var(--bg-secondary) !important;\r\n}\r\n\r\n:deep(.apexcharts-tooltip) {\r\n  background: var(--bg-secondary) !important;\r\n  border: 1px solid var(--border-color) !important;\r\n}\r\n\r\n:deep(.apexcharts-tooltip-title) {\r\n  background: var(--bg-tertiary) !important;\r\n  border-bottom: 1px solid var(--border-color) !important;\r\n}\r\n\r\n:deep(.apexcharts-xaxistooltip) {\r\n  background: var(--bg-secondary) !important;\r\n  border: 1px solid var(--border-color) !important;\r\n}\r\n\r\n.update-button {\r\n  padding: 8px 16px;\r\n  background: var(--primary);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 6px;\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-width: 100px;\r\n}\r\n\r\n.update-button:hover:not(:disabled) {\r\n  background: var(--primary-dark);\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.update-button:disabled {\r\n  background: var(--disabled);\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.button-text {\r\n  font-weight: 500;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAuB;mBAL1C;mBAAA;mBAAA;;EAAAC,GAAA;EAiCSD,KAAK,EAAC;;;EAjCfC,GAAA;EAkC4BD,KAAK,EAAC;;;EAlClCC,GAAA;EA4CkCD,KAAK,EAAC;;;;uBA3CtCE,mBAAA,CA+CM,OA/CNC,UA+CM,GA9CJC,mBAAA,CA6BM,OA7BNC,UA6BM,G,0BA5BJD,mBAAA,CAAkC,YAA9B,2BAAyB,sBAC7BA,mBAAA,CA0BM,OA1BNE,UA0BM,GAzBJF,mBAAA,CAiBM,OAjBNG,UAiBM,G,gBAhBJH,mBAAA,CAMC;IALCI,IAAI,EAAC,MAAM;IAPvB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAQqBC,IAAA,CAAAC,SAAS,GAAAF,MAAA;IACjBG,GAAG,EAAEF,IAAA,CAAAG,OAAO;IACbd,KAAK,EAAC,YAAY;IAClBe,WAAW,EAAC;0BAXxBC,UAAA,I,cAQqBL,IAAA,CAAAC,SAAS,E,6BAKpBR,mBAAA,CAAyC;IAAnCJ,KAAK,EAAC;EAAgB,GAAC,OAAK,sB,gBAClCI,mBAAA,CAOC;IANCI,IAAI,EAAC,MAAM;IAfvB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAgBqBC,IAAA,CAAAG,OAAO,GAAAJ,MAAA;IACfO,GAAG,EAAEN,IAAA,CAAAC,SAAS;IACdC,GAAG,EAAEF,IAAA,CAAAO,KAAK;IACXlB,KAAK,EAAC,YAAY;IAClBe,WAAW,EAAC;0BApBxBI,UAAA,I,cAgBqBR,IAAA,CAAAG,OAAO,E,KAOpBV,mBAAA,CAMS;IALPJ,KAAK,EAAC,eAAe;IACpBoB,OAAK,EAAAX,MAAA,QAAAA,MAAA,UAAAY,IAAA,KAAEV,IAAA,CAAAW,YAAA,IAAAX,IAAA,CAAAW,YAAA,IAAAD,IAAA,CAAY;IACnBE,QAAQ,GAAGZ,IAAA,CAAAC,SAAS,KAAKD,IAAA,CAAAG;gCAE1BV,mBAAA,CAA2C;IAArCJ,KAAK,EAAC;EAAa,GAAC,YAAU,oB,kBA5B9CwB,UAAA,E,KAiCuCb,IAAA,CAAAc,YAAY,I,cAA/CvB,mBAAA,CAcM,OAdNwB,UAcM,GAbOf,IAAA,CAAAgB,SAAS,I,cAApBzB,mBAAA,CAEM,OAFN0B,UAEM,EAAAnB,MAAA,QAAAA,MAAA,OADJL,mBAAA,CAAmC;IAA9BJ,KAAK,EAAC;EAAiB,2B,MAnCpC6B,mBAAA,gBAsCclB,IAAA,CAAAmB,OAAO,I,cADfC,YAAA,CAMaC,oBAAA;IA3CnB/B,GAAA;IAuCQO,IAAI,EAAC,MAAM;IACXyB,MAAM,EAAC,KAAK;IACXC,OAAO,EAAEvB,IAAA,CAAAwB,YAAY;IACrBC,MAAM,EAAEzB,IAAA,CAAAyB;qDAEMzB,IAAA,CAAAgB,SAAS,I,cAA1BzB,mBAAA,CAEM,OAFNmC,WAEM,EAF8C,2DAEpD,KA9CNR,mBAAA,e,KAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}