{"ast":null,"code":"import { useChartData } from '../../composables/useChartData';\nimport ChartSkeleton from '../ui/ChartSkeleton.vue';\nexport default {\n  name: 'ChartCard',\n  components: {\n    ChartSkeleton\n  },\n  props: {\n    /**\r\n     * Título del gráfico\r\n     */\n    title: {\n      type: String,\n      required: true\n    },\n    /**\r\n     * Tipo de datos que mostrará el gráfico\r\n     * (ej: 'ventasDiarias', 'ventasSemanales', etc.)\r\n     */\n    dataType: {\n      type: String,\n      required: true\n    },\n    /**\r\n     * Si se debe cargar solo cuando sea visible\r\n     */\n    loadOnVisible: {\n      type: Boolean,\n      default: true\n    },\n    /**\r\n     * Si se debe permitir la actualización manual\r\n     */\n    allowRefresh: {\n      type: Boolean,\n      default: true\n    },\n    /**\r\n     * Si se debe actualizar automáticamente\r\n     */\n    autoRefresh: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * Intervalo de actualización automática en ms\r\n     */\n    refreshInterval: {\n      type: Number,\n      default: 60000 // 1 minuto\n    },\n    /**\r\n     * Tamaño del skeleton\r\n     */\n    skeletonSize: {\n      type: String,\n      default: 'medium'\n    }\n  },\n  setup(props) {\n    // Usar el composable para gestionar los datos del gráfico\n    const {\n      chartData,\n      isLoading,\n      error,\n      setupObserver,\n      refresh\n    } = useChartData(props.dataType, {\n      loadOnVisible: props.loadOnVisible,\n      autoRefresh: props.autoRefresh,\n      refreshInterval: props.refreshInterval\n    });\n    return {\n      chartData,\n      isLoading,\n      error,\n      setupObserver,\n      refresh\n    };\n  },\n  mounted() {\n    // Configurar el observador para cargar cuando sea visible\n    if (this.loadOnVisible) {\n      this.setupObserver(this.$refs.chartRef);\n    }\n  }\n};","map":{"version":3,"names":["useChartData","ChartSkeleton","name","components","props","title","type","String","required","dataType","loadOnVisible","Boolean","default","allowRefresh","autoRefresh","refreshInterval","Number","skeletonSize","setup","chartData","isLoading","error","setupObserver","refresh","mounted","$refs","chartRef"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\ChartCard.vue"],"sourcesContent":["<template>\r\n  <div \r\n    class=\"chart-card\" \r\n    :class=\"{ 'is-loading': isLoading }\"\r\n    ref=\"chartRef\"\r\n  >\r\n    <div class=\"chart-header\">\r\n      <h3 class=\"chart-title\">{{ title }}</h3>\r\n      <div class=\"chart-actions\">\r\n        <button \r\n          v-if=\"allowRefresh\" \r\n          class=\"refresh-btn\" \r\n          @click=\"refresh\"\r\n          :disabled=\"isLoading\"\r\n          title=\"Actualizar datos\"\r\n        >\r\n          <i class=\"material-icons\">refresh</i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Mostrar skeleton mientras carga -->\r\n    <chart-skeleton \r\n      v-if=\"isLoading\" \r\n      :size=\"skeletonSize\"\r\n    />\r\n    \r\n    <!-- Mostrar contenido del gráfico cuando está cargado -->\r\n    <div v-else class=\"chart-content\">\r\n      <!-- Aquí iría el componente de gráfico específico -->\r\n      <slot :data=\"chartData\"></slot>\r\n      \r\n      <!-- Mensaje cuando no hay datos -->\r\n      <div v-if=\"!chartData || !chartData.length\" class=\"no-data-message\">\r\n        No hay datos disponibles\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { useChartData } from '../../composables/useChartData';\r\nimport ChartSkeleton from '../ui/ChartSkeleton.vue';\r\n\r\nexport default {\r\n  name: 'ChartCard',\r\n  \r\n  components: {\r\n    ChartSkeleton\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Título del gráfico\r\n     */\r\n    title: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    \r\n    /**\r\n     * Tipo de datos que mostrará el gráfico\r\n     * (ej: 'ventasDiarias', 'ventasSemanales', etc.)\r\n     */\r\n    dataType: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    \r\n    /**\r\n     * Si se debe cargar solo cuando sea visible\r\n     */\r\n    loadOnVisible: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    \r\n    /**\r\n     * Si se debe permitir la actualización manual\r\n     */\r\n    allowRefresh: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    \r\n    /**\r\n     * Si se debe actualizar automáticamente\r\n     */\r\n    autoRefresh: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    \r\n    /**\r\n     * Intervalo de actualización automática en ms\r\n     */\r\n    refreshInterval: {\r\n      type: Number,\r\n      default: 60000 // 1 minuto\r\n    },\r\n    \r\n    /**\r\n     * Tamaño del skeleton\r\n     */\r\n    skeletonSize: {\r\n      type: String,\r\n      default: 'medium'\r\n    }\r\n  },\r\n  \r\n  setup(props) {\r\n    // Usar el composable para gestionar los datos del gráfico\r\n    const { \r\n      chartData, \r\n      isLoading, \r\n      error,\r\n      setupObserver,\r\n      refresh \r\n    } = useChartData(props.dataType, {\r\n      loadOnVisible: props.loadOnVisible,\r\n      autoRefresh: props.autoRefresh,\r\n      refreshInterval: props.refreshInterval\r\n    });\r\n    \r\n    return {\r\n      chartData,\r\n      isLoading,\r\n      error,\r\n      setupObserver,\r\n      refresh\r\n    };\r\n  },\r\n  \r\n  mounted() {\r\n    // Configurar el observador para cargar cuando sea visible\r\n    if (this.loadOnVisible) {\r\n      this.setupObserver(this.$refs.chartRef);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chart-card {\r\n  background-color: var(--bg-primary, #ffffff);\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\r\n  padding: 16px;\r\n  overflow: hidden;\r\n  height: 100%;\r\n  transition: box-shadow 0.3s ease;\r\n}\r\n\r\n.chart-card:hover {\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.chart-title {\r\n  margin: 0;\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  color: var(--text-primary);\r\n}\r\n\r\n.chart-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.refresh-btn {\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-secondary);\r\n  cursor: pointer;\r\n  border-radius: 50%;\r\n  width: 32px;\r\n  height: 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.refresh-btn:hover {\r\n  background-color: var(--bg-hover);\r\n  color: var(--primary);\r\n}\r\n\r\n.refresh-btn:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.chart-content {\r\n  height: calc(100% - 50px);\r\n  min-height: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.no-data-message {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  color: var(--text-secondary);\r\n  font-style: italic;\r\n  text-align: center;\r\n}\r\n\r\n.is-loading {\r\n  pointer-events: none;\r\n}\r\n</style> "],"mappings":"AAyCA,SAASA,YAAW,QAAS,gCAAgC;AAC7D,OAAOC,aAAY,MAAO,yBAAyB;AAEnD,eAAe;EACbC,IAAI,EAAE,WAAW;EAEjBC,UAAU,EAAE;IACVF;EACF,CAAC;EAEDG,KAAK,EAAE;IACL;;;IAGAC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IAED;;;;IAIAC,QAAQ,EAAE;MACRH,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IAED;;;IAGAE,aAAa,EAAE;MACbJ,IAAI,EAAEK,OAAO;MACbC,OAAO,EAAE;IACX,CAAC;IAED;;;IAGAC,YAAY,EAAE;MACZP,IAAI,EAAEK,OAAO;MACbC,OAAO,EAAE;IACX,CAAC;IAED;;;IAGAE,WAAW,EAAE;MACXR,IAAI,EAAEK,OAAO;MACbC,OAAO,EAAE;IACX,CAAC;IAED;;;IAGAG,eAAe,EAAE;MACfT,IAAI,EAAEU,MAAM;MACZJ,OAAO,EAAE,KAAI,CAAE;IACjB,CAAC;IAED;;;IAGAK,YAAY,EAAE;MACZX,IAAI,EAAEC,MAAM;MACZK,OAAO,EAAE;IACX;EACF,CAAC;EAEDM,KAAKA,CAACd,KAAK,EAAE;IACX;IACA,MAAM;MACJe,SAAS;MACTC,SAAS;MACTC,KAAK;MACLC,aAAa;MACbC;IACF,IAAIvB,YAAY,CAACI,KAAK,CAACK,QAAQ,EAAE;MAC/BC,aAAa,EAAEN,KAAK,CAACM,aAAa;MAClCI,WAAW,EAAEV,KAAK,CAACU,WAAW;MAC9BC,eAAe,EAAEX,KAAK,CAACW;IACzB,CAAC,CAAC;IAEF,OAAO;MACLI,SAAS;MACTC,SAAS;MACTC,KAAK;MACLC,aAAa;MACbC;IACF,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,IAAI,CAACd,aAAa,EAAE;MACtB,IAAI,CAACY,aAAa,CAAC,IAAI,CAACG,KAAK,CAACC,QAAQ,CAAC;IACzC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}