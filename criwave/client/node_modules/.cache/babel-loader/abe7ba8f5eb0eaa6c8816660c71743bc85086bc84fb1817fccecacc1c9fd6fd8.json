{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"revenue-chart-container\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"chart-title-section\"\n};\nconst _hoisted_4 = {\n  class: \"revenue-amount\"\n};\nconst _hoisted_5 = {\n  class: \"change-value\"\n};\nconst _hoisted_6 = {\n  class: \"period-selector\"\n};\nconst _hoisted_7 = {\n  class: \"period-button active\"\n};\nconst _hoisted_8 = {\n  class: \"chart-content\"\n};\nconst _hoisted_9 = {\n  class: \"chart-axes\"\n};\nconst _hoisted_10 = {\n  class: \"y-axis\"\n};\nconst _hoisted_11 = {\n  class: \"chart-svg\",\n  ref: \"chartSvg\",\n  width: \"100%\",\n  height: \"100%\"\n};\nconst _hoisted_12 = {\n  id: \"areaGradient\",\n  x1: \"0%\",\n  y1: \"0%\",\n  x2: \"0%\",\n  y2: \"100%\"\n};\nconst _hoisted_13 = [\"stop-color\"];\nconst _hoisted_14 = [\"stop-color\"];\nconst _hoisted_15 = [\"d\"];\nconst _hoisted_16 = [\"d\", \"stroke\"];\nconst _hoisted_17 = [\"x1\", \"y1\", \"x2\", \"y2\", \"stroke\"];\nconst _hoisted_18 = [\"cx\", \"cy\", \"fill\"];\nconst _hoisted_19 = [\"width\", \"height\"];\nconst _hoisted_20 = {\n  class: \"x-axis\"\n};\nconst _hoisted_21 = {\n  class: \"tooltip-title\"\n};\nconst _hoisted_22 = {\n  class: \"tooltip-value\"\n};\nconst _hoisted_23 = {\n  class: \"tooltip-accumulated\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_icon = _resolveComponent(\"icon\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", {\n    class: \"chart-title\"\n  }, \"Total Ingresos\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, \"$\" + _toDisplayString($options.formattedTotalRevenue), 1 /* TEXT */), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"change-indicator\", {\n      'positive': $options.totalChange > 0,\n      'negative': $options.totalChange < 0\n    }])\n  }, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString($options.totalChange > 0 ? '+' : '') + _toDisplayString($options.formattedTotalChange) + \" (\" + _toDisplayString($options.formattedChangePercent) + \"%)\", 1 /* TEXT */), _cache[4] || (_cache[4] = _createElementVNode(\"span\", {\n    class: \"period\"\n  }, \"· últimos 12 meses\", -1 /* HOISTED */))], 2 /* CLASS */)]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", _hoisted_7, [_cache[6] || (_cache[6] = _createTextVNode(\" Últimos 12 meses \")), _createVNode(_component_icon, {\n    name: \"arrow_drop_down\"\n  })])])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.yAxisLabels, (value, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"axis-label\",\n      key: index\n    }, _toDisplayString(value), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", {\n    class: \"chart-graphic\",\n    ref: \"chartContainer\",\n    onMousemove: _cache[0] || (_cache[0] = (...args) => $options.handleMouseMove && $options.handleMouseMove(...args)),\n    onMouseleave: _cache[1] || (_cache[1] = (...args) => $options.resetHighlight && $options.resetHighlight(...args)),\n    onTouchmove: _cache[2] || (_cache[2] = (...args) => $options.handleTouchMove && $options.handleTouchMove(...args)),\n    onTouchend: _cache[3] || (_cache[3] = (...args) => $options.resetHighlight && $options.resetHighlight(...args))\n  }, [_createCommentVNode(\" La gráfica SVG se generará aquí \"), (_openBlock(), _createElementBlock(\"svg\", _hoisted_11, [_createElementVNode(\"defs\", null, [_createElementVNode(\"linearGradient\", _hoisted_12, [_createElementVNode(\"stop\", {\n    offset: \"0%\",\n    \"stop-color\": $options.chartGradientTop,\n    \"stop-opacity\": \"0.6\"\n  }, null, 8 /* PROPS */, _hoisted_13), _createElementVNode(\"stop\", {\n    offset: \"100%\",\n    \"stop-color\": $options.chartGradientBottom,\n    \"stop-opacity\": \"0.05\"\n  }, null, 8 /* PROPS */, _hoisted_14)])]), _createElementVNode(\"path\", {\n    d: $options.areaPath,\n    fill: \"url(#areaGradient)\"\n  }, null, 8 /* PROPS */, _hoisted_15), _createElementVNode(\"path\", {\n    d: $options.linePath,\n    fill: \"none\",\n    stroke: $options.chartLineColor,\n    \"stroke-width\": \"2\"\n  }, null, 8 /* PROPS */, _hoisted_16), _createCommentVNode(\" Línea vertical para el punto actual \"), $options.currentPoint && $data.mouseOver ? (_openBlock(), _createElementBlock(\"line\", {\n    key: 0,\n    x1: $options.currentPoint.x,\n    y1: $data.chartHeight,\n    x2: $options.currentPoint.x,\n    y2: $options.currentPoint.y,\n    stroke: $options.chartLineColor,\n    \"stroke-width\": \"1\",\n    \"stroke-dasharray\": \"2,2\"\n  }, null, 8 /* PROPS */, _hoisted_17)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Círculo indicador (solo aparece cuando el mouse está sobre el gráfico) \"), $options.currentPoint && $data.mouseOver ? (_openBlock(), _createElementBlock(\"circle\", {\n    key: 1,\n    cx: $options.currentPoint.x,\n    cy: $options.currentPoint.y,\n    r: \"6\",\n    fill: $options.chartLineColor,\n    stroke: \"#1a1a1a\",\n    \"stroke-width\": \"2\",\n    class: \"hover-point\"\n  }, null, 8 /* PROPS */, _hoisted_18)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Área interactiva transparente para detectar movimiento del mouse \"), _createElementVNode(\"rect\", {\n    class: \"interaction-overlay\",\n    width: $data.chartWidth,\n    height: $data.chartHeight,\n    fill: \"transparent\",\n    style: {\n      \"pointer-events\": \"all\"\n    }\n  }, null, 8 /* PROPS */, _hoisted_19)], 512 /* NEED_PATCH */)), _createCommentVNode(\" Eje X con los meses \"), _createElementVNode(\"div\", _hoisted_20, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.monthLabels, (month, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"x-label\", {\n        'active': $data.currentMonthIndex === index && $data.mouseOver\n      }]),\n      key: index,\n      style: _normalizeStyle({\n        left: `${index / ($data.monthLabels.length - 1) * 100}%`\n      })\n    }, _toDisplayString(month), 7 /* TEXT, CLASS, STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Tooltip que sigue al mouse \"), $options.currentPoint && $data.mouseOver ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"tooltip\",\n    style: _normalizeStyle($options.tooltipStyle)\n  }, [_createElementVNode(\"div\", _hoisted_21, _toDisplayString($options.currentPointLabel), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_22, \"$\" + _toDisplayString($options.formatCurrency($options.currentPoint.value)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_23, \"Acumulado: $\" + _toDisplayString($options.formatCurrency($options.currentPointAccumulated)), 1 /* TEXT */)], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true)], 544 /* NEED_HYDRATION, NEED_PATCH */)])]);\n}","map":{"version":3,"names":["class","ref","width","height","id","x1","y1","x2","y2","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$options","formattedTotalRevenue","_normalizeClass","totalChange","_hoisted_5","formattedTotalChange","formattedChangePercent","_hoisted_6","_hoisted_7","_createTextVNode","_createVNode","_component_icon","name","_hoisted_8","_hoisted_9","_hoisted_10","_Fragment","_renderList","$data","yAxisLabels","value","index","key","onMousemove","_cache","args","handleMouseMove","onMouseleave","resetHighlight","onTouchmove","handleTouchMove","onTouchend","_createCommentVNode","_hoisted_11","_hoisted_12","offset","chartGradientTop","_hoisted_13","chartGradientBottom","_hoisted_14","d","areaPath","fill","_hoisted_15","linePath","stroke","chartLineColor","_hoisted_16","currentPoint","mouseOver","x","chartHeight","y","_hoisted_17","cx","cy","r","_hoisted_18","chartWidth","style","_hoisted_19","_hoisted_20","monthLabels","month","currentMonthIndex","_normalizeStyle","left","length","tooltipStyle","_hoisted_21","currentPointLabel","_hoisted_22","formatCurrency","_hoisted_23","currentPointAccumulated"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"revenue-chart-container\">\r\n    <div class=\"chart-header\">\r\n      <div class=\"chart-title-section\">\r\n        <h2 class=\"chart-title\">Total Ingresos</h2>\r\n        <div class=\"revenue-amount\">${{ formattedTotalRevenue }}</div>\r\n        <div class=\"change-indicator\" :class=\"{ 'positive': totalChange > 0, 'negative': totalChange < 0 }\">\r\n          <span class=\"change-value\">{{ totalChange > 0 ? '+' : '' }}{{ formattedTotalChange }} ({{ formattedChangePercent }}%)</span>\r\n          <span class=\"period\">· últimos 12 meses</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"period-selector\">\r\n        <button class=\"period-button active\">\r\n          Últimos 12 meses\r\n          <icon name=\"arrow_drop_down\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"chart-content\">\r\n      <div class=\"chart-axes\">\r\n        <div class=\"y-axis\">\r\n          <div class=\"axis-label\" v-for=\"(value, index) in yAxisLabels\" :key=\"index\">\r\n            {{ value }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"chart-graphic\" ref=\"chartContainer\" \r\n           @mousemove=\"handleMouseMove\"\r\n           @mouseleave=\"resetHighlight\" \r\n           @touchmove=\"handleTouchMove\"\r\n           @touchend=\"resetHighlight\">\r\n        <!-- La gráfica SVG se generará aquí -->\r\n        <svg class=\"chart-svg\" ref=\"chartSvg\" width=\"100%\" height=\"100%\">\r\n          <defs>\r\n            <linearGradient id=\"areaGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n              <stop offset=\"0%\" :stop-color=\"chartGradientTop\" stop-opacity=\"0.6\" />\r\n              <stop offset=\"100%\" :stop-color=\"chartGradientBottom\" stop-opacity=\"0.05\" />\r\n            </linearGradient>\r\n          </defs>\r\n          <path :d=\"areaPath\" fill=\"url(#areaGradient)\" />\r\n          <path :d=\"linePath\" fill=\"none\" :stroke=\"chartLineColor\" stroke-width=\"2\" />\r\n          \r\n          <!-- Línea vertical para el punto actual -->\r\n          <line v-if=\"currentPoint && mouseOver\" :x1=\"currentPoint.x\" :y1=\"chartHeight\" :x2=\"currentPoint.x\" :y2=\"currentPoint.y\" :stroke=\"chartLineColor\" stroke-width=\"1\" stroke-dasharray=\"2,2\" />\r\n          \r\n          <!-- Círculo indicador (solo aparece cuando el mouse está sobre el gráfico) -->\r\n          <circle \r\n            v-if=\"currentPoint && mouseOver\"\r\n            :cx=\"currentPoint.x\" \r\n            :cy=\"currentPoint.y\" \r\n            r=\"6\" \r\n            :fill=\"chartLineColor\" \r\n            stroke=\"#1a1a1a\" \r\n            stroke-width=\"2\"\r\n            class=\"hover-point\"\r\n          />\r\n          \r\n          <!-- Área interactiva transparente para detectar movimiento del mouse -->\r\n          <rect \r\n            class=\"interaction-overlay\" \r\n            :width=\"chartWidth\" \r\n            :height=\"chartHeight\" \r\n            fill=\"transparent\" \r\n            style=\"pointer-events: all;\"\r\n          />\r\n        </svg>\r\n        \r\n        <!-- Eje X con los meses -->\r\n        <div class=\"x-axis\">\r\n          <div \r\n            class=\"x-label\" \r\n            v-for=\"(month, index) in monthLabels\" \r\n            :key=\"index\" \r\n            :style=\"{ left: `${(index / (monthLabels.length - 1)) * 100}%` }\"\r\n            :class=\"{ 'active': currentMonthIndex === index && mouseOver }\"\r\n          >\r\n            {{ month }}\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Tooltip que sigue al mouse -->\r\n        <div \r\n          v-if=\"currentPoint && mouseOver\" \r\n          class=\"tooltip\" \r\n          :style=\"tooltipStyle\"\r\n        >\r\n          <div class=\"tooltip-title\">{{ currentPointLabel }}</div>\r\n          <div class=\"tooltip-value\">${{ formatCurrency(currentPoint.value) }}</div>\r\n          <div class=\"tooltip-accumulated\">Acumulado: ${{ formatCurrency(currentPointAccumulated) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MaterialIcon from '../ui/Icon.vue';\r\n\r\nexport default {\r\n  name: 'RevenueChart',\r\n  \r\n  components: {\r\n    icon: MaterialIcon\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Datos de ingresos de los últimos 12 meses\r\n     * Debe ser un array de objetos con las propiedades \"month\" y \"revenue\"\r\n     */\r\n    revenueData: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => []\r\n    },\r\n    \r\n    /**\r\n     * Cambio porcentual en los ingresos con respecto al período anterior\r\n     */\r\n    changePercent: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    \r\n    /**\r\n     * Valor absoluto del cambio en los ingresos\r\n     */\r\n    changeAmount: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    \r\n    /**\r\n     * Color principal del gráfico\r\n     */\r\n    color: {\r\n      type: String,\r\n      default: null\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      chartWidth: 0,\r\n      chartHeight: 0,\r\n      currentMonthIndex: -1, // Inicialmente ningún mes está seleccionado\r\n      mouseOver: false,\r\n      mouseX: 0,\r\n      mouseY: 0,\r\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\r\n      yAxisLabels: ['$1M', '$10M', '$50M', '$100M', '$1B'],\r\n      // Datos simulados para el gráfico si no se proporcionan\r\n      defaultData: [\r\n        { month: 'Ene', revenue: 1000000 },\r\n        { month: 'Feb', revenue: 1200000 },\r\n        { month: 'Mar', revenue: 2500000 },\r\n        { month: 'Abr', revenue: 3800000 },\r\n        { month: 'May', revenue: 5200000 },\r\n        { month: 'Jun', revenue: 4800000 },\r\n        { month: 'Jul', revenue: 8500000 },\r\n        { month: 'Ago', revenue: 12000000 },\r\n        { month: 'Sep', revenue: 9500000 },\r\n        { month: 'Oct', revenue: 11000000 },\r\n        { month: 'Nov', revenue: 12500000 },\r\n        { month: 'Dic', revenue: 15000000 }\r\n      ]\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    /**\r\n     * Determina el color a usar para el gráfico según el valor de cambio\r\n     */\r\n    chartLineColor() {\r\n      if (this.color) return this.color;\r\n      \r\n      // Si es positivo, usar verde como en SalesCard\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      }\r\n      // Si es negativo, usar rojo como en SalesCard\r\n      else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      }\r\n      // Si es neutral, usar color turquesa por defecto\r\n      else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Color para la parte superior del gradiente\r\n     */\r\n    chartGradientTop() {\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      } else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      } else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Color para la parte inferior del gradiente\r\n     */\r\n    chartGradientBottom() {\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      } else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      } else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Obtiene los datos de ingresos, usando los predeterminados si no se proporcionan\r\n     */\r\n    chartData() {\r\n      return this.revenueData.length > 0 ? this.revenueData : this.defaultData;\r\n    },\r\n    \r\n    /**\r\n     * Calcula el total de ingresos sumando todos los valores\r\n     */\r\n    totalRevenue() {\r\n      return this.chartData.reduce((sum, item) => sum + item.revenue, 0);\r\n    },\r\n    \r\n    /**\r\n     * Formatea el total de ingresos para mostrar\r\n     */\r\n    formattedTotalRevenue() {\r\n      return this.formatLargeNumber(this.totalRevenue);\r\n    },\r\n    \r\n    /**\r\n     * Obtiene el valor de cambio total\r\n     */\r\n    totalChange() {\r\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\r\n    },\r\n    \r\n    /**\r\n     * Formatea el cambio total para mostrar\r\n     */\r\n    formattedTotalChange() {\r\n      return this.formatLargeNumber(this.totalChange);\r\n    },\r\n    \r\n    /**\r\n     * Formatea el porcentaje de cambio\r\n     */\r\n    formattedChangePercent() {\r\n      return (this.changePercent || 12.2).toFixed(1);\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para la línea del gráfico\r\n     */\r\n    linePath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      return this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * this.chartWidth;\r\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para el área bajo la línea\r\n     */\r\n    areaPath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      const linePath = this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * this.chartWidth;\r\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n      \r\n      return `${linePath} L${this.chartWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\r\n    },\r\n    \r\n    /**\r\n     * Calcula todos los puntos de datos para determinar el punto exacto a mostrar en cada posición\r\n     */\r\n    dataPoints() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return [];\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      return this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * this.chartWidth;\r\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        \r\n        return {\r\n          x,\r\n          y,\r\n          month: point.month,\r\n          value: point.revenue,\r\n          index\r\n        };\r\n      });\r\n    },\r\n    \r\n    /**\r\n     * Obtiene la información del punto actual seleccionado\r\n     */\r\n    currentPoint() {\r\n      if (!this.dataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.dataPoints.length) \r\n        return null;\r\n      \r\n      return this.dataPoints[this.currentMonthIndex];\r\n    },\r\n    \r\n    /**\r\n     * Obtiene la etiqueta del punto actual\r\n     */\r\n    currentPointLabel() {\r\n      if (!this.currentPoint) return '';\r\n      const year = this.chartData[this.currentMonthIndex].year || '2024';\r\n      return `${this.currentPoint.month}, ${year}`;\r\n    },\r\n    \r\n    /**\r\n     * Calcula el valor acumulado hasta el punto actual\r\n     */\r\n    currentPointAccumulated() {\r\n      if (!this.chartData.length || this.currentMonthIndex < 0) return 0;\r\n      \r\n      let sum = 0;\r\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\r\n        sum += this.chartData[i].revenue;\r\n      }\r\n      \r\n      return sum;\r\n    },\r\n    \r\n    /**\r\n     * Estilo para la posición del tooltip basado en la posición del mouse\r\n     */\r\n    tooltipStyle() {\r\n      // Calcular si el tooltip debe aparecer a la izquierda o derecha del cursor\r\n      // para evitar que se salga de los bordes\r\n      const tooltipWidth = 150;\r\n      const tooltipHeight = 80;\r\n      const offset = 15; // Distancia del cursor al tooltip\r\n      \r\n      let left = this.mouseX + offset;\r\n      let top = this.mouseY - tooltipHeight / 2;\r\n      \r\n      // Evitar que se salga por el lado derecho\r\n      if (left + tooltipWidth > this.chartWidth) {\r\n        left = this.mouseX - tooltipWidth - offset;\r\n      }\r\n      \r\n      // Evitar que se salga por arriba\r\n      if (top < 0) {\r\n        top = 10;\r\n      }\r\n      \r\n      // Evitar que se salga por abajo\r\n      if (top + tooltipHeight > this.chartHeight) {\r\n        top = this.chartHeight - tooltipHeight - 10;\r\n      }\r\n      \r\n      return {\r\n        left: `${left}px`,\r\n        top: `${top}px`\r\n      };\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    this.updateChartDimensions();\r\n    window.addEventListener('resize', this.updateChartDimensions);\r\n  },\r\n  \r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.updateChartDimensions);\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Actualiza las dimensiones del gráfico en función del contenedor\r\n     */\r\n    updateChartDimensions() {\r\n      if (this.$refs.chartContainer) {\r\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\r\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Gestiona el movimiento del mouse sobre el gráfico\r\n     * Usa un algoritmo de \"snap to nearest point\" mejorado para evitar cambios erráticos\r\n     */\r\n    handleMouseMove(event) {\r\n      if (!this.chartData.length || !this.dataPoints.length) return;\r\n      \r\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\r\n      const mouseX = event.clientX - chartRect.left;\r\n      const mouseY = event.clientY - chartRect.top;\r\n      \r\n      // Actualizar la posición del mouse para el tooltip\r\n      this.mouseX = mouseX;\r\n      this.mouseY = mouseY;\r\n      \r\n      // Encuentra el punto más cercano al mouse\r\n      this.updateActivePointFromPosition(mouseX);\r\n      this.mouseOver = true;\r\n    },\r\n    \r\n    /**\r\n     * Gestiona el movimiento táctil sobre el gráfico (para dispositivos móviles)\r\n     */\r\n    handleTouchMove(event) {\r\n      if (!this.chartData.length || !this.dataPoints.length || !event.touches[0]) return;\r\n      \r\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\r\n      const touchX = event.touches[0].clientX - chartRect.left;\r\n      const touchY = event.touches[0].clientY - chartRect.top;\r\n      \r\n      // Actualizar la posición del touch para el tooltip\r\n      this.mouseX = touchX;\r\n      this.mouseY = touchY;\r\n      \r\n      this.updateActivePointFromPosition(touchX);\r\n      this.mouseOver = true;\r\n      \r\n      // Prevenir el desplazamiento de la página durante el uso del gráfico\r\n      event.preventDefault();\r\n    },\r\n    \r\n    /**\r\n     * Actualiza el punto activo basado en la posición X del mouse/touch\r\n     * Algoritmo mejorado para prevenir saltos y movimientos bruscos\r\n     */\r\n    updateActivePointFromPosition(posX) {\r\n      // Asegurarse de que posX esté dentro de los límites del gráfico\r\n      posX = Math.min(Math.max(0, posX), this.chartWidth);\r\n      \r\n      if (this.dataPoints.length === 0) return;\r\n      \r\n      // Encuentra el punto más cercano (usando distancia absoluta)\r\n      let nearestIndex = 0;\r\n      let minDistance = Infinity;\r\n      \r\n      this.dataPoints.forEach((point, index) => {\r\n        const distance = Math.abs(point.x - posX);\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          nearestIndex = index;\r\n        }\r\n      });\r\n      \r\n      // Actualiza el índice sólo si es diferente (evita re-renders innecesarios)\r\n      if (this.currentMonthIndex !== nearestIndex) {\r\n        this.currentMonthIndex = nearestIndex;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Restablece la visualización cuando el mouse deja el gráfico\r\n     */\r\n    resetHighlight() {\r\n      this.mouseOver = false;\r\n    },\r\n    \r\n    /**\r\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\r\n     */\r\n    formatLargeNumber(value) {\r\n      if (value >= 1000000000) {\r\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\r\n      } else if (value >= 1000000) {\r\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\r\n      } else if (value >= 1000) {\r\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\r\n      }\r\n      return value.toString();\r\n    },\r\n    \r\n    /**\r\n     * Formatea un valor monetario con separadores de miles\r\n     */\r\n    formatCurrency(value) {\r\n      return new Intl.NumberFormat('es-ES', {\r\n        maximumFractionDigits: 0\r\n      }).format(value);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.revenue-chart-container {\r\n  background-color: var(--bg-secondary);\r\n  border-radius: 10px;\r\n  padding: 16px;\r\n  /* Efecto 3D con múltiples sombras */\r\n  box-shadow: \r\n    0 2px 4px rgba(0, 0, 0, 0.05),\r\n    0 4px 8px rgba(0, 0, 0, 0.05),\r\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\r\n  /* Borde con gradiente para efecto 3D */\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\r\n  height: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: var(--text-primary);\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-color: var(--bg-secondary, #1a1a1a);\r\n  color: var(--text-primary, #efefef);\r\n  /* Efecto de brillo en el borde superior */\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    rgba(255, 255, 255, 0.1) 0%,\r\n    rgba(255, 255, 255, 0) 20%\r\n  );\r\n  transition: transform 0.3s cubic-bezier(0.165, 0.84, 0.44, 1), \r\n              box-shadow 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\r\n}\r\n\r\n/* Efecto de elevación al pasar el mouse */\r\n.revenue-chart-container:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: \r\n    0 5px 10px rgba(0, 0, 0, 0.1),\r\n    0 10px 20px rgba(0, 0, 0, 0.05),\r\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n/* Añadir un pseudo-elemento para el efecto de brillo en el borde */\r\n.revenue-chart-container::before {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(\r\n    to right,\r\n    rgba(255, 255, 255, 0) 0%,\r\n    rgba(255, 255, 255, 0.3) 50%,\r\n    rgba(255, 255, 255, 0) 100%\r\n  );\r\n  border-top-left-radius: 10px;\r\n  border-top-right-radius: 10px;\r\n}\r\n\r\n/* Añadir un pseudo-elemento para el efecto de sombra en el borde inferior */\r\n.revenue-chart-container::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(\r\n    to right,\r\n    rgba(0, 0, 0, 0) 0%,\r\n    rgba(0, 0, 0, 0.2) 50%,\r\n    rgba(0, 0, 0, 0) 100%\r\n  );\r\n  border-bottom-left-radius: 10px;\r\n  border-bottom-right-radius: 10px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.chart-title-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 0.9rem;\r\n  font-weight: 600;\r\n  margin: 0 0 8px 0;\r\n  opacity: 0.9;\r\n  /* Efecto de texto 3D sutil */\r\n  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.revenue-amount {\r\n  font-size: 1.8rem;\r\n  font-weight: 700;\r\n  margin-bottom: 4px;\r\n  letter-spacing: -0.5px;\r\n  /* Efecto de texto 3D más pronunciado */\r\n  text-shadow: \r\n    0 1px 1px rgba(0, 0, 0, 0.1),\r\n    0 2px 2px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.change-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.change-value {\r\n  font-weight: 600;\r\n}\r\n\r\n.positive {\r\n  color: #27ae60; /* Verde que coincide con SalesCard */\r\n}\r\n\r\n.negative {\r\n  color: #e74c3c; /* Rojo que coincide con SalesCard */\r\n}\r\n\r\n.period {\r\n  opacity: 0.7;\r\n  margin-left: 4px;\r\n}\r\n\r\n.period-selector {\r\n  margin-left: auto;\r\n}\r\n\r\n.period-button {\r\n  display: flex;\r\n  align-items: center;\r\n  background: none;\r\n  border: none;\r\n  color: inherit;\r\n  font-size: 0.8rem;\r\n  padding: 4px 8px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  opacity: 0.8;\r\n  transition: opacity 0.3s, background-color 0.3s;\r\n}\r\n\r\n.period-button:hover, \r\n.period-button.active {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  opacity: 1;\r\n}\r\n\r\n.chart-content {\r\n  flex: 1;\r\n  display: flex;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.chart-axes {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 20px; /* Espacio para el eje X */\r\n  width: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 10px 0;\r\n}\r\n\r\n.y-axis {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n\r\n.axis-label {\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  text-align: left;\r\n}\r\n\r\n.chart-graphic {\r\n  flex: 1;\r\n  margin-left: 50px; /* Ancho del eje Y */\r\n  position: relative;\r\n  height: 100%;\r\n  cursor: crosshair; /* Cambiar cursor al pasar el mouse sobre el gráfico */\r\n}\r\n\r\n.chart-svg {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: calc(100% - 20px); /* Restar altura del eje X */\r\n}\r\n\r\n.x-axis {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.x-label {\r\n  position: absolute;\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  transform: translateX(-50%);\r\n  text-align: center;\r\n  transition: color 0.2s ease, font-weight 0.2s ease;\r\n}\r\n\r\n.x-label.active {\r\n  font-weight: 600;\r\n}\r\n\r\n/* Los colores activos de los ejes X se definirán dinámicamente basados en chartLineColor */\r\n.positive .x-label.active {\r\n  color: #27ae60;\r\n}\r\n\r\n.negative .x-label.active {\r\n  color: #e74c3c;\r\n}\r\n\r\n/* Estilos para los puntos de datos */\r\n.hover-point {\r\n  filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.3));\r\n  transition: transform 0.1s ease;\r\n}\r\n\r\n/* Estilos para la etiqueta de punto */\r\n.point-label {\r\n  transition: all 0.2s ease;\r\n  opacity: 0;\r\n  animation: fadeIn 0.3s forwards;\r\n  pointer-events: none;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateY(5px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n/* Eliminamos los estilos redundantes */\r\n.interaction-overlay {\r\n  cursor: crosshair;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .revenue-chart-container {\r\n    height: 300px;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .revenue-amount {\r\n    font-size: 1.6rem;\r\n  }\r\n  \r\n  .chart-title {\r\n    font-size: 0.85rem;\r\n  }\r\n  \r\n  /* Ajustes para mejorar la experiencia táctil en móviles */\r\n  .chart-graphic {\r\n    cursor: pointer;\r\n  }\r\n  \r\n  /* Ajustar el tamaño del popup para móviles */\r\n  .point-label rect {\r\n    height: 40px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}