{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"revenue-chart-container\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"chart-title-section\"\n};\nconst _hoisted_4 = {\n  class: \"revenue-amount\"\n};\nconst _hoisted_5 = {\n  class: \"change-value\"\n};\nconst _hoisted_6 = {\n  class: \"period-selector\"\n};\nconst _hoisted_7 = {\n  class: \"period-button active\"\n};\nconst _hoisted_8 = {\n  class: \"chart-content\"\n};\nconst _hoisted_9 = {\n  class: \"chart-axes\"\n};\nconst _hoisted_10 = {\n  class: \"y-axis\"\n};\nconst _hoisted_11 = {\n  class: \"chart-graphic\",\n  ref: \"chartContainer\"\n};\nconst _hoisted_12 = {\n  class: \"chart-svg\",\n  ref: \"chartSvg\",\n  width: \"100%\",\n  height: \"100%\"\n};\nconst _hoisted_13 = [\"d\"];\nconst _hoisted_14 = [\"d\"];\nconst _hoisted_15 = [\"cx\", \"cy\"];\nconst _hoisted_16 = [\"x1\", \"y1\", \"x2\", \"y2\"];\nconst _hoisted_17 = [\"transform\"];\nconst _hoisted_18 = {\n  x: \"0\",\n  y: \"-10\",\n  \"text-anchor\": \"middle\",\n  fill: \"white\",\n  \"font-size\": \"11\"\n};\nconst _hoisted_19 = {\n  x: \"0\",\n  y: \"-10\",\n  dy: \"12\",\n  \"text-anchor\": \"middle\",\n  fill: \"#2dc6af\",\n  \"font-size\": \"11\",\n  \"font-weight\": \"bold\"\n};\nconst _hoisted_20 = {\n  class: \"x-axis\"\n};\nconst _hoisted_21 = {\n  key: 0,\n  class: \"current-point-info\"\n};\nconst _hoisted_22 = {\n  class: \"month\"\n};\nconst _hoisted_23 = {\n  class: \"value\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_icon = _resolveComponent(\"icon\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", {\n    class: \"chart-title\"\n  }, \"Total Ingresos\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, \"$\" + _toDisplayString($options.formattedTotalRevenue), 1 /* TEXT */), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"change-indicator\", {\n      'positive': $options.totalChange > 0,\n      'negative': $options.totalChange < 0\n    }])\n  }, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString($options.totalChange > 0 ? '+' : '') + _toDisplayString($options.formattedTotalChange) + \" (\" + _toDisplayString($options.formattedChangePercent) + \"%)\", 1 /* TEXT */), _cache[0] || (_cache[0] = _createElementVNode(\"span\", {\n    class: \"period\"\n  }, \"· últimos 12 meses\", -1 /* HOISTED */))], 2 /* CLASS */)]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", _hoisted_7, [_cache[2] || (_cache[2] = _createTextVNode(\" Últimos 12 meses \")), _createVNode(_component_icon, {\n    name: \"arrow_drop_down\"\n  })])])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.yAxisLabels, (value, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"axis-label\",\n      key: index\n    }, _toDisplayString(value), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_11, [_createCommentVNode(\" La gráfica SVG se generará aquí \"), (_openBlock(), _createElementBlock(\"svg\", _hoisted_12, [_cache[4] || (_cache[4] = _createElementVNode(\"defs\", null, [_createElementVNode(\"linearGradient\", {\n    id: \"areaGradient\",\n    x1: \"0%\",\n    y1: \"0%\",\n    x2: \"0%\",\n    y2: \"100%\"\n  }, [_createElementVNode(\"stop\", {\n    offset: \"0%\",\n    \"stop-color\": \"#2dc6af\",\n    \"stop-opacity\": \"0.5\"\n  }), _createElementVNode(\"stop\", {\n    offset: \"100%\",\n    \"stop-color\": \"#2dc6af\",\n    \"stop-opacity\": \"0.05\"\n  })])], -1 /* HOISTED */)), _createElementVNode(\"path\", {\n    d: $options.areaPath,\n    fill: \"url(#areaGradient)\"\n  }, null, 8 /* PROPS */, _hoisted_13), _createElementVNode(\"path\", {\n    d: $options.linePath,\n    fill: \"none\",\n    stroke: \"#2dc6af\",\n    \"stroke-width\": \"2\"\n  }, null, 8 /* PROPS */, _hoisted_14), _createCommentVNode(\" Punto destacado \"), $options.currentPoint ? (_openBlock(), _createElementBlock(\"circle\", {\n    key: 0,\n    cx: $options.currentPoint.x,\n    cy: $options.currentPoint.y,\n    r: \"6\",\n    fill: \"#2dc6af\",\n    stroke: \"#1a1a1a\",\n    \"stroke-width\": \"2\"\n  }, null, 8 /* PROPS */, _hoisted_15)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Línea vertical para el punto actual \"), $options.currentPoint ? (_openBlock(), _createElementBlock(\"line\", {\n    key: 1,\n    x1: $options.currentPoint.x,\n    y1: $data.chartHeight,\n    x2: $options.currentPoint.x,\n    y2: $options.currentPoint.y,\n    stroke: \"#2dc6af\",\n    \"stroke-width\": \"1\",\n    \"stroke-dasharray\": \"2,2\"\n  }, null, 8 /* PROPS */, _hoisted_16)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Etiqueta del punto destacado \"), $options.currentPoint ? (_openBlock(), _createElementBlock(\"g\", {\n    key: 2,\n    class: \"point-label\",\n    transform: `translate(${$options.currentPoint.x}, ${$options.currentPoint.y - 15})`\n  }, [_cache[3] || (_cache[3] = _createElementVNode(\"rect\", {\n    x: \"-50\",\n    y: \"-25\",\n    width: \"100\",\n    height: \"25\",\n    rx: \"4\",\n    fill: \"#2a2a2a\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"text\", _hoisted_18, _toDisplayString($options.currentPoint.month), 1 /* TEXT */), _createElementVNode(\"text\", _hoisted_19, \"$\" + _toDisplayString($options.formatCurrency($options.currentPoint.value)), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_17)) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */)), _createCommentVNode(\" Eje X con los meses \"), _createElementVNode(\"div\", _hoisted_20, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.monthLabels, (month, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"x-label\",\n      key: index,\n      style: _normalizeStyle({\n        left: `${index / ($data.monthLabels.length - 1) * 100}%`\n      })\n    }, _toDisplayString(month), 5 /* TEXT, STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))])], 512 /* NEED_PATCH */)]), _createCommentVNode(\" Información del punto actual \"), $options.currentPoint ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [_createElementVNode(\"div\", _hoisted_22, _toDisplayString($options.currentPointLabel), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_23, \"Acumulado: $\" + _toDisplayString($options.formatCurrency($options.currentPointAccumulated)), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","ref","width","height","x","y","fill","dy","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$options","formattedTotalRevenue","_normalizeClass","totalChange","_hoisted_5","formattedTotalChange","formattedChangePercent","_hoisted_6","_hoisted_7","_createTextVNode","_createVNode","_component_icon","name","_hoisted_8","_hoisted_9","_hoisted_10","_Fragment","_renderList","$data","yAxisLabels","value","index","_hoisted_11","_createCommentVNode","_hoisted_12","id","x1","y1","x2","y2","offset","d","areaPath","_hoisted_13","linePath","stroke","_hoisted_14","currentPoint","cx","cy","r","_hoisted_15","chartHeight","_hoisted_16","transform","rx","_hoisted_18","month","_hoisted_19","formatCurrency","_hoisted_17","_hoisted_20","monthLabels","style","_normalizeStyle","left","length","_hoisted_21","_hoisted_22","currentPointLabel","_hoisted_23","currentPointAccumulated"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"revenue-chart-container\">\r\n    <div class=\"chart-header\">\r\n      <div class=\"chart-title-section\">\r\n        <h2 class=\"chart-title\">Total Ingresos</h2>\r\n        <div class=\"revenue-amount\">${{ formattedTotalRevenue }}</div>\r\n        <div class=\"change-indicator\" :class=\"{ 'positive': totalChange > 0, 'negative': totalChange < 0 }\">\r\n          <span class=\"change-value\">{{ totalChange > 0 ? '+' : '' }}{{ formattedTotalChange }} ({{ formattedChangePercent }}%)</span>\r\n          <span class=\"period\">· últimos 12 meses</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"period-selector\">\r\n        <button class=\"period-button active\">\r\n          Últimos 12 meses\r\n          <icon name=\"arrow_drop_down\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"chart-content\">\r\n      <div class=\"chart-axes\">\r\n        <div class=\"y-axis\">\r\n          <div class=\"axis-label\" v-for=\"(value, index) in yAxisLabels\" :key=\"index\">\r\n            {{ value }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"chart-graphic\" ref=\"chartContainer\">\r\n        <!-- La gráfica SVG se generará aquí -->\r\n        <svg class=\"chart-svg\" ref=\"chartSvg\" width=\"100%\" height=\"100%\">\r\n          <defs>\r\n            <linearGradient id=\"areaGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n              <stop offset=\"0%\" stop-color=\"#2dc6af\" stop-opacity=\"0.5\" />\r\n              <stop offset=\"100%\" stop-color=\"#2dc6af\" stop-opacity=\"0.05\" />\r\n            </linearGradient>\r\n          </defs>\r\n          <path :d=\"areaPath\" fill=\"url(#areaGradient)\" />\r\n          <path :d=\"linePath\" fill=\"none\" stroke=\"#2dc6af\" stroke-width=\"2\" />\r\n          \r\n          <!-- Punto destacado -->\r\n          <circle v-if=\"currentPoint\" :cx=\"currentPoint.x\" :cy=\"currentPoint.y\" r=\"6\" fill=\"#2dc6af\" stroke=\"#1a1a1a\" stroke-width=\"2\" />\r\n          \r\n          <!-- Línea vertical para el punto actual -->\r\n          <line v-if=\"currentPoint\" :x1=\"currentPoint.x\" :y1=\"chartHeight\" :x2=\"currentPoint.x\" :y2=\"currentPoint.y\" stroke=\"#2dc6af\" stroke-width=\"1\" stroke-dasharray=\"2,2\" />\r\n          \r\n          <!-- Etiqueta del punto destacado -->\r\n          <g v-if=\"currentPoint\" class=\"point-label\" :transform=\"`translate(${currentPoint.x}, ${currentPoint.y - 15})`\">\r\n            <rect x=\"-50\" y=\"-25\" width=\"100\" height=\"25\" rx=\"4\" fill=\"#2a2a2a\" />\r\n            <text x=\"0\" y=\"-10\" text-anchor=\"middle\" fill=\"white\" font-size=\"11\">{{ currentPoint.month }}</text>\r\n            <text x=\"0\" y=\"-10\" dy=\"12\" text-anchor=\"middle\" fill=\"#2dc6af\" font-size=\"11\" font-weight=\"bold\">${{ formatCurrency(currentPoint.value) }}</text>\r\n          </g>\r\n        </svg>\r\n        \r\n        <!-- Eje X con los meses -->\r\n        <div class=\"x-axis\">\r\n          <div class=\"x-label\" v-for=\"(month, index) in monthLabels\" :key=\"index\" :style=\"{ left: `${(index / (monthLabels.length - 1)) * 100}%` }\">\r\n            {{ month }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Información del punto actual -->\r\n    <div class=\"current-point-info\" v-if=\"currentPoint\">\r\n      <div class=\"month\">{{ currentPointLabel }}</div>\r\n      <div class=\"value\">Acumulado: ${{ formatCurrency(currentPointAccumulated) }}</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MaterialIcon from '../ui/Icon.vue';\r\n\r\nexport default {\r\n  name: 'RevenueChart',\r\n  \r\n  components: {\r\n    icon: MaterialIcon\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Datos de ingresos de los últimos 12 meses\r\n     * Debe ser un array de objetos con las propiedades \"month\" y \"revenue\"\r\n     */\r\n    revenueData: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => []\r\n    },\r\n    \r\n    /**\r\n     * Cambio porcentual en los ingresos con respecto al período anterior\r\n     */\r\n    changePercent: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    \r\n    /**\r\n     * Valor absoluto del cambio en los ingresos\r\n     */\r\n    changeAmount: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      chartWidth: 0,\r\n      chartHeight: 0,\r\n      currentMonthIndex: 7, // Por defecto, mostrar julio (puedes cambiar según tus necesidades)\r\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\r\n      yAxisLabels: ['$1M', '$10M', '$50M', '$100M', '$1B'],\r\n      // Datos simulados para el gráfico si no se proporcionan\r\n      defaultData: [\r\n        { month: 'Ene', revenue: 1000000 },\r\n        { month: 'Feb', revenue: 1200000 },\r\n        { month: 'Mar', revenue: 2500000 },\r\n        { month: 'Abr', revenue: 3800000 },\r\n        { month: 'May', revenue: 5200000 },\r\n        { month: 'Jun', revenue: 4800000 },\r\n        { month: 'Jul', revenue: 8500000 },\r\n        { month: 'Ago', revenue: 12000000 },\r\n        { month: 'Sep', revenue: 9500000 },\r\n        { month: 'Oct', revenue: 11000000 },\r\n        { month: 'Nov', revenue: 12500000 },\r\n        { month: 'Dic', revenue: 15000000 }\r\n      ]\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    /**\r\n     * Obtiene los datos de ingresos, usando los predeterminados si no se proporcionan\r\n     */\r\n    chartData() {\r\n      return this.revenueData.length > 0 ? this.revenueData : this.defaultData;\r\n    },\r\n    \r\n    /**\r\n     * Calcula el total de ingresos sumando todos los valores\r\n     */\r\n    totalRevenue() {\r\n      return this.chartData.reduce((sum, item) => sum + item.revenue, 0);\r\n    },\r\n    \r\n    /**\r\n     * Formatea el total de ingresos para mostrar\r\n     */\r\n    formattedTotalRevenue() {\r\n      return this.formatLargeNumber(this.totalRevenue);\r\n    },\r\n    \r\n    /**\r\n     * Obtiene el valor de cambio total\r\n     */\r\n    totalChange() {\r\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\r\n    },\r\n    \r\n    /**\r\n     * Formatea el cambio total para mostrar\r\n     */\r\n    formattedTotalChange() {\r\n      return this.formatLargeNumber(this.totalChange);\r\n    },\r\n    \r\n    /**\r\n     * Formatea el porcentaje de cambio\r\n     */\r\n    formattedChangePercent() {\r\n      return (this.changePercent || 12.2).toFixed(1);\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para la línea del gráfico\r\n     */\r\n    linePath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      return this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * this.chartWidth;\r\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para el área bajo la línea\r\n     */\r\n    areaPath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      const linePath = this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * this.chartWidth;\r\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n      \r\n      return `${linePath} L${this.chartWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\r\n    },\r\n    \r\n    /**\r\n     * Obtiene la información del punto actual seleccionado\r\n     */\r\n    currentPoint() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return null;\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      const point = this.chartData[this.currentMonthIndex];\r\n      const x = (this.currentMonthIndex / (this.chartData.length - 1)) * this.chartWidth;\r\n      const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n      const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n      \r\n      return {\r\n        x,\r\n        y,\r\n        month: point.month,\r\n        value: point.revenue\r\n      };\r\n    },\r\n    \r\n    /**\r\n     * Obtiene la etiqueta del punto actual\r\n     */\r\n    currentPointLabel() {\r\n      if (!this.currentPoint) return '';\r\n      return `${this.currentPoint.month}, 2024`;\r\n    },\r\n    \r\n    /**\r\n     * Calcula el valor acumulado hasta el punto actual\r\n     */\r\n    currentPointAccumulated() {\r\n      if (!this.chartData.length || this.currentMonthIndex < 0) return 0;\r\n      \r\n      let sum = 0;\r\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\r\n        sum += this.chartData[i].revenue;\r\n      }\r\n      \r\n      return this.formatCurrency(sum);\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    this.updateChartDimensions();\r\n    window.addEventListener('resize', this.updateChartDimensions);\r\n  },\r\n  \r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.updateChartDimensions);\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Actualiza las dimensiones del gráfico en función del contenedor\r\n     */\r\n    updateChartDimensions() {\r\n      if (this.$refs.chartContainer) {\r\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\r\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\r\n     */\r\n    formatLargeNumber(value) {\r\n      if (value >= 1000000000) {\r\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\r\n      } else if (value >= 1000000) {\r\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\r\n      } else if (value >= 1000) {\r\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\r\n      }\r\n      return value.toString();\r\n    },\r\n    \r\n    /**\r\n     * Formatea un valor monetario con separadores de miles\r\n     */\r\n    formatCurrency(value) {\r\n      return new Intl.NumberFormat('es-ES', {\r\n        maximumFractionDigits: 0\r\n      }).format(value);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.revenue-chart-container {\r\n  background-color: var(--bg-secondary);\r\n  border-radius: 10px;\r\n  padding: 16px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\r\n  height: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: var(--text-primary);\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-color: #1a1a1a;\r\n  color: #efefef;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.chart-title-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 0.9rem;\r\n  font-weight: 500;\r\n  margin: 0 0 8px 0;\r\n  opacity: 0.9;\r\n}\r\n\r\n.revenue-amount {\r\n  font-size: 1.8rem;\r\n  font-weight: 700;\r\n  margin-bottom: 4px;\r\n  letter-spacing: -0.5px;\r\n}\r\n\r\n.change-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.change-value {\r\n  font-weight: 600;\r\n}\r\n\r\n.positive {\r\n  color: #2dc6af;\r\n}\r\n\r\n.negative {\r\n  color: #e74c3c;\r\n}\r\n\r\n.period {\r\n  opacity: 0.7;\r\n  margin-left: 4px;\r\n}\r\n\r\n.period-selector {\r\n  margin-left: auto;\r\n}\r\n\r\n.period-button {\r\n  display: flex;\r\n  align-items: center;\r\n  background: none;\r\n  border: none;\r\n  color: inherit;\r\n  font-size: 0.8rem;\r\n  padding: 4px 8px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  opacity: 0.8;\r\n  transition: opacity 0.3s, background-color 0.3s;\r\n}\r\n\r\n.period-button:hover, \r\n.period-button.active {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  opacity: 1;\r\n}\r\n\r\n.chart-content {\r\n  flex: 1;\r\n  display: flex;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.chart-axes {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 20px; /* Espacio para el eje X */\r\n  width: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 10px 0;\r\n}\r\n\r\n.y-axis {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n\r\n.axis-label {\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  text-align: left;\r\n}\r\n\r\n.chart-graphic {\r\n  flex: 1;\r\n  margin-left: 50px; /* Ancho del eje Y */\r\n  position: relative;\r\n  height: 100%;\r\n}\r\n\r\n.chart-svg {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: calc(100% - 20px); /* Restar altura del eje X */\r\n}\r\n\r\n.x-axis {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.x-label {\r\n  position: absolute;\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  transform: translateX(-50%);\r\n  text-align: center;\r\n}\r\n\r\n.current-point-info {\r\n  position: absolute;\r\n  bottom: 48px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background-color: #2a2a2a;\r\n  padding: 6px 12px;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.current-point-info .month {\r\n  font-weight: 500;\r\n  opacity: 0.9;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.current-point-info .value {\r\n  color: #2dc6af;\r\n  font-weight: 700;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .revenue-chart-container {\r\n    height: 300px;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .revenue-amount {\r\n    font-size: 1.6rem;\r\n  }\r\n  \r\n  .chart-title {\r\n    font-size: 0.85rem;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}