{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport MaterialIcon from '../ui/Icon.vue';\nexport default {\n  name: 'RevenueChart',\n  components: {\n    icon: MaterialIcon\n  },\n  props: {\n    /**\n     * Datos de ingresos de los últimos 12 meses\n     * Debe ser un array de objetos con las propiedades \"month\", \"year\" y \"revenue\"\n     */\n    revenueData: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    /**\n     * Datos de ingresos históricos para comparación (año anterior)\n     * Debe seguir la misma estructura que revenueData\n     */\n    historicalData: {\n      type: Array,\n      default: () => []\n    },\n    /**\n     * Si es true, intenta generar automáticamente datos históricos si no se proporcionan\n     */\n    autoGenerateHistorical: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Si es true, muestra la comparación por defecto\n     */\n    defaultShowComparison: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Cambio porcentual en los ingresos con respecto al período anterior\n     */\n    changePercent: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * Valor absoluto del cambio en los ingresos\n     */\n    changeAmount: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * Color principal del gráfico\n     */\n    color: {\n      type: String,\n      default: null\n    },\n    /**\n     * Color para los datos de comparación del año anterior\n     */\n    comparisonColor: {\n      type: String,\n      default: '#777777'\n    }\n  },\n  data() {\n    return {\n      chartWidth: 0,\n      chartHeight: 0,\n      currentMonthIndex: -1,\n      mouseOver: false,\n      mouseX: 0,\n      mouseY: 0,\n      showComparison: this.defaultShowComparison,\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\n      yAxisLabelsCount: 5,\n      // Número de etiquetas en el eje Y\n      // Datos simulados para el gráfico si no se proporcionan\n      defaultData: [{\n        month: 'Ene',\n        year: new Date().getFullYear(),\n        revenue: 1000000\n      }, {\n        month: 'Feb',\n        year: new Date().getFullYear(),\n        revenue: 1200000\n      }, {\n        month: 'Mar',\n        year: new Date().getFullYear(),\n        revenue: 2500000\n      }, {\n        month: 'Abr',\n        year: new Date().getFullYear(),\n        revenue: 3800000\n      }, {\n        month: 'May',\n        year: new Date().getFullYear(),\n        revenue: 5200000\n      }, {\n        month: 'Jun',\n        year: new Date().getFullYear(),\n        revenue: 4800000\n      }, {\n        month: 'Jul',\n        year: new Date().getFullYear(),\n        revenue: 8500000\n      }, {\n        month: 'Ago',\n        year: new Date().getFullYear(),\n        revenue: 12000000\n      }, {\n        month: 'Sep',\n        year: new Date().getFullYear(),\n        revenue: 9500000\n      }, {\n        month: 'Oct',\n        year: new Date().getFullYear(),\n        revenue: 11000000\n      }, {\n        month: 'Nov',\n        year: new Date().getFullYear(),\n        revenue: 12500000\n      }, {\n        month: 'Dic',\n        year: new Date().getFullYear(),\n        revenue: 15000000\n      }],\n      // Datos simulados para comparación del año anterior\n      defaultHistoricalData: [],\n      // Tooltip mostrado actualmente (principal o histórico)\n      activeTooltipType: 'current',\n      // Detectar si estamos en un dispositivo móvil\n      windowWidth: window.innerWidth,\n      showPeriodSelector: false,\n      selectedPeriod: '12m',\n      availablePeriods: [{\n        value: '1d',\n        label: 'Último día'\n      }, {\n        value: '3d',\n        label: 'Últimos 3 días'\n      }, {\n        value: '7d',\n        label: 'Últimos 7 días'\n      }, {\n        value: '1m',\n        label: 'Último mes'\n      }, {\n        value: '3m',\n        label: 'Últimos 3 meses'\n      }, {\n        value: '6m',\n        label: 'Últimos 6 meses'\n      }, {\n        value: '9m',\n        label: 'Últimos 9 meses'\n      }, {\n        value: '12m',\n        label: 'Últimos 12 meses'\n      }]\n    };\n  },\n  computed: {\n    /**\n     * Detecta si estamos en modo oscuro\n     */\n    isDarkTheme() {\n      return document.documentElement.getAttribute('data-theme') === 'dark';\n    },\n    /**\n     * Detecta si estamos en un dispositivo móvil basado en el ancho de la ventana\n     */\n    isMobile() {\n      return this.windowWidth <= 768;\n    },\n    /**\n     * Determina el color a usar para el gráfico según el valor de cambio\n     */\n    chartLineColor() {\n      if (this.color) return this.color;\n\n      // Si es positivo, usar verde como en SalesCard\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      }\n      // Si es negativo, usar rojo como en SalesCard\n      else if (this.totalChange < 0) {\n        return '#e74c3c';\n      }\n      // Si es neutral, usar color turquesa por defecto\n      else {\n        return '#2dc6af';\n      }\n    },\n    /**\n     * Color para la línea de comparación del año anterior\n     */\n    comparisonLineColor() {\n      return this.comparisonColor || '#777777';\n    },\n    /**\n     * Color para la parte superior del gradiente\n     */\n    chartGradientTop() {\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      } else if (this.totalChange < 0) {\n        return '#e74c3c';\n      } else {\n        return '#2dc6af';\n      }\n    },\n    /**\n     * Color para la parte inferior del gradiente\n     */\n    chartGradientBottom() {\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      } else if (this.totalChange < 0) {\n        return '#e74c3c';\n      } else {\n        return '#2dc6af';\n      }\n    },\n    /**\n     * Obtiene los datos de ingresos actuales, generando datos con años si es necesario\n     */\n    chartData() {\n      if (this.revenueData.length > 0) {\n        return this.ensureYearInData(this.revenueData);\n      }\n      return this.defaultData;\n    },\n    /**\n     * Obtiene los datos históricos para la comparación, generando si es necesario\n     */\n    historicalChartData() {\n      if (this.historicalData.length > 0) {\n        return this.ensureYearInData(this.historicalData);\n      }\n      if (this.autoGenerateHistorical && this.chartData.length > 0) {\n        return this.generateHistoricalData();\n      }\n      return this.defaultHistoricalData;\n    },\n    /**\n     * Calcula el total de ingresos sumando todos los valores\n     */\n    totalRevenue() {\n      return this.filteredChartData.reduce((sum, item) => sum + item.revenue, 0);\n    },\n    /**\n     * Calcula el total de ingresos del año anterior para comparación\n     */\n    totalHistoricalRevenue() {\n      return this.filteredHistoricalChartData.reduce((sum, item) => sum + item.revenue, 0);\n    },\n    /**\n     * Calcula la diferencia porcentual entre el periodo actual y el histórico\n     */\n    yearOverYearChangePercent() {\n      if (!this.totalHistoricalRevenue) return 0;\n      return (this.totalRevenue - this.totalHistoricalRevenue) / this.totalHistoricalRevenue * 100;\n    },\n    /**\n     * Formatea el total de ingresos para mostrar\n     */\n    formattedTotalRevenue() {\n      return this.formatLargeNumber(this.totalRevenue);\n    },\n    /**\n     * Obtiene el valor de cambio total\n     */\n    totalChange() {\n      if (this.showComparison && this.historicalChartData.length > 0) {\n        return this.totalRevenue - this.totalHistoricalRevenue;\n      }\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\n    },\n    /**\n     * Formatea el cambio total para mostrar\n     */\n    formattedTotalChange() {\n      return this.formatLargeNumber(this.totalChange);\n    },\n    /**\n     * Formatea el porcentaje de cambio\n     */\n    formattedChangePercent() {\n      if (this.showComparison && this.historicalChartData.length > 0) {\n        return this.yearOverYearChangePercent.toFixed(1);\n      }\n      return (this.changePercent || 12.2).toFixed(1);\n    },\n    /**\n     * Calcula la ruta SVG para la línea del gráfico usando curvas suavizadas\n     */\n    linePath() {\n      if (!this.filteredChartData.length || !this.chartWidth || !this.chartHeight) return '';\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n\n      // Crear puntos para la curva\n      const points = this.filteredChartData.map((point, index) => {\n        const x = index / (this.filteredChartData.length - 1) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return [x, y];\n      });\n\n      // Generar la curva suavizada usando curvas de Bézier\n      return points.reduce((path, point, i) => {\n        if (i === 0) {\n          return `M ${point[0]},${point[1]}`;\n        }\n\n        // Calcular los puntos de control para la curva\n        const prev = points[i - 1];\n        const curr = point;\n\n        // Calcular puntos de control para curva suave\n        const controlPoint1 = [prev[0] + (curr[0] - prev[0]) * 0.5, prev[1]];\n        const controlPoint2 = [curr[0] - (curr[0] - prev[0]) * 0.5, curr[1]];\n        return `${path} C ${controlPoint1[0]},${controlPoint1[1]} ${controlPoint2[0]},${controlPoint2[1]} ${curr[0]},${curr[1]}`;\n      }, '');\n    },\n    /**\n     * Calcula la ruta SVG para la línea de comparación del año anterior usando curvas suavizadas\n     */\n    comparisonLinePath() {\n      if (!this.showComparison || !this.filteredHistoricalChartData.length || !this.chartWidth || !this.chartHeight) return '';\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n\n      // Crear puntos para la curva de comparación\n      const points = this.filteredHistoricalChartData.map((point, index) => {\n        const x = index / (this.filteredHistoricalChartData.length - 1) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return [x, y];\n      });\n\n      // Generar la curva suavizada usando curvas de Bézier\n      return points.reduce((path, point, i) => {\n        if (i === 0) {\n          return `M ${point[0]},${point[1]}`;\n        }\n        const prev = points[i - 1];\n        const curr = point;\n        const controlPoint1 = [prev[0] + (curr[0] - prev[0]) * 0.5, prev[1]];\n        const controlPoint2 = [curr[0] - (curr[0] - prev[0]) * 0.5, curr[1]];\n        return `${path} C ${controlPoint1[0]},${controlPoint1[1]} ${controlPoint2[0]},${controlPoint2[1]} ${curr[0]},${curr[1]}`;\n      }, '');\n    },\n    /**\n     * Calcula la ruta SVG para el área bajo la línea usando curvas suavizadas\n     */\n    areaPath() {\n      if (!this.filteredChartData.length || !this.chartWidth || !this.chartHeight) return '';\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n\n      // Crear puntos para la curva\n      const points = this.filteredChartData.map((point, index) => {\n        const x = index / (this.filteredChartData.length - 1) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return [x, y];\n      });\n\n      // Generar la curva suavizada con área\n      const curvePath = points.reduce((path, point, i) => {\n        if (i === 0) {\n          return `M ${point[0]},${point[1]}`;\n        }\n        const prev = points[i - 1];\n        const curr = point;\n        const controlPoint1 = [prev[0] + (curr[0] - prev[0]) * 0.5, prev[1]];\n        const controlPoint2 = [curr[0] - (curr[0] - prev[0]) * 0.5, curr[1]];\n        return `${path} C ${controlPoint1[0]},${controlPoint1[1]} ${controlPoint2[0]},${controlPoint2[1]} ${curr[0]},${curr[1]}`;\n      }, '');\n\n      // Cerrar el path para crear el área\n      return `${curvePath} L${availableWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\n    },\n    /**\n     * Calcula todos los puntos de datos para determinar el punto exacto a mostrar en cada posición\n     */\n    dataPoints() {\n      if (!this.filteredChartData.length || !this.chartWidth || !this.chartHeight) return [];\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      return this.filteredChartData.map((point, index) => {\n        const x = index / (this.filteredChartData.length - 1) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return {\n          x,\n          y,\n          month: point.month,\n          year: point.year,\n          value: point.revenue,\n          index,\n          type: 'current'\n        };\n      });\n    },\n    /**\n     * Calcula los puntos de datos para el año anterior\n     */\n    historicalDataPoints() {\n      if (!this.showComparison || !this.filteredHistoricalChartData.length || !this.chartWidth || !this.chartHeight) return [];\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      return this.filteredHistoricalChartData.map((point, index) => {\n        const x = index / (this.filteredHistoricalChartData.length - 1) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return {\n          x,\n          y,\n          month: point.month,\n          year: point.year,\n          value: point.revenue,\n          index,\n          type: 'historical'\n        };\n      });\n    },\n    /**\n     * Obtiene la información del punto actual seleccionado\n     */\n    currentPoint() {\n      if (!this.dataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.dataPoints.length) return null;\n\n      // Siempre devolvemos el punto actual\n      return this.dataPoints[this.currentMonthIndex];\n    },\n    /**\n     * Calcula el valor acumulado hasta el punto actual\n     */\n    currentPointAccumulated() {\n      if (!this.filteredChartData.length || this.currentMonthIndex < 0) return 0;\n      let sum = 0;\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\n        sum += this.filteredChartData[i].revenue;\n      }\n      return sum;\n    },\n    /**\n     * Calcula la diferencia entre el punto actual y el mismo punto del año anterior\n     */\n    currentPointYearOverYearChange() {\n      if (!this.currentPoint || !this.showComparison || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.filteredChartData.length || this.currentMonthIndex >= this.filteredHistoricalChartData.length) {\n        return null;\n      }\n      const currentValue = this.filteredChartData[this.currentMonthIndex].revenue;\n      const historicalValue = this.filteredHistoricalChartData[this.currentMonthIndex].revenue;\n      return {\n        amount: currentValue - historicalValue,\n        percent: historicalValue ? (currentValue - historicalValue) / historicalValue * 100 : 0\n      };\n    },\n    /**\n     * Estilo para la posición del tooltip basado en la posición del mouse\n     */\n    tooltipStyle() {\n      // Calcular si el tooltip debe aparecer a la izquierda o derecha del cursor\n      // para evitar que se salga de los bordes\n      const tooltipWidth = 180; // Aumentado para incluir la comparación\n      const tooltipHeight = this.showComparison ? 140 : 80; // Altura aumentada para incluir la comparación\n      const offset = 15; // Distancia del cursor al tooltip\n\n      let left = this.mouseX + offset;\n      let top = this.mouseY - tooltipHeight / 2;\n\n      // Evitar que se salga por el lado derecho\n      if (left + tooltipWidth > this.chartWidth) {\n        left = this.mouseX - tooltipWidth - offset;\n      }\n\n      // Evitar que se salga por arriba\n      if (top < 0) {\n        top = 10;\n      }\n\n      // Evitar que se salga por abajo\n      if (top + tooltipHeight > this.chartHeight) {\n        top = this.chartHeight - tooltipHeight - 10;\n      }\n      return {\n        left: `${left}px`,\n        top: `${top}px`\n      };\n    },\n    /**\n     * Calcula dinámicamente las etiquetas del eje Y basándose en los datos reales\n     */\n    yAxisLabels() {\n      const {\n        maxValue\n      } = this.calculateDataRange();\n      const labels = [];\n\n      // Si no hay datos, retornar array vacío\n      if (maxValue <= 0) return [];\n\n      // Encontrar un valor máximo redondeado adecuado para el eje Y\n      let roundedMax = this.getRoundedMax(maxValue);\n\n      // Calcular el incremento entre etiquetas\n      const increment = roundedMax / (this.yAxisLabelsCount - 1);\n\n      // Generar las etiquetas del eje Y\n      for (let i = 0; i < this.yAxisLabelsCount; i++) {\n        const value = i * increment;\n        labels.push(this.formatAxisLabel(value));\n      }\n\n      // Regresar las etiquetas en orden de mayor a menor (para que coincidan con el dibujo)\n      return labels.reverse();\n    },\n    /**\n     * Color para la cuadrícula basado en el tema\n     */\n    gridColor() {\n      return this.isDarkTheme ? '#ffffff' : '#000000';\n    },\n    /**\n     * Obtiene la etiqueta del período seleccionado\n     */\n    selectedPeriodLabel() {\n      const period = this.availablePeriods.find(p => p.value === this.selectedPeriod);\n      return period ? period.label : 'Últimos 12 meses';\n    },\n    /**\n     * Filtra los datos según el período seleccionado\n     */\n    filteredChartData() {\n      const data = [...this.chartData];\n      switch (this.selectedPeriod) {\n        case '1d':\n          return this.filterLastDays(data, 1);\n        case '3d':\n          return this.filterLastDays(data, 3);\n        case '7d':\n          return this.filterLastDays(data, 7);\n        case '1m':\n          return this.filterLastMonths(data, 1);\n        case '3m':\n          return this.filterLastMonths(data, 3);\n        case '6m':\n          return this.filterLastMonths(data, 6);\n        case '9m':\n          return this.filterLastMonths(data, 9);\n        default:\n          return data;\n      }\n    },\n    /**\n     * Filtra los datos históricos según el período seleccionado\n     */\n    filteredHistoricalChartData() {\n      if (!this.showComparison) return [];\n      const data = [...this.historicalChartData];\n      switch (this.selectedPeriod) {\n        case '1d':\n          return this.filterLastDays(data, 1);\n        case '3d':\n          return this.filterLastDays(data, 3);\n        case '7d':\n          return this.filterLastDays(data, 7);\n        case '1m':\n          return this.filterLastMonths(data, 1);\n        case '3m':\n          return this.filterLastMonths(data, 3);\n        case '6m':\n          return this.filterLastMonths(data, 6);\n        case '9m':\n          return this.filterLastMonths(data, 9);\n        default:\n          return data;\n      }\n    }\n  },\n  mounted() {\n    this.updateChartDimensions();\n    window.addEventListener('resize', this.handleResize);\n    this.initDefaultHistoricalData();\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  watch: {\n    // Observar cambios en la visualización de la comparación\n    showComparison(newValue) {\n      // Emitir evento cuando cambia el modo de comparación\n      this.$emit('comparison-changed', newValue);\n    }\n  },\n  methods: {\n    /**\n     * Maneja el evento de redimensionamiento de la ventana\n     */\n    handleResize() {\n      this.windowWidth = window.innerWidth;\n      this.updateChartDimensions();\n    },\n    /**\n     * Inicializa los datos históricos por defecto\n     */\n    initDefaultHistoricalData() {\n      if (this.autoGenerateHistorical && this.defaultHistoricalData.length === 0) {\n        this.defaultHistoricalData = this.defaultData.map(item => ({\n          month: item.month,\n          year: item.year - 1,\n          revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\n        }));\n      }\n    },\n    /**\n     * Genera datos históricos basados en los datos actuales\n     */\n    generateHistoricalData() {\n      return this.filteredChartData.map(item => ({\n        month: item.month,\n        year: item.year - 1,\n        // Año anterior\n        revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\n      }));\n    },\n    /**\n     * Asegura que todos los elementos de datos tengan un año\n     */\n    ensureYearInData(data) {\n      return data.map(item => {\n        if (!item.year) {\n          return {\n            ...item,\n            year: new Date().getFullYear() // Añadir el año actual si no existe\n          };\n        }\n        return item;\n      });\n    },\n    /**\n     * Calcula el rango de valores para los dos conjuntos de datos\n     */\n    calculateDataRange() {\n      let dataToCompare = [...this.filteredChartData];\n      if (this.showComparison && this.filteredHistoricalChartData.length > 0) {\n        dataToCompare = [...dataToCompare, ...this.filteredHistoricalChartData];\n      }\n\n      // Obtener el valor máximo real de los datos\n      let maxValue = Math.max(...dataToCompare.map(d => d.revenue));\n\n      // Usar el valor máximo redondeado para asegurar que coincida con las etiquetas del eje Y\n      maxValue = this.getRoundedMax(maxValue);\n      return {\n        maxValue\n      };\n    },\n    /**\n     * Actualiza las dimensiones del gráfico en función del contenedor\n     */\n    updateChartDimensions() {\n      if (this.$refs.chartContainer) {\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\n      }\n    },\n    /**\n     * Gestiona el movimiento del mouse sobre el gráfico\n     * Usa un algoritmo de \"snap to nearest point\" mejorado para evitar cambios erráticos\n     */\n    handleMouseMove(event) {\n      if (!this.filteredChartData.length || !this.dataPoints.length) return;\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\n      const mouseX = event.clientX - chartRect.left;\n      const mouseY = event.clientY - chartRect.top;\n\n      // Solo actualizar mouseY, mouseX se actualizará en updateActivePointFromPosition\n      this.mouseY = mouseY;\n\n      // Encuentra el punto más cercano al mouse\n      this.updateActivePointFromPosition(mouseX);\n      this.mouseOver = true;\n    },\n    /**\n     * Gestiona el movimiento táctil sobre el gráfico (para dispositivos móviles)\n     */\n    handleTouchMove(event) {\n      if (!this.filteredChartData.length || !this.dataPoints.length || !event.touches[0]) return;\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\n      const touchX = event.touches[0].clientX - chartRect.left;\n      const touchY = event.touches[0].clientY - chartRect.top;\n\n      // Solo actualizar mouseY, mouseX se actualizará en updateActivePointFromPosition\n      this.mouseY = touchY;\n      this.updateActivePointFromPosition(touchX);\n      this.mouseOver = true;\n\n      // Prevenir el desplazamiento de la página durante el uso del gráfico\n      event.preventDefault();\n    },\n    /**\n     * Actualiza el punto activo basado en la posición X del mouse/touch\n     * Algoritmo mejorado para prevenir saltos y movimientos bruscos\n     */\n    updateActivePointFromPosition(posX) {\n      // Asegurarse de que posX esté dentro de los límites del gráfico\n      posX = Math.min(Math.max(0, posX), this.chartWidth);\n      if (this.dataPoints.length === 0) return;\n\n      // Calcular el ancho de cada segmento\n      const segmentWidth = this.chartWidth / (this.dataPoints.length - 1);\n\n      // Encontrar el índice del punto más cercano basado en la posición X\n      const nearestIndex = Math.round(posX / segmentWidth);\n\n      // Limitar el índice al rango válido\n      const boundedIndex = Math.min(Math.max(0, nearestIndex), this.dataPoints.length - 1);\n\n      // Actualiza el índice sólo si es diferente\n      if (this.currentMonthIndex !== boundedIndex) {\n        this.currentMonthIndex = boundedIndex;\n        this.mouseX = this.dataPoints[boundedIndex].x;\n      }\n    },\n    /**\n     * Restablece la visualización cuando el mouse deja el gráfico\n     */\n    resetHighlight() {\n      this.mouseOver = false;\n    },\n    /**\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\n     */\n    formatLargeNumber(value) {\n      if (value >= 1000000000) {\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\n      } else if (value >= 1000000) {\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\n      } else if (value >= 1000) {\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\n      }\n      return value.toString();\n    },\n    /**\n     * Formatea un valor monetario con separadores de miles\n     */\n    formatCurrency(value) {\n      return new Intl.NumberFormat('es-ES', {\n        maximumFractionDigits: 0\n      }).format(value);\n    },\n    /**\n     * Formatea un valor de porcentaje\n     */\n    formatPercent(value) {\n      return `${value > 0 ? '+' : ''}${value.toFixed(1)}%`;\n    },\n    /**\n     * Obtiene el valor del punto histórico en la posición actual\n     */\n    getHistoricalValueAtCurrentIndex() {\n      if (!this.showComparison || !this.historicalDataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.historicalDataPoints.length) return null;\n      return this.historicalDataPoints[this.currentMonthIndex].value;\n    },\n    /**\n     * Calcula un valor máximo redondeado apropiado para las etiquetas del eje Y\n     */\n    getRoundedMax(maxValue) {\n      // Determinar la magnitud del valor\n      const magnitude = Math.pow(10, Math.floor(Math.log10(maxValue)));\n\n      // Redondear hacia arriba para obtener un valor \"limpio\"\n      let roundedMax = Math.ceil(maxValue / magnitude) * magnitude;\n\n      // Si el valor redondeado es mucho mayor que el máximo real, ajustar\n      if (roundedMax > maxValue * 1.5) {\n        roundedMax = Math.ceil(maxValue / (magnitude / 2)) * (magnitude / 2);\n      }\n      return roundedMax;\n    },\n    /**\n     * Formatea las etiquetas del eje Y para que sean legibles\n     */\n    formatAxisLabel(value) {\n      return this.formatLargeNumber(value);\n    },\n    /**\n     * Abre/cierra el selector de períodos\n     */\n    togglePeriodSelector() {\n      this.showPeriodSelector = !this.showPeriodSelector;\n    },\n    /**\n     * Cierra el selector de períodos\n     */\n    closePeriodSelector() {\n      this.showPeriodSelector = false;\n    },\n    /**\n     * Selecciona un nuevo período\n     */\n    selectPeriod(period) {\n      this.selectedPeriod = period;\n      this.showPeriodSelector = false;\n      this.$emit('period-changed', period);\n    },\n    /**\n     * Filtra los datos para mostrar los últimos X días\n     */\n    filterLastDays(data, days) {\n      const now = new Date();\n      const startDate = new Date(now.setDate(now.getDate() - days));\n      return data.filter(item => {\n        const itemDate = new Date(item.year, this.monthLabels.indexOf(item.month), 1);\n        return itemDate >= startDate;\n      });\n    },\n    /**\n     * Filtra los datos para mostrar los últimos X meses\n     */\n    filterLastMonths(data, months) {\n      const now = new Date();\n      const startDate = new Date(now.setMonth(now.getMonth() - months));\n      return data.filter(item => {\n        const itemDate = new Date(item.year, this.monthLabels.indexOf(item.month), 1);\n        return itemDate >= startDate;\n      });\n    }\n  }\n};","map":{"version":3,"names":["MaterialIcon","name","components","icon","props","revenueData","type","Array","required","default","historicalData","autoGenerateHistorical","Boolean","defaultShowComparison","changePercent","Number","changeAmount","color","String","comparisonColor","data","chartWidth","chartHeight","currentMonthIndex","mouseOver","mouseX","mouseY","showComparison","monthLabels","yAxisLabelsCount","defaultData","month","year","Date","getFullYear","revenue","defaultHistoricalData","activeTooltipType","windowWidth","window","innerWidth","showPeriodSelector","selectedPeriod","availablePeriods","value","label","computed","isDarkTheme","document","documentElement","getAttribute","isMobile","chartLineColor","totalChange","comparisonLineColor","chartGradientTop","chartGradientBottom","chartData","length","ensureYearInData","historicalChartData","generateHistoricalData","totalRevenue","filteredChartData","reduce","sum","item","totalHistoricalRevenue","filteredHistoricalChartData","yearOverYearChangePercent","formattedTotalRevenue","formatLargeNumber","formattedTotalChange","formattedChangePercent","toFixed","linePath","maxValue","calculateDataRange","paddingBottom","paddingTop","paddingRight","availableHeight","availableWidth","points","map","point","index","x","normalizedValue","y","path","i","prev","curr","controlPoint1","controlPoint2","comparisonLinePath","areaPath","curvePath","dataPoints","historicalDataPoints","currentPoint","currentPointAccumulated","currentPointYearOverYearChange","currentValue","historicalValue","amount","percent","tooltipStyle","tooltipWidth","tooltipHeight","offset","left","top","yAxisLabels","labels","roundedMax","getRoundedMax","increment","push","formatAxisLabel","reverse","gridColor","selectedPeriodLabel","period","find","p","filterLastDays","filterLastMonths","mounted","updateChartDimensions","addEventListener","handleResize","initDefaultHistoricalData","beforeUnmount","removeEventListener","watch","newValue","$emit","methods","Math","floor","random","dataToCompare","max","d","$refs","chartContainer","clientWidth","clientHeight","handleMouseMove","event","chartRect","getBoundingClientRect","clientX","clientY","updateActivePointFromPosition","handleTouchMove","touches","touchX","touchY","preventDefault","posX","min","segmentWidth","nearestIndex","round","boundedIndex","resetHighlight","replace","toString","formatCurrency","Intl","NumberFormat","maximumFractionDigits","format","formatPercent","getHistoricalValueAtCurrentIndex","magnitude","pow","log10","ceil","togglePeriodSelector","closePeriodSelector","selectPeriod","days","now","startDate","setDate","getDate","filter","itemDate","indexOf","months","setMonth","getMonth"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\n  <div class=\"revenue-chart-container\">\n    <div class=\"chart-header\">\n      <div class=\"chart-title-section\">\n        <h2 class=\"chart-title\">Total Ingresos</h2>\n        <div class=\"revenue-amount\">${{ formattedTotalRevenue }}</div>\n        <div class=\"change-indicator\" :class=\"{ 'positive': totalChange > 0, 'negative': totalChange < 0 }\">\n          <span class=\"change-value\">{{ totalChange > 0 ? '+' : '' }}{{ formattedTotalChange }} ({{ formattedChangePercent }}%)</span>\n          <span class=\"period\">· {{ showComparison ? 'vs. año anterior' : 'últimos 12 meses' }}</span>\n        </div>\n      </div>\n      \n      <div class=\"period-selector\">\n        <div class=\"controls\">\n          <label class=\"comparison-toggle\">\n            <input type=\"checkbox\" v-model=\"showComparison\">\n            <span class=\"toggle-label\">Comparar con año anterior</span>\n          </label>\n          <div class=\"period-dropdown\" v-click-outside=\"closePeriodSelector\">\n            <button class=\"period-button\" @click=\"togglePeriodSelector\">\n              {{ selectedPeriodLabel }}\n              <icon name=\"arrow_drop_down\" />\n            </button>\n            <template v-if=\"showPeriodSelector\">\n              <div class=\"mobile-overlay\" @click=\"closePeriodSelector\"></div>\n              <div class=\"period-options\">\n                <button \n                  v-for=\"period in availablePeriods\" \n                  :key=\"period.value\"\n                  class=\"period-option\" \n                  :class=\"{ active: selectedPeriod === period.value }\"\n                  @click=\"selectPeriod(period.value)\"\n                >\n                  {{ period.label }}\n                </button>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"chart-content\">\n      <div class=\"chart-axes\">\n        <div class=\"y-axis\">\n          <div class=\"axis-label\" v-for=\"(value, index) in yAxisLabels\" :key=\"index\">\n            {{ value }}\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"chart-graphic\" ref=\"chartContainer\" \n           @mousemove=\"handleMouseMove\"\n           @mouseleave=\"resetHighlight\" \n           @touchmove=\"handleTouchMove\"\n           @touchend=\"resetHighlight\">\n        <!-- La gráfica SVG se generará aquí -->\n        <svg class=\"chart-svg\" ref=\"chartSvg\" width=\"100%\" height=\"100%\">\n          <defs>\n            <linearGradient id=\"areaGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <stop offset=\"0%\" :stop-color=\"chartGradientTop\" stop-opacity=\"0.6\" />\n              <stop offset=\"100%\" :stop-color=\"chartGradientBottom\" stop-opacity=\"0.05\" />\n            </linearGradient>\n            <!-- Patrón para la cuadrícula -->\n            <pattern id=\"grid\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\">\n              <!-- Líneas horizontales -->\n              <path \n                d=\"M 0 50 L 50 50\" \n                fill=\"none\" \n                stroke=\"currentColor\"\n                stroke-width=\"0.5\"\n              />\n              <!-- Líneas verticales -->\n              <path \n                d=\"M 50 0 L 50 50\" \n                fill=\"none\" \n                stroke=\"currentColor\"\n                stroke-width=\"0.5\"\n              />\n            </pattern>\n          </defs>\n          <!-- Cuadrícula de fondo -->\n          <rect \n            width=\"100%\" \n            height=\"100%\" \n            fill=\"url(#grid)\" \n          />\n          <path :d=\"areaPath\" fill=\"url(#areaGradient)\" />\n          <path :d=\"linePath\" fill=\"none\" :stroke=\"chartLineColor\" stroke-width=\"2\" />\n          \n          <!-- Línea de comparación del año anterior (solo visible si showComparison es true) -->\n          <path v-if=\"showComparison\" \n                :d=\"comparisonLinePath\" \n                fill=\"none\" \n                :stroke=\"comparisonLineColor\" \n                stroke-width=\"2\" \n                stroke-dasharray=\"4,2\" />\n          \n          <!-- Línea vertical para el punto actual -->\n          <line v-if=\"currentPoint && mouseOver\" \n                :x1=\"mouseX\" \n                :y1=\"chartHeight\" \n                :x2=\"mouseX\" \n                :y2=\"0\" \n                :stroke=\"chartLineColor\" \n                stroke-width=\"1\" \n                stroke-dasharray=\"2,2\" />\n          \n          <!-- Círculo indicador con efectos mejorados -->\n          <g v-if=\"currentPoint && mouseOver\" class=\"hover-point-group\" :transform=\"`translate(${mouseX},${currentPoint.y})`\">\n            <!-- Anillo exterior con brillo -->\n            <circle \n              cx=\"0\" \n              cy=\"0\" \n              :r=\"isMobile ? 12 : 15\" \n              :fill=\"chartLineColor\"\n              class=\"point-glow\"\n              opacity=\"0.15\"\n            />\n            <!-- Anillo medio para efecto de profundidad -->\n            <circle \n              cx=\"0\" \n              cy=\"0\" \n              :r=\"isMobile ? 8 : 10\" \n              :fill=\"chartLineColor\"\n              class=\"point-ring\"\n              opacity=\"0.3\"\n            />\n            <!-- Punto central -->\n            <circle \n              cx=\"0\" \n              cy=\"0\" \n              :r=\"isMobile ? 4 : 5\" \n              :fill=\"chartLineColor\"\n              stroke=\"#1a1a1a\" \n              stroke-width=\"2\"\n              class=\"point-center\"\n            />\n          </g>\n          \n          <!-- Área interactiva transparente para detectar movimiento del mouse -->\n          <rect \n            class=\"interaction-overlay\" \n            :width=\"chartWidth - 10\" \n            :height=\"chartHeight\" \n            fill=\"transparent\" \n            style=\"pointer-events: all;\"\n          />\n        </svg>\n        \n        <!-- Eje X con los meses -->\n        <div class=\"x-axis\">\n          <div \n            class=\"x-label\" \n            v-for=\"(month, index) in monthLabels\" \n            :key=\"index\" \n            :class=\"{ \n              'active': currentMonthIndex === index && mouseOver,\n              [`month-${index}`]: true\n            }\"\n          >\n            {{ month }}\n          </div>\n        </div>\n        \n        <!-- Tooltip que sigue al mouse -->\n        <div \n          v-if=\"currentPoint && mouseOver\" \n          class=\"tooltip\" \n          :style=\"tooltipStyle\"\n        >\n          <div class=\"tooltip-title\">{{ currentPoint.month }}, {{ currentPoint.year }}</div>\n          <div class=\"tooltip-value\">${{ formatCurrency(currentPoint.value) }}</div>\n          <div class=\"tooltip-accumulated\">Acumulado: ${{ formatCurrency(currentPointAccumulated) }}</div>\n          \n          <!-- Comparación con el año anterior (solo si showComparison es true) -->\n          <div v-if=\"showComparison && historicalDataPoints.length > 0\" class=\"tooltip-comparison\">\n            <div class=\"comparison-label\">{{ currentPoint.year - 1 }}:</div>\n            <div class=\"comparison-value\">\n              ${{ formatCurrency(getHistoricalValueAtCurrentIndex()) }}\n            </div>\n            <div class=\"comparison-difference\" :class=\"{ 'positive': currentPointYearOverYearChange?.amount > 0, 'negative': currentPointYearOverYearChange?.amount < 0 }\">\n              {{ currentPointYearOverYearChange?.amount > 0 ? '+' : '' }}{{ formatCurrency(currentPointYearOverYearChange?.amount) }} \n              ({{ formatPercent(currentPointYearOverYearChange?.percent) }})\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport MaterialIcon from '../ui/Icon.vue';\n\nexport default {\n  name: 'RevenueChart',\n  \n  components: {\n    icon: MaterialIcon\n  },\n  \n  props: {\n    /**\n     * Datos de ingresos de los últimos 12 meses\n     * Debe ser un array de objetos con las propiedades \"month\", \"year\" y \"revenue\"\n     */\n    revenueData: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    \n    /**\n     * Datos de ingresos históricos para comparación (año anterior)\n     * Debe seguir la misma estructura que revenueData\n     */\n    historicalData: {\n      type: Array,\n      default: () => []\n    },\n    \n    /**\n     * Si es true, intenta generar automáticamente datos históricos si no se proporcionan\n     */\n    autoGenerateHistorical: {\n      type: Boolean,\n      default: false\n    },\n    \n    /**\n     * Si es true, muestra la comparación por defecto\n     */\n    defaultShowComparison: {\n      type: Boolean,\n      default: false\n    },\n    \n    /**\n     * Cambio porcentual en los ingresos con respecto al período anterior\n     */\n    changePercent: {\n      type: Number,\n      default: 0\n    },\n    \n    /**\n     * Valor absoluto del cambio en los ingresos\n     */\n    changeAmount: {\n      type: Number,\n      default: 0\n    },\n    \n    /**\n     * Color principal del gráfico\n     */\n    color: {\n      type: String,\n      default: null\n    },\n    \n    /**\n     * Color para los datos de comparación del año anterior\n     */\n    comparisonColor: {\n      type: String,\n      default: '#777777'\n    }\n  },\n  \n  data() {\n    return {\n      chartWidth: 0,\n      chartHeight: 0,\n      currentMonthIndex: -1,\n      mouseOver: false,\n      mouseX: 0,\n      mouseY: 0,\n      showComparison: this.defaultShowComparison,\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\n      yAxisLabelsCount: 5, // Número de etiquetas en el eje Y\n      // Datos simulados para el gráfico si no se proporcionan\n      defaultData: [\n        { month: 'Ene', year: new Date().getFullYear(), revenue: 1000000 },\n        { month: 'Feb', year: new Date().getFullYear(), revenue: 1200000 },\n        { month: 'Mar', year: new Date().getFullYear(), revenue: 2500000 },\n        { month: 'Abr', year: new Date().getFullYear(), revenue: 3800000 },\n        { month: 'May', year: new Date().getFullYear(), revenue: 5200000 },\n        { month: 'Jun', year: new Date().getFullYear(), revenue: 4800000 },\n        { month: 'Jul', year: new Date().getFullYear(), revenue: 8500000 },\n        { month: 'Ago', year: new Date().getFullYear(), revenue: 12000000 },\n        { month: 'Sep', year: new Date().getFullYear(), revenue: 9500000 },\n        { month: 'Oct', year: new Date().getFullYear(), revenue: 11000000 },\n        { month: 'Nov', year: new Date().getFullYear(), revenue: 12500000 },\n        { month: 'Dic', year: new Date().getFullYear(), revenue: 15000000 }\n      ],\n      // Datos simulados para comparación del año anterior\n      defaultHistoricalData: [],\n      // Tooltip mostrado actualmente (principal o histórico)\n      activeTooltipType: 'current',\n      // Detectar si estamos en un dispositivo móvil\n      windowWidth: window.innerWidth,\n      showPeriodSelector: false,\n      selectedPeriod: '12m',\n      availablePeriods: [\n        { value: '1d', label: 'Último día' },\n        { value: '3d', label: 'Últimos 3 días' },\n        { value: '7d', label: 'Últimos 7 días' },\n        { value: '1m', label: 'Último mes' },\n        { value: '3m', label: 'Últimos 3 meses' },\n        { value: '6m', label: 'Últimos 6 meses' },\n        { value: '9m', label: 'Últimos 9 meses' },\n        { value: '12m', label: 'Últimos 12 meses' }\n      ],\n    };\n  },\n  \n  computed: {\n    /**\n     * Detecta si estamos en modo oscuro\n     */\n    isDarkTheme() {\n      return document.documentElement.getAttribute('data-theme') === 'dark';\n    },\n    \n    /**\n     * Detecta si estamos en un dispositivo móvil basado en el ancho de la ventana\n     */\n    isMobile() {\n      return this.windowWidth <= 768;\n    },\n    \n    /**\n     * Determina el color a usar para el gráfico según el valor de cambio\n     */\n    chartLineColor() {\n      if (this.color) return this.color;\n      \n      // Si es positivo, usar verde como en SalesCard\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      }\n      // Si es negativo, usar rojo como en SalesCard\n      else if (this.totalChange < 0) {\n        return '#e74c3c';\n      }\n      // Si es neutral, usar color turquesa por defecto\n      else {\n        return '#2dc6af';\n      }\n    },\n    \n    /**\n     * Color para la línea de comparación del año anterior\n     */\n    comparisonLineColor() {\n      return this.comparisonColor || '#777777';\n    },\n    \n    /**\n     * Color para la parte superior del gradiente\n     */\n    chartGradientTop() {\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      } else if (this.totalChange < 0) {\n        return '#e74c3c';\n      } else {\n        return '#2dc6af';\n      }\n    },\n    \n    /**\n     * Color para la parte inferior del gradiente\n     */\n    chartGradientBottom() {\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      } else if (this.totalChange < 0) {\n        return '#e74c3c';\n      } else {\n        return '#2dc6af';\n      }\n    },\n    \n    /**\n     * Obtiene los datos de ingresos actuales, generando datos con años si es necesario\n     */\n    chartData() {\n      if (this.revenueData.length > 0) {\n        return this.ensureYearInData(this.revenueData);\n      }\n      return this.defaultData;\n    },\n    \n    /**\n     * Obtiene los datos históricos para la comparación, generando si es necesario\n     */\n    historicalChartData() {\n      if (this.historicalData.length > 0) {\n        return this.ensureYearInData(this.historicalData);\n      }\n      \n      if (this.autoGenerateHistorical && this.chartData.length > 0) {\n        return this.generateHistoricalData();\n      }\n      \n      return this.defaultHistoricalData;\n    },\n    \n    /**\n     * Calcula el total de ingresos sumando todos los valores\n     */\n    totalRevenue() {\n      return this.filteredChartData.reduce((sum, item) => sum + item.revenue, 0);\n    },\n    \n    /**\n     * Calcula el total de ingresos del año anterior para comparación\n     */\n    totalHistoricalRevenue() {\n      return this.filteredHistoricalChartData.reduce((sum, item) => sum + item.revenue, 0);\n    },\n    \n    /**\n     * Calcula la diferencia porcentual entre el periodo actual y el histórico\n     */\n    yearOverYearChangePercent() {\n      if (!this.totalHistoricalRevenue) return 0;\n      return ((this.totalRevenue - this.totalHistoricalRevenue) / this.totalHistoricalRevenue) * 100;\n    },\n    \n    /**\n     * Formatea el total de ingresos para mostrar\n     */\n    formattedTotalRevenue() {\n      return this.formatLargeNumber(this.totalRevenue);\n    },\n    \n    /**\n     * Obtiene el valor de cambio total\n     */\n    totalChange() {\n      if (this.showComparison && this.historicalChartData.length > 0) {\n        return this.totalRevenue - this.totalHistoricalRevenue;\n      }\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\n    },\n    \n    /**\n     * Formatea el cambio total para mostrar\n     */\n    formattedTotalChange() {\n      return this.formatLargeNumber(this.totalChange);\n    },\n    \n    /**\n     * Formatea el porcentaje de cambio\n     */\n    formattedChangePercent() {\n      if (this.showComparison && this.historicalChartData.length > 0) {\n        return this.yearOverYearChangePercent.toFixed(1);\n      }\n      return (this.changePercent || 12.2).toFixed(1);\n    },\n    \n    /**\n     * Calcula la ruta SVG para la línea del gráfico usando curvas suavizadas\n     */\n    linePath() {\n      if (!this.filteredChartData.length || !this.chartWidth || !this.chartHeight) return '';\n      \n      const { maxValue } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      \n      // Crear puntos para la curva\n      const points = this.filteredChartData.map((point, index) => {\n        const x = (index / (this.filteredChartData.length - 1)) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\n        return [x, y];\n      });\n      \n      // Generar la curva suavizada usando curvas de Bézier\n      return points.reduce((path, point, i) => {\n        if (i === 0) {\n          return `M ${point[0]},${point[1]}`;\n        }\n        \n        // Calcular los puntos de control para la curva\n        const prev = points[i - 1];\n        const curr = point;\n        \n        // Calcular puntos de control para curva suave\n        const controlPoint1 = [\n          prev[0] + (curr[0] - prev[0]) * 0.5,\n          prev[1]\n        ];\n        const controlPoint2 = [\n          curr[0] - (curr[0] - prev[0]) * 0.5,\n          curr[1]\n        ];\n        \n        return `${path} C ${controlPoint1[0]},${controlPoint1[1]} ${controlPoint2[0]},${controlPoint2[1]} ${curr[0]},${curr[1]}`;\n      }, '');\n    },\n    \n    /**\n     * Calcula la ruta SVG para la línea de comparación del año anterior usando curvas suavizadas\n     */\n    comparisonLinePath() {\n      if (!this.showComparison || !this.filteredHistoricalChartData.length || !this.chartWidth || !this.chartHeight) return '';\n      \n      const { maxValue } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      \n      // Crear puntos para la curva de comparación\n      const points = this.filteredHistoricalChartData.map((point, index) => {\n        const x = (index / (this.filteredHistoricalChartData.length - 1)) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\n        return [x, y];\n      });\n      \n      // Generar la curva suavizada usando curvas de Bézier\n      return points.reduce((path, point, i) => {\n        if (i === 0) {\n          return `M ${point[0]},${point[1]}`;\n        }\n        \n        const prev = points[i - 1];\n        const curr = point;\n        \n        const controlPoint1 = [\n          prev[0] + (curr[0] - prev[0]) * 0.5,\n          prev[1]\n        ];\n        const controlPoint2 = [\n          curr[0] - (curr[0] - prev[0]) * 0.5,\n          curr[1]\n        ];\n        \n        return `${path} C ${controlPoint1[0]},${controlPoint1[1]} ${controlPoint2[0]},${controlPoint2[1]} ${curr[0]},${curr[1]}`;\n      }, '');\n    },\n    \n    /**\n     * Calcula la ruta SVG para el área bajo la línea usando curvas suavizadas\n     */\n    areaPath() {\n      if (!this.filteredChartData.length || !this.chartWidth || !this.chartHeight) return '';\n      \n      const { maxValue } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      \n      // Crear puntos para la curva\n      const points = this.filteredChartData.map((point, index) => {\n        const x = (index / (this.filteredChartData.length - 1)) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\n        return [x, y];\n      });\n      \n      // Generar la curva suavizada con área\n      const curvePath = points.reduce((path, point, i) => {\n        if (i === 0) {\n          return `M ${point[0]},${point[1]}`;\n        }\n        \n        const prev = points[i - 1];\n        const curr = point;\n        \n        const controlPoint1 = [\n          prev[0] + (curr[0] - prev[0]) * 0.5,\n          prev[1]\n        ];\n        const controlPoint2 = [\n          curr[0] - (curr[0] - prev[0]) * 0.5,\n          curr[1]\n        ];\n        \n        return `${path} C ${controlPoint1[0]},${controlPoint1[1]} ${controlPoint2[0]},${controlPoint2[1]} ${curr[0]},${curr[1]}`;\n      }, '');\n      \n      // Cerrar el path para crear el área\n      return `${curvePath} L${availableWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\n    },\n    \n    /**\n     * Calcula todos los puntos de datos para determinar el punto exacto a mostrar en cada posición\n     */\n    dataPoints() {\n      if (!this.filteredChartData.length || !this.chartWidth || !this.chartHeight) return [];\n      \n      const { maxValue } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      \n      return this.filteredChartData.map((point, index) => {\n        const x = (index / (this.filteredChartData.length - 1)) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\n        \n        return {\n          x,\n          y,\n          month: point.month,\n          year: point.year,\n          value: point.revenue,\n          index,\n          type: 'current'\n        };\n      });\n    },\n    \n    /**\n     * Calcula los puntos de datos para el año anterior\n     */\n    historicalDataPoints() {\n      if (!this.showComparison || !this.filteredHistoricalChartData.length || !this.chartWidth || !this.chartHeight) return [];\n      \n      const { maxValue } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      \n      return this.filteredHistoricalChartData.map((point, index) => {\n        const x = (index / (this.filteredHistoricalChartData.length - 1)) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\n        \n        return {\n          x,\n          y,\n          month: point.month,\n          year: point.year,\n          value: point.revenue,\n          index,\n          type: 'historical'\n        };\n      });\n    },\n    \n    /**\n     * Obtiene la información del punto actual seleccionado\n     */\n    currentPoint() {\n      if (!this.dataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.dataPoints.length) \n        return null;\n      \n      // Siempre devolvemos el punto actual\n      return this.dataPoints[this.currentMonthIndex];\n    },\n    \n    /**\n     * Calcula el valor acumulado hasta el punto actual\n     */\n    currentPointAccumulated() {\n      if (!this.filteredChartData.length || this.currentMonthIndex < 0) return 0;\n      \n      let sum = 0;\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\n        sum += this.filteredChartData[i].revenue;\n      }\n      \n      return sum;\n    },\n    \n    /**\n     * Calcula la diferencia entre el punto actual y el mismo punto del año anterior\n     */\n    currentPointYearOverYearChange() {\n      if (!this.currentPoint || !this.showComparison || \n          this.currentMonthIndex < 0 || this.currentMonthIndex >= this.filteredChartData.length ||\n          this.currentMonthIndex >= this.filteredHistoricalChartData.length) {\n        return null;\n      }\n      \n      const currentValue = this.filteredChartData[this.currentMonthIndex].revenue;\n      const historicalValue = this.filteredHistoricalChartData[this.currentMonthIndex].revenue;\n      \n      return {\n        amount: currentValue - historicalValue,\n        percent: historicalValue ? ((currentValue - historicalValue) / historicalValue) * 100 : 0\n      };\n    },\n    \n    /**\n     * Estilo para la posición del tooltip basado en la posición del mouse\n     */\n    tooltipStyle() {\n      // Calcular si el tooltip debe aparecer a la izquierda o derecha del cursor\n      // para evitar que se salga de los bordes\n      const tooltipWidth = 180; // Aumentado para incluir la comparación\n      const tooltipHeight = this.showComparison ? 140 : 80; // Altura aumentada para incluir la comparación\n      const offset = 15; // Distancia del cursor al tooltip\n      \n      let left = this.mouseX + offset;\n      let top = this.mouseY - tooltipHeight / 2;\n      \n      // Evitar que se salga por el lado derecho\n      if (left + tooltipWidth > this.chartWidth) {\n        left = this.mouseX - tooltipWidth - offset;\n      }\n      \n      // Evitar que se salga por arriba\n      if (top < 0) {\n        top = 10;\n      }\n      \n      // Evitar que se salga por abajo\n      if (top + tooltipHeight > this.chartHeight) {\n        top = this.chartHeight - tooltipHeight - 10;\n      }\n      \n      return {\n        left: `${left}px`,\n        top: `${top}px`\n      };\n    },\n    \n    /**\n     * Calcula dinámicamente las etiquetas del eje Y basándose en los datos reales\n     */\n    yAxisLabels() {\n      const { maxValue } = this.calculateDataRange();\n      const labels = [];\n      \n      // Si no hay datos, retornar array vacío\n      if (maxValue <= 0) return [];\n      \n      // Encontrar un valor máximo redondeado adecuado para el eje Y\n      let roundedMax = this.getRoundedMax(maxValue);\n      \n      // Calcular el incremento entre etiquetas\n      const increment = roundedMax / (this.yAxisLabelsCount - 1);\n      \n      // Generar las etiquetas del eje Y\n      for (let i = 0; i < this.yAxisLabelsCount; i++) {\n        const value = i * increment;\n        labels.push(this.formatAxisLabel(value));\n      }\n      \n      // Regresar las etiquetas en orden de mayor a menor (para que coincidan con el dibujo)\n      return labels.reverse();\n    },\n    \n    /**\n     * Color para la cuadrícula basado en el tema\n     */\n    gridColor() {\n      return this.isDarkTheme ? '#ffffff' : '#000000';\n    },\n    \n    /**\n     * Obtiene la etiqueta del período seleccionado\n     */\n    selectedPeriodLabel() {\n      const period = this.availablePeriods.find(p => p.value === this.selectedPeriod);\n      return period ? period.label : 'Últimos 12 meses';\n    },\n\n    /**\n     * Filtra los datos según el período seleccionado\n     */\n    filteredChartData() {\n      const data = [...this.chartData];\n      \n      switch (this.selectedPeriod) {\n        case '1d':\n          return this.filterLastDays(data, 1);\n        case '3d':\n          return this.filterLastDays(data, 3);\n        case '7d':\n          return this.filterLastDays(data, 7);\n        case '1m':\n          return this.filterLastMonths(data, 1);\n        case '3m':\n          return this.filterLastMonths(data, 3);\n        case '6m':\n          return this.filterLastMonths(data, 6);\n        case '9m':\n          return this.filterLastMonths(data, 9);\n        default:\n          return data;\n      }\n    },\n\n    /**\n     * Filtra los datos históricos según el período seleccionado\n     */\n    filteredHistoricalChartData() {\n      if (!this.showComparison) return [];\n      \n      const data = [...this.historicalChartData];\n      \n      switch (this.selectedPeriod) {\n        case '1d':\n          return this.filterLastDays(data, 1);\n        case '3d':\n          return this.filterLastDays(data, 3);\n        case '7d':\n          return this.filterLastDays(data, 7);\n        case '1m':\n          return this.filterLastMonths(data, 1);\n        case '3m':\n          return this.filterLastMonths(data, 3);\n        case '6m':\n          return this.filterLastMonths(data, 6);\n        case '9m':\n          return this.filterLastMonths(data, 9);\n        default:\n          return data;\n      }\n    }\n  },\n  \n  mounted() {\n    this.updateChartDimensions();\n    window.addEventListener('resize', this.handleResize);\n    this.initDefaultHistoricalData();\n  },\n  \n  beforeUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  \n  watch: {\n    // Observar cambios en la visualización de la comparación\n    showComparison(newValue) {\n      // Emitir evento cuando cambia el modo de comparación\n      this.$emit('comparison-changed', newValue);\n    }\n  },\n  \n  methods: {\n    /**\n     * Maneja el evento de redimensionamiento de la ventana\n     */\n    handleResize() {\n      this.windowWidth = window.innerWidth;\n      this.updateChartDimensions();\n    },\n    \n    /**\n     * Inicializa los datos históricos por defecto\n     */\n    initDefaultHistoricalData() {\n      if (this.autoGenerateHistorical && this.defaultHistoricalData.length === 0) {\n        this.defaultHistoricalData = this.defaultData.map(item => ({\n          month: item.month,\n          year: item.year - 1,\n          revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\n        }));\n      }\n    },\n    \n    /**\n     * Genera datos históricos basados en los datos actuales\n     */\n    generateHistoricalData() {\n      return this.filteredChartData.map(item => ({\n        month: item.month,\n        year: item.year - 1, // Año anterior\n        revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\n      }));\n    },\n    \n    /**\n     * Asegura que todos los elementos de datos tengan un año\n     */\n    ensureYearInData(data) {\n      return data.map(item => {\n        if (!item.year) {\n          return {\n            ...item,\n            year: new Date().getFullYear() // Añadir el año actual si no existe\n          };\n        }\n        return item;\n      });\n    },\n    \n    /**\n     * Calcula el rango de valores para los dos conjuntos de datos\n     */\n    calculateDataRange() {\n      let dataToCompare = [...this.filteredChartData];\n      \n      if (this.showComparison && this.filteredHistoricalChartData.length > 0) {\n        dataToCompare = [...dataToCompare, ...this.filteredHistoricalChartData];\n      }\n      \n      // Obtener el valor máximo real de los datos\n      let maxValue = Math.max(...dataToCompare.map(d => d.revenue));\n      \n      // Usar el valor máximo redondeado para asegurar que coincida con las etiquetas del eje Y\n      maxValue = this.getRoundedMax(maxValue);\n      \n      return { maxValue };\n    },\n    \n    /**\n     * Actualiza las dimensiones del gráfico en función del contenedor\n     */\n    updateChartDimensions() {\n      if (this.$refs.chartContainer) {\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\n      }\n    },\n    \n    /**\n     * Gestiona el movimiento del mouse sobre el gráfico\n     * Usa un algoritmo de \"snap to nearest point\" mejorado para evitar cambios erráticos\n     */\n    handleMouseMove(event) {\n      if (!this.filteredChartData.length || !this.dataPoints.length) return;\n      \n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\n      const mouseX = event.clientX - chartRect.left;\n      const mouseY = event.clientY - chartRect.top;\n      \n      // Solo actualizar mouseY, mouseX se actualizará en updateActivePointFromPosition\n      this.mouseY = mouseY;\n      \n      // Encuentra el punto más cercano al mouse\n      this.updateActivePointFromPosition(mouseX);\n      this.mouseOver = true;\n    },\n    \n    /**\n     * Gestiona el movimiento táctil sobre el gráfico (para dispositivos móviles)\n     */\n    handleTouchMove(event) {\n      if (!this.filteredChartData.length || !this.dataPoints.length || !event.touches[0]) return;\n      \n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\n      const touchX = event.touches[0].clientX - chartRect.left;\n      const touchY = event.touches[0].clientY - chartRect.top;\n      \n      // Solo actualizar mouseY, mouseX se actualizará en updateActivePointFromPosition\n      this.mouseY = touchY;\n      \n      this.updateActivePointFromPosition(touchX);\n      this.mouseOver = true;\n      \n      // Prevenir el desplazamiento de la página durante el uso del gráfico\n      event.preventDefault();\n    },\n    \n    /**\n     * Actualiza el punto activo basado en la posición X del mouse/touch\n     * Algoritmo mejorado para prevenir saltos y movimientos bruscos\n     */\n    updateActivePointFromPosition(posX) {\n      // Asegurarse de que posX esté dentro de los límites del gráfico\n      posX = Math.min(Math.max(0, posX), this.chartWidth);\n      \n      if (this.dataPoints.length === 0) return;\n      \n      // Calcular el ancho de cada segmento\n      const segmentWidth = this.chartWidth / (this.dataPoints.length - 1);\n      \n      // Encontrar el índice del punto más cercano basado en la posición X\n      const nearestIndex = Math.round(posX / segmentWidth);\n      \n      // Limitar el índice al rango válido\n      const boundedIndex = Math.min(Math.max(0, nearestIndex), this.dataPoints.length - 1);\n      \n      // Actualiza el índice sólo si es diferente\n      if (this.currentMonthIndex !== boundedIndex) {\n        this.currentMonthIndex = boundedIndex;\n        this.mouseX = this.dataPoints[boundedIndex].x;\n      }\n    },\n    \n    /**\n     * Restablece la visualización cuando el mouse deja el gráfico\n     */\n    resetHighlight() {\n      this.mouseOver = false;\n    },\n    \n    /**\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\n     */\n    formatLargeNumber(value) {\n      if (value >= 1000000000) {\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\n      } else if (value >= 1000000) {\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\n      } else if (value >= 1000) {\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\n      }\n      return value.toString();\n    },\n    \n    /**\n     * Formatea un valor monetario con separadores de miles\n     */\n    formatCurrency(value) {\n      return new Intl.NumberFormat('es-ES', {\n        maximumFractionDigits: 0\n      }).format(value);\n    },\n    \n    /**\n     * Formatea un valor de porcentaje\n     */\n    formatPercent(value) {\n      return `${value > 0 ? '+' : ''}${value.toFixed(1)}%`;\n    },\n    \n    /**\n     * Obtiene el valor del punto histórico en la posición actual\n     */\n    getHistoricalValueAtCurrentIndex() {\n      if (!this.showComparison || !this.historicalDataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.historicalDataPoints.length) return null;\n      \n      return this.historicalDataPoints[this.currentMonthIndex].value;\n    },\n    \n    /**\n     * Calcula un valor máximo redondeado apropiado para las etiquetas del eje Y\n     */\n    getRoundedMax(maxValue) {\n      // Determinar la magnitud del valor\n      const magnitude = Math.pow(10, Math.floor(Math.log10(maxValue)));\n      \n      // Redondear hacia arriba para obtener un valor \"limpio\"\n      let roundedMax = Math.ceil(maxValue / magnitude) * magnitude;\n      \n      // Si el valor redondeado es mucho mayor que el máximo real, ajustar\n      if (roundedMax > maxValue * 1.5) {\n        roundedMax = Math.ceil(maxValue / (magnitude / 2)) * (magnitude / 2);\n      }\n      \n      return roundedMax;\n    },\n    \n    /**\n     * Formatea las etiquetas del eje Y para que sean legibles\n     */\n    formatAxisLabel(value) {\n      return this.formatLargeNumber(value);\n    },\n    \n    /**\n     * Abre/cierra el selector de períodos\n     */\n    togglePeriodSelector() {\n      this.showPeriodSelector = !this.showPeriodSelector;\n    },\n\n    /**\n     * Cierra el selector de períodos\n     */\n    closePeriodSelector() {\n      this.showPeriodSelector = false;\n    },\n\n    /**\n     * Selecciona un nuevo período\n     */\n    selectPeriod(period) {\n      this.selectedPeriod = period;\n      this.showPeriodSelector = false;\n      this.$emit('period-changed', period);\n    },\n\n    /**\n     * Filtra los datos para mostrar los últimos X días\n     */\n    filterLastDays(data, days) {\n      const now = new Date();\n      const startDate = new Date(now.setDate(now.getDate() - days));\n      return data.filter(item => {\n        const itemDate = new Date(item.year, this.monthLabels.indexOf(item.month), 1);\n        return itemDate >= startDate;\n      });\n    },\n\n    /**\n     * Filtra los datos para mostrar los últimos X meses\n     */\n    filterLastMonths(data, months) {\n      const now = new Date();\n      const startDate = new Date(now.setMonth(now.getMonth() - months));\n      return data.filter(item => {\n        const itemDate = new Date(item.year, this.monthLabels.indexOf(item.month), 1);\n        return itemDate >= startDate;\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Definir variables CSS para los colores de la cuadrícula */\n:root {\n  --grid-color-dark: rgba(255, 255, 255, 0.1);\n  --grid-color-light: rgba(0, 0, 0, 0.1);\n}\n\n.revenue-chart-container {\n  background-color: var(--bg-secondary);\n  border-radius: 10px;\n  padding: 16px;\n  height: 350px;\n  display: flex;\n  flex-direction: column;\n  color: var(--text-primary);\n  position: relative;\n  background-color: var(--bg-secondary, #1a1a1a);\n  color: var(--text-primary, #efefef);\n  /* Eliminamos overflow: hidden para permitir que el menú sea visible */\n}\n\n.chart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 12px;\n}\n\n.chart-title-section {\n  display: flex;\n  flex-direction: column;\n}\n\n.chart-title {\n  font-size: 0.9rem;\n  font-weight: 600;\n  margin: 0 0 8px 0;\n  opacity: 0.9;\n  /* Efecto de texto 3D sutil */\n  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);\n}\n\n.revenue-amount {\n  font-size: 1.8rem;\n  font-weight: 700;\n  margin-bottom: 4px;\n  letter-spacing: -0.5px;\n  /* Efecto de texto 3D más pronunciado */\n  text-shadow: \n    0 1px 1px rgba(0, 0, 0, 0.1),\n    0 2px 2px rgba(0, 0, 0, 0.05);\n}\n\n.change-indicator {\n  display: flex;\n  align-items: center;\n  font-size: 0.8rem;\n}\n\n.change-value {\n  font-weight: 600;\n}\n\n.positive {\n  color: #27ae60; /* Verde que coincide con SalesCard */\n}\n\n.negative {\n  color: #e74c3c; /* Rojo que coincide con SalesCard */\n}\n\n.period {\n  opacity: 0.7;\n  margin-left: 4px;\n}\n\n.period-selector {\n  margin-left: auto;\n}\n\n.controls {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 8px;\n}\n\n.comparison-toggle {\n  display: flex;\n  align-items: center;\n  font-size: 0.75rem;\n  cursor: pointer;\n  opacity: 0.9;\n  transition: opacity 0.3s ease;\n}\n\n.comparison-toggle:hover {\n  opacity: 1;\n}\n\n.comparison-toggle input[type=\"checkbox\"] {\n  position: relative;\n  appearance: none;\n  width: 34px;\n  height: 16px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n  margin-right: 8px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.comparison-toggle input[type=\"checkbox\"]::before {\n  content: '';\n  position: absolute;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  top: 1px;\n  left: 1px;\n  background: #444;\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n}\n\n.comparison-toggle input[type=\"checkbox\"]:checked {\n  background: rgba(44, 187, 168, 0.5);\n}\n\n.comparison-toggle input[type=\"checkbox\"]:checked::before {\n  left: 19px;\n  background: #2dc6af;\n}\n\n.toggle-label {\n  white-space: nowrap;\n}\n\n.period-button {\n  display: flex;\n  align-items: center;\n  background: none;\n  border: none;\n  color: inherit;\n  font-size: 0.8rem;\n  padding: 4px 8px;\n  border-radius: 6px;\n  cursor: pointer;\n  opacity: 0.8;\n  transition: opacity 0.3s, background-color 0.3s;\n}\n\n.period-button:hover, \n.period-button.active {\n  background-color: rgba(255, 255, 255, 0.1);\n  opacity: 1;\n}\n\n.chart-content {\n  flex: 1;\n  display: flex;\n  position: relative;\n  /* Añadimos overflow solo para el contenido del gráfico */\n  overflow: hidden;\n}\n\n.chart-axes {\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 20px; /* Espacio para el eje X */\n  width: 50px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 10px 0;\n}\n\n.y-axis {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.axis-label {\n  font-size: 0.65rem;\n  color: rgba(255, 255, 255, 0.6);\n  text-align: left;\n}\n\n/* Ajuste para el modo claro - etiquetas del eje Y */\n:root:not([data-theme='dark']) .axis-label {\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.chart-graphic {\n  flex: 1;\n  margin-left: 50px; /* Ancho del eje Y */\n  position: relative;\n  height: 100%;\n  cursor: crosshair; /* Cambiar cursor al pasar el mouse sobre el gráfico */\n  padding-bottom: 5px; /* Dar más espacio en la parte inferior */\n}\n\n.chart-svg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: calc(100% - 20px); /* Restar altura del eje X por defecto */\n  width: calc(100% - 10px); /* Añadir un pequeño margen a la derecha para mostrar diciembre */\n}\n\n.x-axis {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  padding: 0 5px; /* Pequeño padding para evitar que las etiquetas toquen los bordes */\n  width: calc(100% - 10px); /* Hacer que el ancho coincida con el SVG */\n}\n\n.x-label {\n  transform: translateX(-50%);\n  font-size: 0.7rem;\n  font-weight: 500;\n  position: absolute;\n  text-align: center;\n}\n\n/* Ajuste para el modo claro - etiquetas del eje X */\n:root:not([data-theme='dark']) .x-label {\n  color: rgba(0, 0, 0, 0.6);\n}\n\n/* Ajuste especial para el primer y último mes */\n.x-label:first-child {\n  left: 0 !important; /* Forzar el primer mes al inicio */\n  transform: translateX(0); /* El primer mes se alinea al inicio */\n}\n\n.x-label:last-child {\n  left: calc(100% - 10px) !important; /* Forzar el último mes al final */\n  transform: translateX(-100%); /* El último mes se alinea al final */\n}\n\n.x-label.active {\n  font-weight: 600;\n}\n\n/* Ajuste adicional para noviembre y diciembre para evitar superposición */\n.x-label:nth-last-child(1), /* Dic */\n.x-label:nth-last-child(2) { /* Nov */\n  margin-left: -2px; /* Leve separación entre Nov y Dic */\n}\n\n/* Ajustar altura del eje X para acomodar las etiquetas rotadas */\n.x-axis {\n  height: 35px;\n  padding-bottom: 5px;\n}\n\n/* Los colores activos de los ejes X se definirán dinámicamente basados en chartLineColor */\n.positive .x-label.active {\n  color: #27ae60;\n}\n\n.negative .x-label.active {\n  color: #e74c3c;\n}\n\n/* Ajuste para el modo claro - etiquetas activas */\n:root:not([data-theme='dark']) .positive .x-label.active {\n  color: #1e8449; /* Verde más oscuro para mejor visibilidad en modo claro */\n}\n\n:root:not([data-theme='dark']) .negative .x-label.active {\n  color: #c0392b; /* Rojo más oscuro para mejor visibilidad en modo claro */\n}\n\n/* Estilos para los puntos de datos */\n.hover-point {\n  filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.3));\n  transition: transform 0.1s ease;\n}\n\n/* Ajustar el color del borde del círculo en modo claro */\n:root:not([data-theme='dark']) .chart-svg circle.hover-point {\n  stroke: #ffffff; /* Borde blanco en modo claro */\n  filter: drop-shadow(0 0 4px rgba(0, 0, 0, 0.5)); /* Sombra más pronunciada */\n}\n\n/* Ajustar el color de la línea vertical en modo claro */\n:root:not([data-theme='dark']) .chart-svg line {\n  stroke: var(--text-primary, #333) !important; /* Asegurar que la línea sea visible */\n  stroke-width: 1px; /* Líneas más finas en móvil */\n}\n\n/* Nuevo tooltip que sigue al cursor */\n.tooltip {\n  position: absolute;\n  z-index: 100;\n  background: var(--bg-secondary, #222);\n  color: var(--text-primary, #efefef);\n  border-radius: 6px;\n  padding: 6px 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  pointer-events: none;\n  width: auto;\n  min-width: 100px;\n  max-width: 220px;\n  opacity: 0;\n  animation: tooltipFade 0.1s ease-out forwards;\n}\n\n.tooltip::before {\n  content: '';\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: var(--bg-secondary, #222);\n  transform: rotate(45deg);\n  left: -4px;\n  top: 50%;\n  margin-top: -4px;\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Ajustes para el modo claro */\n:root:not([data-theme='dark']) .tooltip {\n  background: var(--bg-secondary, #fff);\n  color: var(--text-primary, #333);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08), 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n:root:not([data-theme='dark']) .tooltip::before {\n  background: var(--bg-secondary, #fff);\n  border-left: 1px solid rgba(0, 0, 0, 0.1);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n:root:not([data-theme='dark']) .tooltip-accumulated,\n:root:not([data-theme='dark']) .comparison-label {\n  color: var(--text-secondary, rgba(0, 0, 0, 0.6));\n}\n\n:root:not([data-theme='dark']) .tooltip-comparison {\n  border-top: 1px dashed var(--border-color, rgba(0, 0, 0, 0.1));\n}\n\n.tooltip-title {\n  font-size: 0.8rem;\n  font-weight: 600;\n  margin-bottom: 5px;\n  text-align: left;\n  color: var(--text-primary, #efefef);\n}\n\n.tooltip-value {\n  font-size: 0.9rem;\n  font-weight: 700;\n  margin-bottom: 3px;\n  text-align: left;\n}\n\n/* Aplica color basado en el valor */\n.positive .tooltip-value, \n.comparison-difference.positive {\n  color: #27ae60;\n}\n\n.negative .tooltip-value,\n.comparison-difference.negative {\n  color: #e74c3c;\n}\n\n/* Aseguramos que los colores positivo/negativo sean visibles en ambos modos */\n:root:not([data-theme='dark']) .positive .tooltip-value,\n:root:not([data-theme='dark']) .comparison-difference.positive {\n  color: #1e8449;\n}\n\n:root:not([data-theme='dark']) .negative .tooltip-value,\n:root:not([data-theme='dark']) .comparison-difference.negative {\n  color: #c0392b;\n}\n\n.tooltip-accumulated {\n  font-size: 0.7rem;\n  color: var(--text-secondary, rgba(255, 255, 255, 0.7));\n  text-align: left;\n  margin-bottom: 5px;\n}\n\n/* Estilos para la comparación de año a año */\n.tooltip-comparison {\n  margin-top: 5px;\n  padding-top: 5px;\n  border-top: 1px dashed var(--border-color, rgba(255, 255, 255, 0.15));\n}\n\n.comparison-label {\n  font-size: 0.7rem;\n  color: var(--text-secondary, rgba(255, 255, 255, 0.7));\n  text-align: left;\n  margin-bottom: 2px;\n}\n\n.comparison-value {\n  font-size: 0.8rem;\n  font-weight: 600;\n  text-align: left;\n  margin-bottom: 2px;\n  color: var(--text-primary, #efefef);\n}\n\n.comparison-difference {\n  font-size: 0.7rem;\n  font-weight: 600;\n  text-align: left;\n}\n\n@keyframes tooltipFade {\n  from { \n    opacity: 0;\n  }\n  to { \n    opacity: 1;\n  }\n}\n\n/* Eliminamos los estilos redundantes */\n.interaction-overlay {\n  cursor: crosshair;\n}\n\n/* Ajustes para móviles */\n@media (max-width: 768px) {\n  .revenue-chart-container {\n    height: 300px;\n    padding: 12px;\n  }\n  \n  .revenue-amount {\n    font-size: 1.6rem;\n  }\n  \n  .chart-title {\n    font-size: 0.85rem;\n  }\n  \n  /* Ajustes para mejorar la experiencia táctil en móviles */\n  .chart-graphic {\n    cursor: pointer;\n    padding-bottom: 25px; /* Más espacio en la parte inferior para las etiquetas */\n  }\n  \n  /* Ajustando el tooltip para móviles */\n  .tooltip {\n    padding: 6px 10px;\n    min-width: 100px;\n  }\n  \n  .tooltip-title {\n    font-size: 0.8rem;\n  }\n  \n  .tooltip-value {\n    font-size: 0.9rem;\n  }\n  \n  .tooltip-accumulated,\n  .comparison-label,\n  .comparison-value,\n  .comparison-difference {\n    font-size: 0.7rem;\n  }\n  \n  /* Ajustar controles y toggle para móviles */\n  .controls {\n    flex-direction: column;\n    gap: 5px;\n  }\n  \n  .comparison-toggle {\n    font-size: 0.7rem;\n  }\n  \n  .comparison-toggle input[type=\"checkbox\"] {\n    width: 30px;\n    height: 14px;\n    margin-right: 6px;\n  }\n  \n  .comparison-toggle input[type=\"checkbox\"]::before {\n    width: 12px;\n    height: 12px;\n  }\n  \n  .comparison-toggle input[type=\"checkbox\"]:checked::before {\n    left: 17px;\n  }\n  \n  /* Base para todos los meses en móvil - estilo diagonal unificado */\n  .x-label {\n    transform: translateX(-50%) rotate(-35deg) !important;\n    transform-origin: center top !important;\n    font-size: 0.7rem;\n    top: auto;\n    bottom: 5px; /* Separar un poco del borde inferior */\n    height: 20px;\n    line-height: 1;\n    margin-top: 0;\n    white-space: nowrap;\n    color: rgba(255, 255, 255, 0.6);\n  }\n  \n  /* Ajustar la altura del eje X y su posición */\n  .x-axis {\n    height: 30px; /* Ajustar altura para etiquetas en la parte inferior */\n    padding-bottom: 5px; /* Añadir padding en la parte inferior */\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n  \n  /* Ajustar el tamaño del SVG */\n  .chart-svg {\n    height: calc(100% - 30px); /* Ajustar a la nueva altura del eje X */\n  }\n  \n  /* Líneas más finas en móvil */\n  .chart-svg line {\n    stroke-width: 1px !important;\n  }\n  \n  /* Ajuste para el modo claro en móvil */\n  :root:not([data-theme='dark']) .x-label {\n    color: rgba(0, 0, 0, 0.6);\n  }\n  \n  /* Posiciones específicas para cada mes */\n  .x-label.month-0 { left: 3% !important; }\n  .x-label.month-1 { left: 11% !important; }\n  .x-label.month-2 { left: 19% !important; }\n  .x-label.month-3 { left: 27% !important; }\n  .x-label.month-4 { left: 35% !important; }\n  .x-label.month-5 { left: 43% !important; }\n  .x-label.month-6 { left: 51% !important; }\n  .x-label.month-7 { left: 60% !important; }\n  .x-label.month-8 { left: 69% !important; }\n  .x-label.month-9 { left: 78% !important; }\n  .x-label.month-10 { left: 87% !important; }\n  .x-label.month-11 { left: 97% !important; }\n}\n\n/* Ajustes para los elementos SVG en modo claro */\n:root:not([data-theme='dark']) .chart-svg path[fill=\"url(#areaGradient)\"] {\n  opacity: 0.7; /* Aumentar la opacidad del área en modo claro */\n}\n\n:root:not([data-theme='dark']) .chart-svg path[stroke] {\n  stroke-width: 2.5px; /* Líneas ligeramente más gruesas en modo claro */\n}\n\n/* Ajustes para el contenedor del gráfico en modo claro */\n:root:not([data-theme='dark']) .chart-content {\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n/* Ajustes para el contenedor del eje Y en modo claro */\n:root:not([data-theme='dark']) .chart-axes {\n  border-right: 1px dashed rgba(0, 0, 0, 0.1);\n}\n\n/* Posicionamiento base para las etiquetas de meses */\n.x-label.month-0 { left: 0%; transform: translateX(0); } /* Enero */\n.x-label.month-1 { left: 9.09%; } /* Febrero */\n.x-label.month-2 { left: 18.18%; } /* Marzo */\n.x-label.month-3 { left: 27.27%; } /* Abril */\n.x-label.month-4 { left: 36.36%; } /* Mayo */\n.x-label.month-5 { left: 45.45%; } /* Junio */\n.x-label.month-6 { left: 54.54%; } /* Julio */\n.x-label.month-7 { left: 63.63%; } /* Agosto */\n.x-label.month-8 { left: 72.72%; } /* Septiembre */\n.x-label.month-9 { left: 81.81%; } /* Octubre */\n.x-label.month-10 { left: 90.90%; } /* Noviembre */\n.x-label.month-11 { left: 100%; transform: translateX(-100%); } /* Diciembre */\n\n/* Estilos mejorados para el punto indicador */\n.hover-point-group {\n  animation: pointAppear 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  transform-origin: center center;\n}\n\n.point-glow {\n  animation: glowPulse 2s ease-in-out infinite;\n  filter: blur(3px);\n}\n\n.point-ring {\n  animation: ringPulse 2s ease-in-out infinite;\n}\n\n.point-center {\n  filter: drop-shadow(0 0 6px rgba(0, 0, 0, 0.3));\n  animation: centerPulse 2s ease-in-out infinite;\n}\n\n@keyframes pointAppear {\n  from {\n    transform: scale(0);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes glowPulse {\n  0% {\n    opacity: 0.15;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 0.25;\n    transform: scale(1.1);\n  }\n  100% {\n    opacity: 0.15;\n    transform: scale(1);\n  }\n}\n\n@keyframes ringPulse {\n  0% {\n    opacity: 0.3;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 0.4;\n    transform: scale(1.05);\n  }\n  100% {\n    opacity: 0.3;\n    transform: scale(1);\n  }\n}\n\n@keyframes centerPulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n/* Ajustes para modo claro */\n:root:not([data-theme='dark']) .point-center {\n  stroke: #ffffff;\n  filter: drop-shadow(0 0 8px rgba(0, 0, 0, 0.4));\n}\n\n/* Ajustes para móvil */\n@media (max-width: 768px) {\n  .point-glow {\n    filter: blur(2px);\n  }\n  \n  .point-center {\n    filter: drop-shadow(0 0 4px rgba(0, 0, 0, 0.3));\n  }\n}\n\n/* Ajustar el patrón de la cuadrícula para ambos modos */\n:root[data-theme='dark'] .chart-svg pattern path {\n  stroke: #ffffff;\n  stroke-opacity: 0.1;\n}\n\n:root:not([data-theme='dark']) .chart-svg pattern path {\n  stroke: #000000;\n  stroke-opacity: 0.1;\n}\n\n/* Asegurar que el rectángulo de la cuadrícula sea visible en ambos modos */\n.chart-svg rect[fill=\"url(#grid)\"] {\n  opacity: 1;\n}\n\n.period-dropdown {\n  position: relative;\n  display: inline-block;\n  z-index: 1000;\n}\n\n.period-options {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  z-index: 1000;\n  margin-top: 4px;\n  min-width: 160px;\n  max-height: none;\n  overflow-y: visible;\n  animation: fadeIn 0.2s ease-out;\n}\n\n.period-option {\n  display: block;\n  width: 100%;\n  padding: 8px 12px;\n  text-align: left;\n  background: none;\n  border: none;\n  color: var(--text-primary);\n  font-size: 0.8rem;\n  cursor: pointer;\n  transition: background-color 0.2s;\n  white-space: nowrap;\n}\n\n.period-option:hover {\n  background-color: var(--bg-hover);\n}\n\n.period-option.active {\n  background-color: var(--bg-active);\n  font-weight: 600;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Ajustes para móvil */\n@media (max-width: 768px) {\n  .period-options {\n    position: fixed;\n    left: 50%;\n    bottom: 0;\n    transform: translateX(-50%);\n    width: 100%;\n    max-width: 300px;\n    border-radius: 12px 12px 0 0;\n    max-height: 80vh;\n    overflow-y: auto;\n    animation: slideUp 0.3s ease-out;\n    padding: 8px 0;\n  }\n\n  .period-option {\n    padding: 12px 16px;\n    font-size: 0.9rem;\n  }\n\n  .period-dropdown {\n    position: static;\n  }\n}\n\n/* Fondo oscuro para móvil cuando el menú está abierto */\n.mobile-overlay {\n  display: none;\n}\n\n@media (max-width: 768px) {\n  .mobile-overlay {\n    display: block;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    animation: fadeIn 0.2s ease-out;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}