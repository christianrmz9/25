{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport ChartCard from './ChartCard.vue';\nexport default {\n  name: 'SalesChart',\n  components: {\n    ChartCard\n  },\n  props: {\n    /**\r\n     * Título del gráfico\r\n     */\n    title: {\n      type: String,\n      default: 'Ventas'\n    },\n    /**\r\n     * Tipo de datos (ventasDiarias, ventasSemanales, ventasMensuales)\r\n     */\n    dataType: {\n      type: String,\n      default: 'ventasDiarias',\n      validator: value => ['ventasDiarias', 'ventasSemanales', 'ventasMensuales'].includes(value)\n    },\n    /**\r\n     * Si se debe cargar solo cuando sea visible\r\n     */\n    loadOnVisible: {\n      type: Boolean,\n      default: true\n    },\n    /**\r\n     * Si se debe actualizar automáticamente\r\n     */\n    autoRefresh: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * Intervalo de actualización en ms\r\n     */\n    refreshInterval: {\n      type: Number,\n      default: 60000 // 1 minuto\n    }\n  },\n  methods: {\n    /**\r\n     * Formatear valor como moneda\r\n     */\n    formatCurrency(value) {\n      return new Intl.NumberFormat('es-MX', {\n        style: 'currency',\n        currency: 'MXN',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      }).format(value);\n    },\n    /**\r\n     * Calcular altura de la barra en porcentaje\r\n     */\n    calculateBarHeight(value, allValues) {\n      if (!allValues || !allValues.length) return '0%';\n      const maxValue = Math.max(...allValues);\n      if (maxValue === 0) return '0%';\n      const percentage = value / maxValue * 100;\n      return `${percentage}%`;\n    },\n    /**\r\n     * Obtener suma total de ventas\r\n     */\n    getTotalSales(values) {\n      if (!values || !values.length) return 0;\n      return values.reduce((sum, value) => sum + value, 0);\n    },\n    /**\r\n     * Obtener promedio de ventas\r\n     */\n    getAverageSales(values) {\n      if (!values || !values.length) return 0;\n      return this.getTotalSales(values) / values.length;\n    }\n  }\n};","map":{"version":3,"names":["ChartCard","name","components","props","title","type","String","default","dataType","validator","value","includes","loadOnVisible","Boolean","autoRefresh","refreshInterval","Number","methods","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","calculateBarHeight","allValues","length","maxValue","Math","max","percentage","getTotalSales","values","reduce","sum","getAverageSales"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\SalesChart.vue"],"sourcesContent":["<template>\r\n  <chart-card\r\n    :title=\"title\"\r\n    :data-type=\"dataType\"\r\n    :load-on-visible=\"loadOnVisible\"\r\n    :auto-refresh=\"autoRefresh\"\r\n    :refresh-interval=\"refreshInterval\"\r\n  >\r\n    <template v-slot:default=\"{ data }\">\r\n      <div class=\"sales-chart-container\">\r\n        <!-- Para simplicidad, solo mostramos los datos en texto -->\r\n        <!-- En un caso real, aquí usarías un componente de gráfico como Chart.js, Echarts, etc. -->\r\n        <div v-if=\"data && data.labels && data.values\" class=\"chart-data\">\r\n          <div class=\"chart-summary\">\r\n            <div class=\"chart-total\">\r\n              {{ formatCurrency(getTotalSales(data.values)) }}\r\n              <span class=\"chart-label\">Total</span>\r\n            </div>\r\n            <div class=\"chart-average\">\r\n              {{ formatCurrency(getAverageSales(data.values)) }}\r\n              <span class=\"chart-label\">Promedio</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"chart-bars\">\r\n            <div \r\n              v-for=\"(value, index) in data.values\" \r\n              :key=\"index\"\r\n              class=\"chart-bar-item\"\r\n            >\r\n              <div \r\n                class=\"chart-bar\" \r\n                :style=\"{ height: calculateBarHeight(value, data.values) }\"\r\n              ></div>\r\n              <div class=\"chart-bar-label\">{{ data.labels[index] }}</div>\r\n              <div class=\"chart-bar-value\">{{ formatCurrency(value) }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </chart-card>\r\n</template>\r\n\r\n<script>\r\nimport ChartCard from './ChartCard.vue';\r\n\r\nexport default {\r\n  name: 'SalesChart',\r\n  \r\n  components: {\r\n    ChartCard\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Título del gráfico\r\n     */\r\n    title: {\r\n      type: String,\r\n      default: 'Ventas'\r\n    },\r\n    \r\n    /**\r\n     * Tipo de datos (ventasDiarias, ventasSemanales, ventasMensuales)\r\n     */\r\n    dataType: {\r\n      type: String,\r\n      default: 'ventasDiarias',\r\n      validator: value => ['ventasDiarias', 'ventasSemanales', 'ventasMensuales'].includes(value)\r\n    },\r\n    \r\n    /**\r\n     * Si se debe cargar solo cuando sea visible\r\n     */\r\n    loadOnVisible: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    \r\n    /**\r\n     * Si se debe actualizar automáticamente\r\n     */\r\n    autoRefresh: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    \r\n    /**\r\n     * Intervalo de actualización en ms\r\n     */\r\n    refreshInterval: {\r\n      type: Number,\r\n      default: 60000 // 1 minuto\r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Formatear valor como moneda\r\n     */\r\n    formatCurrency(value) {\r\n      return new Intl.NumberFormat('es-MX', {\r\n        style: 'currency',\r\n        currency: 'MXN',\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0\r\n      }).format(value);\r\n    },\r\n    \r\n    /**\r\n     * Calcular altura de la barra en porcentaje\r\n     */\r\n    calculateBarHeight(value, allValues) {\r\n      if (!allValues || !allValues.length) return '0%';\r\n      \r\n      const maxValue = Math.max(...allValues);\r\n      if (maxValue === 0) return '0%';\r\n      \r\n      const percentage = (value / maxValue) * 100;\r\n      return `${percentage}%`;\r\n    },\r\n    \r\n    /**\r\n     * Obtener suma total de ventas\r\n     */\r\n    getTotalSales(values) {\r\n      if (!values || !values.length) return 0;\r\n      return values.reduce((sum, value) => sum + value, 0);\r\n    },\r\n    \r\n    /**\r\n     * Obtener promedio de ventas\r\n     */\r\n    getAverageSales(values) {\r\n      if (!values || !values.length) return 0;\r\n      return this.getTotalSales(values) / values.length;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.sales-chart-container {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n}\r\n\r\n.chart-data {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chart-summary {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 0 20px;\r\n  border-bottom: 1px solid var(--border, #eee);\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.chart-total, .chart-average {\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 1.4rem;\r\n  font-weight: 700;\r\n  color: var(--text-primary);\r\n}\r\n\r\n.chart-label {\r\n  font-size: 0.8rem;\r\n  font-weight: 400;\r\n  color: var(--text-secondary);\r\n  margin-top: 2px;\r\n}\r\n\r\n.chart-bars {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n  height: 200px;\r\n  margin-top: auto;\r\n  position: relative;\r\n}\r\n\r\n.chart-bar-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n  position: relative;\r\n  z-index: 2;\r\n}\r\n\r\n.chart-bar {\r\n  width: 36px;\r\n  min-height: 4px;\r\n  background-color: var(--primary, #4f46e5);\r\n  border-radius: 4px 4px 0 0;\r\n  transition: height 0.3s ease;\r\n}\r\n\r\n.chart-bar-label {\r\n  margin-top: 8px;\r\n  font-size: 0.75rem;\r\n  color: var(--text-secondary);\r\n  white-space: nowrap;\r\n}\r\n\r\n.chart-bar-value {\r\n  margin-top: 4px;\r\n  font-size: 0.7rem;\r\n  font-weight: 600;\r\n  color: var(--text-primary);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chart-bar {\r\n    width: 24px;\r\n  }\r\n  \r\n  .chart-bar-value {\r\n    font-size: 0.65rem;\r\n  }\r\n  \r\n  .chart-summary {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n  \r\n  .chart-total, .chart-average {\r\n    margin-bottom: 8px;\r\n  }\r\n}\r\n</style> "],"mappings":";;AA6CA,OAAOA,SAAQ,MAAO,iBAAiB;AAEvC,eAAe;EACbC,IAAI,EAAE,YAAY;EAElBC,UAAU,EAAE;IACVF;EACF,CAAC;EAEDG,KAAK,EAAE;IACL;;;IAGAC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX,CAAC;IAED;;;IAGAC,QAAQ,EAAE;MACRH,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,eAAe;MACxBE,SAAS,EAAEC,KAAI,IAAK,CAAC,eAAe,EAAE,iBAAiB,EAAE,iBAAiB,CAAC,CAACC,QAAQ,CAACD,KAAK;IAC5F,CAAC;IAED;;;IAGAE,aAAa,EAAE;MACbP,IAAI,EAAEQ,OAAO;MACbN,OAAO,EAAE;IACX,CAAC;IAED;;;IAGAO,WAAW,EAAE;MACXT,IAAI,EAAEQ,OAAO;MACbN,OAAO,EAAE;IACX,CAAC;IAED;;;IAGAQ,eAAe,EAAE;MACfV,IAAI,EAAEW,MAAM;MACZT,OAAO,EAAE,KAAI,CAAE;IACjB;EACF,CAAC;EAEDU,OAAO,EAAE;IACP;;;IAGAC,cAAcA,CAACR,KAAK,EAAE;MACpB,OAAO,IAAIS,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QACpCC,KAAK,EAAE,UAAU;QACjBC,QAAQ,EAAE,KAAK;QACfC,qBAAqB,EAAE,CAAC;QACxBC,qBAAqB,EAAE;MACzB,CAAC,CAAC,CAACC,MAAM,CAACf,KAAK,CAAC;IAClB,CAAC;IAED;;;IAGAgB,kBAAkBA,CAAChB,KAAK,EAAEiB,SAAS,EAAE;MACnC,IAAI,CAACA,SAAQ,IAAK,CAACA,SAAS,CAACC,MAAM,EAAE,OAAO,IAAI;MAEhD,MAAMC,QAAO,GAAIC,IAAI,CAACC,GAAG,CAAC,GAAGJ,SAAS,CAAC;MACvC,IAAIE,QAAO,KAAM,CAAC,EAAE,OAAO,IAAI;MAE/B,MAAMG,UAAS,GAAKtB,KAAI,GAAImB,QAAQ,GAAI,GAAG;MAC3C,OAAO,GAAGG,UAAU,GAAG;IACzB,CAAC;IAED;;;IAGAC,aAAaA,CAACC,MAAM,EAAE;MACpB,IAAI,CAACA,MAAK,IAAK,CAACA,MAAM,CAACN,MAAM,EAAE,OAAO,CAAC;MACvC,OAAOM,MAAM,CAACC,MAAM,CAAC,CAACC,GAAG,EAAE1B,KAAK,KAAK0B,GAAE,GAAI1B,KAAK,EAAE,CAAC,CAAC;IACtD,CAAC;IAED;;;IAGA2B,eAAeA,CAACH,MAAM,EAAE;MACtB,IAAI,CAACA,MAAK,IAAK,CAACA,MAAM,CAACN,MAAM,EAAE,OAAO,CAAC;MACvC,OAAO,IAAI,CAACK,aAAa,CAACC,MAAM,IAAIA,MAAM,CAACN,MAAM;IACnD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}