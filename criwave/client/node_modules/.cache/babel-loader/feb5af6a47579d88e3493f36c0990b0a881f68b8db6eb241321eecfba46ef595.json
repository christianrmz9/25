{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"date-range-chart\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"date-controls\"\n};\nconst _hoisted_4 = {\n  class: \"date-picker-container\"\n};\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"date-picker-popup\"\n};\nconst _hoisted_7 = {\n  class: \"calendar\"\n};\nconst _hoisted_8 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_9 = {\n  class: \"calendar-body\"\n};\nconst _hoisted_10 = {\n  class: \"weekdays\"\n};\nconst _hoisted_11 = {\n  class: \"days\"\n};\nconst _hoisted_12 = [\"onClick\"];\nconst _hoisted_13 = {\n  class: \"calendar-footer\"\n};\nconst _hoisted_14 = [\"disabled\"];\nconst _hoisted_15 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_16 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_17 = {\n  key: 2,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Ventas por Rango de Fecha\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"input\", {\n    type: \"text\",\n    readonly: \"\",\n    value: _ctx.formatDateRange,\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.toggleDatePicker && _ctx.toggleDatePicker(...args)),\n    class: \"date-input\",\n    placeholder: \"Seleccionar rango de fechas\"\n  }, null, 8 /* PROPS */, _hoisted_5), _ctx.showDatePicker ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.prevMonth && _ctx.prevMonth(...args)),\n    class: \"month-nav\"\n  }, \"<\"), _createElementVNode(\"span\", null, _toDisplayString(_ctx.currentMonthName), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.nextMonth && _ctx.nextMonth(...args)),\n    class: \"month-nav\"\n  }, \">\")]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.weekDays, day => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: day\n    }, _toDisplayString(day), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.calendarDays, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: _normalizeClass([\"day\", {\n        'selected': _ctx.isSelected(day.date),\n        'in-range': _ctx.isInRange(day.date),\n        'disabled': _ctx.isDisabled(day.date),\n        'today': _ctx.isToday(day.date),\n        'other-month': day.isOtherMonth\n      }]),\n      onClick: $event => _ctx.selectDate(day.date)\n    }, _toDisplayString(day.dayNumber), 11 /* TEXT, CLASS, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.applyRange && _ctx.applyRange(...args)),\n    class: \"apply-btn\",\n    disabled: !_ctx.canApply\n  }, \" Aplicar \", 8 /* PROPS */, _hoisted_14)])])])) : _createCommentVNode(\"v-if\", true)])])]), _ctx.hasDateRange ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, _cache[5] || (_cache[5] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _ctx.hasData ? (_openBlock(), _createBlock(_component_apexchart, {\n    key: 1,\n    type: \"area\",\n    height: \"350\",\n    options: _ctx.chartOptions,\n    series: _ctx.series\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])) : !_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, \" Selecciona un rango de fechas para visualizar los datos \")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","type","readonly","value","_ctx","formatDateRange","onClick","_cache","args","toggleDatePicker","placeholder","_hoisted_5","showDatePicker","_hoisted_6","_hoisted_7","_hoisted_8","prevMonth","_toDisplayString","currentMonthName","nextMonth","_hoisted_9","_hoisted_10","_Fragment","_renderList","weekDays","day","_hoisted_11","calendarDays","date","_normalizeClass","isSelected","isInRange","isDisabled","isToday","isOtherMonth","$event","selectDate","dayNumber","_hoisted_12","_hoisted_13","applyRange","disabled","canApply","_hoisted_14","_createCommentVNode","hasDateRange","_hoisted_15","isLoading","_hoisted_16","hasData","_createBlock","_component_apexchart","height","options","chartOptions","series","_hoisted_17"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\DateRangeChart.vue"],"sourcesContent":["<template>\n  <div class=\"date-range-chart\">\n    <div class=\"chart-header\">\n      <h3>Ventas por Rango de Fecha</h3>\n      <div class=\"date-controls\">\n        <div class=\"date-picker-container\">\n          <input \n            type=\"text\" \n            readonly\n            :value=\"formatDateRange\"\n            @click=\"toggleDatePicker\"\n            class=\"date-input\"\n            placeholder=\"Seleccionar rango de fechas\"\n          >\n          <div v-if=\"showDatePicker\" class=\"date-picker-popup\">\n            <div class=\"calendar\">\n              <div class=\"calendar-header\">\n                <button @click=\"prevMonth\" class=\"month-nav\">&lt;</button>\n                <span>{{ currentMonthName }}</span>\n                <button @click=\"nextMonth\" class=\"month-nav\">&gt;</button>\n              </div>\n              <div class=\"calendar-body\">\n                <div class=\"weekdays\">\n                  <span v-for=\"day in weekDays\" :key=\"day\">{{ day }}</span>\n                </div>\n                <div class=\"days\">\n                  <div \n                    v-for=\"day in calendarDays\" \n                    :key=\"day.date\"\n                    class=\"day\"\n                    :class=\"{\n                      'selected': isSelected(day.date),\n                      'in-range': isInRange(day.date),\n                      'disabled': isDisabled(day.date),\n                      'today': isToday(day.date),\n                      'other-month': day.isOtherMonth\n                    }\"\n                    @click=\"selectDate(day.date)\"\n                  >\n                    {{ day.dayNumber }}\n                  </div>\n                </div>\n              </div>\n              <div class=\"calendar-footer\">\n                <button @click=\"applyRange\" class=\"apply-btn\" :disabled=\"!canApply\">\n                  Aplicar\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n      \n    <div class=\"chart-container\" v-if=\"hasDateRange\">\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\n        <div class=\"loading-spinner\"></div>\n      </div>\n      <apexchart\n        v-if=\"hasData\"\n        type=\"area\"\n        height=\"350\"\n        :options=\"chartOptions\"\n        :series=\"series\"\n      ></apexchart>\n      <div v-else-if=\"!isLoading\" class=\"no-data-message\">\n        Selecciona un rango de fechas para visualizar los datos\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue'\nimport VueApexCharts from 'vue3-apexcharts'\n\nexport default defineComponent({\n  name: 'DateRangeChart',\n  components: {\n    apexchart: VueApexCharts\n  },\n  \n  data() {\n    return {\n      startDate: '',\n      endDate: '',\n      today: new Date().toISOString().split('T')[0],\n      isLoading: false,\n      isDarkMode: false,\n      showDatePicker: false,\n      currentMonth: new Date(),\n      tempStartDate: null,\n      tempEndDate: null,\n      weekDays: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'],\n      series: [{\n        name: 'Ventas',\n        data: []\n      }],\n      chartOptions: {\n        chart: {\n          type: 'area',\n          height: 350,\n          background: 'transparent',\n          foreColor: '#666',\n          toolbar: {\n            show: true,\n            tools: {\n              download: true,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              reset: true\n            }\n          },\n          animations: {\n            enabled: true,\n            easing: 'easeinout',\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 150\n            },\n            dynamicAnimation: {\n              enabled: true,\n              speed: 350\n            }\n          }\n        },\n        colors: ['#2E93fA'],\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.45,\n            opacityTo: 0.05,\n            stops: [0, 95, 100]\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 2\n        },\n        grid: {\n          show: true,\n          borderColor: '#f1f1f1',\n          strokeDashArray: 3,\n          position: 'back'\n        },\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: '#666',\n              fontSize: '12px'\n            }\n          },\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Ventas ($)',\n            style: {\n              fontSize: '14px',\n              color: '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: '#666'\n            },\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        },\n        tooltip: {\n          shared: true,\n          intersect: false,\n          y: {\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        }\n      }\n    }\n  },\n\n  computed: {\n    hasDateRange() {\n      return this.startDate && this.endDate\n    },\n    hasData() {\n      return this.series[0].data.length > 0\n    },\n    currentMonthName() {\n      return this.currentMonth.toLocaleDateString('es-ES', { \n        month: 'long',\n        year: 'numeric'\n      })\n    },\n\n    calendarDays() {\n      const year = this.currentMonth.getFullYear()\n      const month = this.currentMonth.getMonth()\n      const firstDay = new Date(year, month, 1)\n      const lastDay = new Date(year, month + 1, 0)\n      \n      const days = []\n      const firstDayOfWeek = firstDay.getDay()\n      \n      // Días del mes anterior\n      for (let i = firstDayOfWeek; i > 0; i--) {\n        const prevDate = new Date(year, month, -i + 1)\n        days.push({\n          date: prevDate.toISOString().split('T')[0],\n          dayNumber: prevDate.getDate(),\n          isOtherMonth: true\n        })\n      }\n      \n      // Días del mes actual\n      for (let day = 1; day <= lastDay.getDate(); day++) {\n        const currentDate = new Date(year, month, day)\n        days.push({\n          date: currentDate.toISOString().split('T')[0],\n          dayNumber: day,\n          isOtherMonth: false\n        })\n      }\n      \n      // Días del mes siguiente\n      const remainingDays = 42 - days.length\n      for (let i = 1; i <= remainingDays; i++) {\n        const nextDate = new Date(year, month + 1, i)\n        days.push({\n          date: nextDate.toISOString().split('T')[0],\n          dayNumber: i,\n          isOtherMonth: true\n        })\n      }\n      \n      return days\n    },\n\n    formatDateRange() {\n      if (!this.startDate && !this.endDate) return ''\n      if (!this.endDate) return this.formatDate(this.startDate)\n      return `${this.formatDate(this.startDate)} - ${this.formatDate(this.endDate)}`\n    },\n\n    canApply() {\n      return this.tempStartDate && this.tempEndDate\n    }\n  },\n\n  created() {\n    this.checkDarkMode()\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', this.checkDarkMode)\n  },\n  \n  beforeUnmount() {\n    window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', this.checkDarkMode)\n  },\n  \n  methods: {\n    checkDarkMode() {\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme')\n      this.updateChartTheme()\n    },\n\n    updateChartTheme() {\n      const style = getComputedStyle(document.documentElement)\n      const textSecondary = style.getPropertyValue('--text-secondary').trim()\n      const borderColor = style.getPropertyValue('--border-color').trim()\n      \n      this.chartOptions = {\n        ...this.chartOptions,\n        chart: {\n          ...this.chartOptions.chart,\n          background: 'transparent',\n          foreColor: textSecondary,\n          toolbar: {\n            ...this.chartOptions.chart.toolbar,\n            tools: {\n              ...this.chartOptions.chart.toolbar.tools,\n              download: true,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              reset: true\n            }\n          }\n        },\n        plotOptions: {\n          area: {\n            fillTo: 'origin'\n          }\n        },\n        grid: {\n          show: true,\n          borderColor: this.isDarkMode ? '#333' : '#f1f1f1',\n          strokeDashArray: 3,\n          position: 'back',\n          background: this.isDarkMode ? '#000000' : '#ffffff',\n          padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n          },\n          xaxis: {\n            lines: {\n              show: true\n            }\n          },\n          yaxis: {\n            lines: {\n              show: true\n            }\n          }\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.45,\n            opacityTo: 0.05,\n            stops: [0, 95, 100]\n          }\n        },\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeColors: this.isDarkMode ? '#333' : '#fff',\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          ...this.chartOptions.xaxis,\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#e0e0e0' : '#666',\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: true,\n            stroke: {\n              color: borderColor,\n              width: 1,\n              dashArray: 3\n            }\n          }\n        },\n        yaxis: {\n          ...this.chartOptions.yaxis,\n          title: {\n            text: 'Ventas ($)',\n            style: {\n              fontSize: '14px',\n              color: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          }\n        },\n        tooltip: {\n          theme: this.isDarkMode ? 'dark' : 'light'\n        },\n        theme: {\n          mode: this.isDarkMode ? 'dark' : 'light',\n          palette: 'palette1'\n        }\n      }\n    },\n\n    async loadData() {\n      if (!this.hasDateRange) return\n\n      this.isLoading = true\n      // Resetear los datos actuales\n      this.series[0].data = []\n      \n      try {\n        const start = new Date(this.startDate)\n        const end = new Date(this.endDate)\n        const diffDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24))\n        \n        const data = []\n        let currentValue = Math.floor(Math.random() * 500000) + 100000\n        \n        for (let i = 0; i <= diffDays; i++) {\n          const date = new Date(start)\n          date.setDate(start.getDate() + i)\n          \n          const variation = (Math.random() * 0.2) - 0.1\n          currentValue = Math.floor(currentValue * (1 + variation))\n          currentValue = Math.max(currentValue, 100000)\n          \n          data.push([\n            date.getTime(),\n            currentValue\n          ])\n        }\n        \n        // Actualizar los datos con un pequeño retraso para asegurar la re-renderización\n        setTimeout(() => {\n          this.series = [{\n            name: 'Ventas',\n            data: data\n          }]\n          this.isLoading = false\n        }, 300)\n        \n      } catch (error) {\n        console.error('Error loading data:', error)\n        this.isLoading = false\n      }\n    },\n\n    onDateChange() {\n      if (!this.startDate || !this.endDate) return\n      \n      const start = new Date(this.startDate)\n      const end = new Date(this.endDate)\n      const today = new Date()\n\n      if (start > end) {\n        this.startDate = this.endDate\n        return\n      }\n\n      if (end > today) {\n        this.endDate = today.toISOString().split('T')[0]\n        return\n      }\n\n      // Forzar la actualización de los datos\n      this.series[0].data = []\n      this.$nextTick(() => {\n        this.loadData()\n      })\n    },\n\n    formatDate(dateString) {\n      if (!dateString) return ''\n      const [year, month, day] = dateString.split('-')\n      return `${day}/${month}/${year}`\n    },\n\n    toggleDatePicker() {\n      this.showDatePicker = !this.showDatePicker\n      if (this.showDatePicker) {\n        this.tempStartDate = this.startDate\n        this.tempEndDate = this.endDate\n        document.addEventListener('click', this.handleClickOutside)\n      }\n    },\n\n    handleClickOutside(event) {\n      const picker = this.$el.querySelector('.date-picker-container')\n      if (picker && !picker.contains(event.target)) {\n        this.showDatePicker = false\n        document.removeEventListener('click', this.handleClickOutside)\n      }\n    },\n\n    prevMonth() {\n      this.currentMonth = new Date(\n        this.currentMonth.getFullYear(),\n        this.currentMonth.getMonth() - 1\n      )\n    },\n\n    nextMonth() {\n      this.currentMonth = new Date(\n        this.currentMonth.getFullYear(),\n        this.currentMonth.getMonth() + 1\n      )\n    },\n\n    selectDate(date) {\n      if (this.isDisabled(date)) return\n\n      // Crear fecha a partir del string ISO\n      const selectedDate = date\n\n      if (!this.tempStartDate || (this.tempStartDate && this.tempEndDate)) {\n        // Primera selección o nueva selección después de un rango completo\n        this.tempStartDate = selectedDate\n        this.tempEndDate = null\n      } else {\n        // Segunda selección para completar el rango\n        if (selectedDate < this.tempStartDate) {\n          this.tempEndDate = this.tempStartDate\n          this.tempStartDate = selectedDate\n        } else {\n          this.tempEndDate = selectedDate\n        }\n      }\n    },\n\n    isSelected(date) {\n      return date === this.tempStartDate || date === this.tempEndDate\n    },\n\n    isInRange(date) {\n      if (!this.tempStartDate || !this.tempEndDate) return false\n      return date > this.tempStartDate && date < this.tempEndDate\n    },\n\n    isToday(date) {\n      const today = new Date()\n      today.setHours(0, 0, 0, 0)\n      const todayStr = today.toISOString().split('T')[0]\n      return date === todayStr\n    },\n\n    isDisabled(date) {\n      const today = new Date()\n      today.setHours(0, 0, 0, 0)\n      const todayStr = today.toISOString().split('T')[0]\n      return date > todayStr\n    },\n\n    applyRange() {\n      if (this.tempStartDate && this.tempEndDate) {\n        this.startDate = this.tempStartDate\n        this.endDate = this.tempEndDate\n        this.showDatePicker = false\n        this.onDateChange()\n      }\n    }\n  }\n})\n</script>\n\n<style scoped>\n.date-range-chart {\n  background: var(--bg-secondary);\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: \n    0 2px 4px rgba(0, 0, 0, 0.05),\n    0 4px 8px rgba(0, 0, 0, 0.05),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\n  transform: translateY(0);\n  transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\n  position: relative;\n  background-image: linear-gradient(\n    to bottom,\n    rgba(255, 255, 255, 0.1) 0%,\n    rgba(255, 255, 255, 0) 20%\n  );\n}\n\n.chart-header {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  width: 100%;\n}\n\nh3 {\n  margin: 0;\n  color: var(--text-primary);\n}\n\n.date-controls {\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  padding-right: 200px;\n}\n\n.date-picker-container {\n  position: relative;\n  display: inline-block;\n}\n\n.date-input {\n  padding: 8px 12px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  font-size: 0.9rem;\n  transition: all 0.2s ease;\n}\n\n.date-input:hover {\n  border-color: var(--border-hover);\n}\n\n.date-input:focus {\n  outline: none;\n  border-color: var(--primary);\n  box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);\n}\n\n.date-separator {\n  color: var(--text-secondary);\n}\n\n.chart-container {\n  position: relative;\n  min-height: 350px;\n  background: var(--bg-primary);\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: var(--bg-overlay);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 10;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid var(--spinner-track);\n  border-top-color: var(--spinner-color);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n.no-data-message {\n  height: 350px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (max-width: 768px) {\n  .chart-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 15px;\n  }\n\n  .date-controls {\n    width: 100%;\n    justify-content: center;\n    padding-right: 0;\n  }\n\n  .date-picker-container {\n    width: 100%;\n    max-width: 300px;\n  }\n}\n\n:deep(.apexcharts-canvas) {\n  background: var(--bg-primary) !important;\n}\n\n:deep(.apexcharts-plot-area) {\n  fill: var(--bg-primary) !important;\n}\n\n:deep(.apexcharts-grid) {\n  stroke: var(--chart-grid) !important;\n}\n\n:deep(.apexcharts-xaxis line),\n:deep(.apexcharts-yaxis line) {\n  stroke: var(--chart-grid) !important;\n}\n\n:deep(.apexcharts-tooltip) {\n  background: var(--bg-secondary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-tooltip-title) {\n  background: var(--bg-tertiary) !important;\n  border-bottom: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-xaxistooltip) {\n  background: var(--bg-secondary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n\n.update-button {\n  padding: 8px 16px;\n  background: var(--primary);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 100px;\n}\n\n.update-button:hover:not(:disabled) {\n  background: var(--primary-dark);\n  transform: translateY(-1px);\n}\n\n.update-button:disabled {\n  background: var(--disabled);\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.button-text {\n  font-weight: 500;\n}\n\n.date-picker-popup {\n  position: absolute;\n  bottom: calc(100% + 5px);\n  left: 50%;\n  transform: translateX(-50%);\n  margin-bottom: 0;\n  background: var(--bg-primary);\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  box-shadow: 0 -4px 6px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  width: 300px;\n  padding: 16px;\n}\n\n.calendar {\n  width: 100%;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n  font-weight: 500;\n  color: var(--text-primary);\n}\n\n.month-nav {\n  background: none;\n  border: none;\n  color: var(--text-primary);\n  cursor: pointer;\n  padding: 4px 8px;\n  border-radius: 4px;\n}\n\n.month-nav:hover {\n  background: var(--hover);\n}\n\n.weekdays {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  text-align: center;\n  color: var(--text-secondary);\n  font-size: 0.85rem;\n  margin-bottom: 8px;\n}\n\n.days {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 2px;\n}\n\n.day {\n  aspect-ratio: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 0.9rem;\n  color: var(--text-primary);\n}\n\n.day:hover:not(.disabled) {\n  background: var(--hover);\n}\n\n.day.selected {\n  background: var(--primary);\n  color: white;\n}\n\n.day.in-range {\n  background: var(--primary-light);\n  color: var(--primary);\n}\n\n.day.disabled {\n  color: var(--text-disabled);\n  cursor: not-allowed;\n}\n\n.day.today {\n  font-weight: bold;\n  border: 1px solid var(--primary);\n}\n\n.day.other-month {\n  color: var(--text-disabled);\n}\n\n.calendar-footer {\n  margin-top: 16px;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.apply-btn {\n  padding: 6px 12px;\n  background: var(--primary);\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 0.9rem;\n}\n\n.apply-btn:hover:not(:disabled) {\n  background: var(--primary-dark);\n}\n\n.apply-btn:disabled {\n  background: var(--disabled);\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.date-input {\n  width: 200px;\n  cursor: pointer;\n  text-align: left;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAuB;mBAL1C;;EAAAC,GAAA;EAcqCD,KAAK,EAAC;;;EAC1BA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAiB;;EAKvBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAU;;EAGhBA,KAAK,EAAC;AAAM;oBAzBjC;;EA2CmBA,KAAK,EAAC;AAAiB;oBA3C1C;;EAAAC,GAAA;EAsDSD,KAAK,EAAC;;;EAtDfC,GAAA;EAuD4BD,KAAK,EAAC;;;EAvDlCC,GAAA;EAiEkCD,KAAK,EAAC;;;;uBAhEtCE,mBAAA,CAoEM,OApENC,UAoEM,GAnEJC,mBAAA,CAkDM,OAlDNC,UAkDM,G,0BAjDJD,mBAAA,CAAkC,YAA9B,2BAAyB,sBAC7BA,mBAAA,CA+CM,OA/CNE,UA+CM,GA9CJF,mBAAA,CA6CM,OA7CNG,UA6CM,GA5CJH,mBAAA,CAOC;IANCI,IAAI,EAAC,MAAM;IACXC,QAAQ,EAAR,EAAQ;IACPC,KAAK,EAAEC,IAAA,CAAAC,eAAe;IACtBC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,IAAA,CAAAK,gBAAA,IAAAL,IAAA,CAAAK,gBAAA,IAAAD,IAAA,CAAgB;IACxBf,KAAK,EAAC,YAAY;IAClBiB,WAAW,EAAC;0BAZxBC,UAAA,GAcqBP,IAAA,CAAAQ,cAAc,I,cAAzBjB,mBAAA,CAmCM,OAnCNkB,UAmCM,GAlCJhB,mBAAA,CAiCM,OAjCNiB,UAiCM,GAhCJjB,mBAAA,CAIM,OAJNkB,UAIM,GAHJlB,mBAAA,CAA0D;IAAjDS,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,IAAA,CAAAY,SAAA,IAAAZ,IAAA,CAAAY,SAAA,IAAAR,IAAA,CAAS;IAAEf,KAAK,EAAC;KAAY,GAAI,GACjDI,mBAAA,CAAmC,cAAAoB,gBAAA,CAA1Bb,IAAA,CAAAc,gBAAgB,kBACzBrB,mBAAA,CAA0D;IAAjDS,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,IAAA,CAAAe,SAAA,IAAAf,IAAA,CAAAe,SAAA,IAAAX,IAAA,CAAS;IAAEf,KAAK,EAAC;KAAY,GAAI,E,GAEnDI,mBAAA,CAqBM,OArBNuB,UAqBM,GApBJvB,mBAAA,CAEM,OAFNwB,WAEM,I,kBADJ1B,mBAAA,CAAyD2B,SAAA,QAvB3EC,WAAA,CAuBsCnB,IAAA,CAAAoB,QAAQ,EAAfC,GAAG;yBAAhB9B,mBAAA,CAAyD;MAA1BD,GAAG,EAAE+B;IAAG,GAAAR,gBAAA,CAAKQ,GAAG;oCAEjD5B,mBAAA,CAgBM,OAhBN6B,WAgBM,I,kBAfJ/B,mBAAA,CAcM2B,SAAA,QAxCxBC,WAAA,CA2BkCnB,IAAA,CAAAuB,YAAY,EAAnBF,GAAG;yBADZ9B,mBAAA,CAcM;MAZHD,GAAG,EAAE+B,GAAG,CAACG,IAAI;MACdnC,KAAK,EA7BzBoC,eAAA,EA6B0B,KAAK;oBACiCzB,IAAA,CAAA0B,UAAU,CAACL,GAAG,CAACG,IAAI;oBAAqCxB,IAAA,CAAA2B,SAAS,CAACN,GAAG,CAACG,IAAI;oBAAqCxB,IAAA,CAAA4B,UAAU,CAACP,GAAG,CAACG,IAAI;iBAAkCxB,IAAA,CAAA6B,OAAO,CAACR,GAAG,CAACG,IAAI;uBAAwCH,GAAG,CAACS;;MAO3Q5B,OAAK,EAAA6B,MAAA,IAAE/B,IAAA,CAAAgC,UAAU,CAACX,GAAG,CAACG,IAAI;wBAExBH,GAAG,CAACY,SAAS,gCAvCpCC,WAAA;sCA2CczC,mBAAA,CAIM,OAJN0C,WAIM,GAHJ1C,mBAAA,CAES;IAFAS,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,IAAA,CAAAoC,UAAA,IAAApC,IAAA,CAAAoC,UAAA,IAAAhC,IAAA,CAAU;IAAEf,KAAK,EAAC,WAAW;IAAEgD,QAAQ,GAAGrC,IAAA,CAAAsC;KAAU,WAEpE,iBA9ChBC,WAAA,E,SAAAC,mBAAA,e,OAsDuCxC,IAAA,CAAAyC,YAAY,I,cAA/ClD,mBAAA,CAcM,OAdNmD,WAcM,GAbO1C,IAAA,CAAA2C,SAAS,I,cAApBpD,mBAAA,CAEM,OAFNqD,WAEM,EAAAzC,MAAA,QAAAA,MAAA,OADJV,mBAAA,CAAmC;IAA9BJ,KAAK,EAAC;EAAiB,2B,MAxDpCmD,mBAAA,gBA2DcxC,IAAA,CAAA6C,OAAO,I,cADfC,YAAA,CAMaC,oBAAA;IAhEnBzD,GAAA;IA4DQO,IAAI,EAAC,MAAM;IACXmD,MAAM,EAAC,KAAK;IACXC,OAAO,EAAEjD,IAAA,CAAAkD,YAAY;IACrBC,MAAM,EAAEnD,IAAA,CAAAmD;qDAEMnD,IAAA,CAAA2C,SAAS,I,cAA1BpD,mBAAA,CAEM,OAFN6D,WAEM,EAF8C,2DAEpD,KAnENZ,mBAAA,e,KAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}