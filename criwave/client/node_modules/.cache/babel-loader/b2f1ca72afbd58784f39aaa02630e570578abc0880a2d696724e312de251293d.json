{"ast":null,"code":"/**\n * Componente principal del Dashboard\n * \n * Muestra un resumen de las métricas principales del negocio,\n * comenzando con las ventas del día.\n * \n * @component AppDashboard\n */\nimport SalesCard from './SalesCard.vue';\nimport RevenueChart from './RevenueChart.vue';\nimport DateRangeChart from './DateRangeChart.vue';\n// Importar los servicios\nimport { getDailySales, getWeeklySales, getMonthlySales } from '../../services/dashboardService';\nexport default {\n  name: 'AppDashboard',\n  components: {\n    SalesCard,\n    RevenueChart,\n    DateRangeChart\n  },\n  data() {\n    return {\n      // Inicializar con valores vacíos que se llenarán al cargar\n      dailySales: {\n        amount: 0,\n        count: 0,\n        average: 0,\n        change: 0,\n        changeAmount: 0\n      },\n      // Datos de ventas semanales\n      weeklySales: {\n        amount: 0,\n        count: 0,\n        average: 0,\n        change: 0,\n        changeAmount: 0\n      },\n      // Datos de ventas mensuales\n      monthlySales: {\n        amount: 0,\n        count: 0,\n        average: 0,\n        change: 0,\n        changeAmount: 0\n      },\n      isLoading: true,\n      error: null\n    };\n  },\n  methods: {\n    /**\n     * Carga los datos del dashboard desde el servicio\n     */\n    async loadDashboardData() {\n      try {\n        this.isLoading = true;\n        this.error = null;\n\n        // Cargar múltiples conjuntos de datos en paralelo\n        const [dailyData, weeklyData, monthlyData] = await Promise.all([getDailySales(), getWeeklySales(), getMonthlySales()]);\n\n        // Mapear los datos al formato esperado por los componentes\n        this.dailySales = {\n          amount: dailyData.total,\n          count: dailyData.count,\n          average: dailyData.average,\n          change: dailyData.change,\n          changeAmount: dailyData.changeAmount\n        };\n        this.weeklySales = {\n          amount: weeklyData.total,\n          count: weeklyData.count,\n          average: weeklyData.average,\n          change: weeklyData.change,\n          changeAmount: weeklyData.changeAmount\n        };\n        this.monthlySales = {\n          amount: monthlyData.total,\n          count: monthlyData.count,\n          average: monthlyData.average,\n          change: monthlyData.change,\n          changeAmount: monthlyData.changeAmount\n        };\n        this.isLoading = false;\n      } catch (error) {\n        console.error('Error al cargar datos del dashboard:', error);\n        this.error = 'No se pudieron cargar los datos. Por favor, intenta de nuevo más tarde.';\n        this.isLoading = false;\n      }\n    }\n  },\n  mounted() {\n    // Cargar datos al montar el componente\n    this.loadDashboardData();\n  }\n};","map":{"version":3,"names":["SalesCard","RevenueChart","DateRangeChart","getDailySales","getWeeklySales","getMonthlySales","name","components","data","dailySales","amount","count","average","change","changeAmount","weeklySales","monthlySales","isLoading","error","methods","loadDashboardData","dailyData","weeklyData","monthlyData","Promise","all","total","console","mounted"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard-container\">\n    <div class=\"dashboard-header\">\n      <!-- Título y subtítulo eliminados -->\n    </div>\n    \n    <div class=\"sales-cards\">\n      <!-- Tarjeta de ventas diarias -->\n      <sales-card\n        title=\"Ventas del día\"\n        :amount=\"dailySales.amount\"\n        :count=\"dailySales.count\"\n        :average=\"dailySales.average\"\n        :change=\"dailySales.change\"\n        :change-amount=\"dailySales.changeAmount\"\n        comparison-period=\"día anterior\"\n      />\n      \n      <!-- Tarjeta de ventas semanales -->\n      <sales-card\n        title=\"Ventas de la semana\"\n        :amount=\"weeklySales.amount\"\n        :count=\"weeklySales.count\"\n        :average=\"weeklySales.average\"\n        :change=\"weeklySales.change\"\n        :change-amount=\"weeklySales.changeAmount\"\n        comparison-period=\"semana anterior\"\n      />\n      \n      <!-- Tarjeta de ventas mensuales -->\n      <sales-card\n        title=\"Ventas del mes\"\n        :amount=\"monthlySales.amount\"\n        :count=\"monthlySales.count\"\n        :average=\"monthlySales.average\"\n        :change=\"monthlySales.change\"\n        :change-amount=\"monthlySales.changeAmount\"\n        comparison-period=\"mes anterior\"\n      />\n    </div>\n\n    <!-- Gráfico de ingresos -->\n    <div class=\"revenue-chart-section\">\n      <revenue-chart />\n    </div>\n\n    <DateRangeChart />\n  </div>\n</template>\n\n<script>\n/**\n * Componente principal del Dashboard\n * \n * Muestra un resumen de las métricas principales del negocio,\n * comenzando con las ventas del día.\n * \n * @component AppDashboard\n */\nimport SalesCard from './SalesCard.vue';\nimport RevenueChart from './RevenueChart.vue';\nimport DateRangeChart from './DateRangeChart.vue'\n// Importar los servicios\nimport { getDailySales, getWeeklySales, getMonthlySales } from '../../services/dashboardService';\n\nexport default {\n  name: 'AppDashboard',\n  \n  components: {\n    SalesCard,\n    RevenueChart,\n    DateRangeChart\n  },\n  \n  data() {\n    return {\n      // Inicializar con valores vacíos que se llenarán al cargar\n      dailySales: {\n        amount: 0,\n        count: 0,\n        average: 0,\n        change: 0,\n        changeAmount: 0\n      },\n      // Datos de ventas semanales\n      weeklySales: {\n        amount: 0,\n        count: 0,\n        average: 0,\n        change: 0,\n        changeAmount: 0\n      },\n      // Datos de ventas mensuales\n      monthlySales: {\n        amount: 0,\n        count: 0,\n        average: 0,\n        change: 0,\n        changeAmount: 0\n      },\n      isLoading: true,\n      error: null\n    };\n  },\n  \n  methods: {\n    /**\n     * Carga los datos del dashboard desde el servicio\n     */\n    async loadDashboardData() {\n      try {\n        this.isLoading = true;\n        this.error = null;\n        \n        // Cargar múltiples conjuntos de datos en paralelo\n        const [dailyData, weeklyData, monthlyData] = await Promise.all([\n          getDailySales(),\n          getWeeklySales(),\n          getMonthlySales()\n        ]);\n        \n        // Mapear los datos al formato esperado por los componentes\n        this.dailySales = {\n          amount: dailyData.total,\n          count: dailyData.count,\n          average: dailyData.average,\n          change: dailyData.change,\n          changeAmount: dailyData.changeAmount\n        };\n        \n        this.weeklySales = {\n          amount: weeklyData.total,\n          count: weeklyData.count,\n          average: weeklyData.average,\n          change: weeklyData.change,\n          changeAmount: weeklyData.changeAmount\n        };\n        \n        this.monthlySales = {\n          amount: monthlyData.total,\n          count: monthlyData.count,\n          average: monthlyData.average,\n          change: monthlyData.change,\n          changeAmount: monthlyData.changeAmount\n        };\n        \n        this.isLoading = false;\n      } catch (error) {\n        console.error('Error al cargar datos del dashboard:', error);\n        this.error = 'No se pudieron cargar los datos. Por favor, intenta de nuevo más tarde.';\n        this.isLoading = false;\n      }\n    }\n  },\n  \n  mounted() {\n    // Cargar datos al montar el componente\n    this.loadDashboardData();\n  }\n};\n</script>\n\n<style scoped>\n/* Estilos del dashboard */\n.dashboard-container {\n  width: 100%;\n  padding: 5px 0;\n}\n\n/* Estilos del encabezado */\n.dashboard-header {\n  margin-bottom: 5px;\n}\n\n/* Contenedor de tarjetas */\n.sales-cards {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 20px;\n  margin-bottom: 30px;\n  /* Añadir perspectiva para mejorar el efecto 3D */\n  perspective: 1000px;\n}\n\n/* Sección del gráfico de ingresos */\n.revenue-chart-section {\n  margin-top: 30px;\n  margin-bottom: 30px;\n}\n\n/* Estado de carga */\n.loading-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0;\n  color: var(--text-secondary);\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid rgba(125, 130, 152, 0.2);\n  border-top-color: var(--accent);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-bottom: 16px;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n/* Mensaje de error */\n.error-message {\n  display: flex;\n  align-items: center;\n  padding: 16px;\n  background-color: rgba(209, 67, 67, 0.1);\n  color: var(--error);\n  border-radius: 8px;\n  margin-bottom: 24px;\n}\n\n.error-message svg {\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n}\n\n/* Ajustes responsive */\n@media (max-width: 768px) {\n  .dashboard-container {\n    padding: 3px 0;\n  }\n  \n  .sales-cards {\n    grid-template-columns: 1fr;\n    gap: 18px;\n    /* Mantener la perspectiva en móviles */\n    perspective: 800px;\n  }\n  \n  .loading-spinner {\n    width: 32px;\n    height: 32px;\n  }\n}\n</style> "],"mappings":"AAmDA;;;;;;;;AAQA,OAAOA,SAAQ,MAAO,iBAAiB;AACvC,OAAOC,YAAW,MAAO,oBAAoB;AAC7C,OAAOC,cAAa,MAAO,sBAAqB;AAChD;AACA,SAASC,aAAa,EAAEC,cAAc,EAAEC,eAAc,QAAS,iCAAiC;AAEhG,eAAe;EACbC,IAAI,EAAE,cAAc;EAEpBC,UAAU,EAAE;IACVP,SAAS;IACTC,YAAY;IACZC;EACF,CAAC;EAEDM,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,UAAU,EAAE;QACVC,MAAM,EAAE,CAAC;QACTC,KAAK,EAAE,CAAC;QACRC,OAAO,EAAE,CAAC;QACVC,MAAM,EAAE,CAAC;QACTC,YAAY,EAAE;MAChB,CAAC;MACD;MACAC,WAAW,EAAE;QACXL,MAAM,EAAE,CAAC;QACTC,KAAK,EAAE,CAAC;QACRC,OAAO,EAAE,CAAC;QACVC,MAAM,EAAE,CAAC;QACTC,YAAY,EAAE;MAChB,CAAC;MACD;MACAE,YAAY,EAAE;QACZN,MAAM,EAAE,CAAC;QACTC,KAAK,EAAE,CAAC;QACRC,OAAO,EAAE,CAAC;QACVC,MAAM,EAAE,CAAC;QACTC,YAAY,EAAE;MAChB,CAAC;MACDG,SAAS,EAAE,IAAI;MACfC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACP;;;IAGA,MAAMC,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,IAAI,CAACH,SAAQ,GAAI,IAAI;QACrB,IAAI,CAACC,KAAI,GAAI,IAAI;;QAEjB;QACA,MAAM,CAACG,SAAS,EAAEC,UAAU,EAAEC,WAAW,IAAI,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC7DtB,aAAa,CAAC,CAAC,EACfC,cAAc,CAAC,CAAC,EAChBC,eAAe,CAAC,EACjB,CAAC;;QAEF;QACA,IAAI,CAACI,UAAS,GAAI;UAChBC,MAAM,EAAEW,SAAS,CAACK,KAAK;UACvBf,KAAK,EAAEU,SAAS,CAACV,KAAK;UACtBC,OAAO,EAAES,SAAS,CAACT,OAAO;UAC1BC,MAAM,EAAEQ,SAAS,CAACR,MAAM;UACxBC,YAAY,EAAEO,SAAS,CAACP;QAC1B,CAAC;QAED,IAAI,CAACC,WAAU,GAAI;UACjBL,MAAM,EAAEY,UAAU,CAACI,KAAK;UACxBf,KAAK,EAAEW,UAAU,CAACX,KAAK;UACvBC,OAAO,EAAEU,UAAU,CAACV,OAAO;UAC3BC,MAAM,EAAES,UAAU,CAACT,MAAM;UACzBC,YAAY,EAAEQ,UAAU,CAACR;QAC3B,CAAC;QAED,IAAI,CAACE,YAAW,GAAI;UAClBN,MAAM,EAAEa,WAAW,CAACG,KAAK;UACzBf,KAAK,EAAEY,WAAW,CAACZ,KAAK;UACxBC,OAAO,EAAEW,WAAW,CAACX,OAAO;UAC5BC,MAAM,EAAEU,WAAW,CAACV,MAAM;UAC1BC,YAAY,EAAES,WAAW,CAACT;QAC5B,CAAC;QAED,IAAI,CAACG,SAAQ,GAAI,KAAK;MACxB,EAAE,OAAOC,KAAK,EAAE;QACdS,OAAO,CAACT,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC5D,IAAI,CAACA,KAAI,GAAI,yEAAyE;QACtF,IAAI,CAACD,SAAQ,GAAI,KAAK;MACxB;IACF;EACF,CAAC;EAEDW,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACR,iBAAiB,CAAC,CAAC;EAC1B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}