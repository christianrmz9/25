{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport MaterialIcon from '../ui/Icon.vue';\nexport default {\n  name: 'RevenueChart',\n  components: {\n    icon: MaterialIcon\n  },\n  props: {\n    /**\r\n     * Datos de ingresos de los últimos 12 meses\r\n     * Debe ser un array de objetos con las propiedades \"month\" y \"revenue\"\r\n     */\n    revenueData: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    /**\r\n     * Cambio porcentual en los ingresos con respecto al período anterior\r\n     */\n    changePercent: {\n      type: Number,\n      default: 0\n    },\n    /**\r\n     * Valor absoluto del cambio en los ingresos\r\n     */\n    changeAmount: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      chartWidth: 0,\n      chartHeight: 0,\n      currentMonthIndex: 7,\n      // Por defecto, mostrar julio (puedes cambiar según tus necesidades)\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\n      yAxisLabels: ['$1M', '$10M', '$50M', '$100M', '$1B'],\n      // Datos simulados para el gráfico si no se proporcionan\n      defaultData: [{\n        month: 'Ene',\n        revenue: 1000000\n      }, {\n        month: 'Feb',\n        revenue: 1200000\n      }, {\n        month: 'Mar',\n        revenue: 2500000\n      }, {\n        month: 'Abr',\n        revenue: 3800000\n      }, {\n        month: 'May',\n        revenue: 5200000\n      }, {\n        month: 'Jun',\n        revenue: 4800000\n      }, {\n        month: 'Jul',\n        revenue: 8500000\n      }, {\n        month: 'Ago',\n        revenue: 12000000\n      }, {\n        month: 'Sep',\n        revenue: 9500000\n      }, {\n        month: 'Oct',\n        revenue: 11000000\n      }, {\n        month: 'Nov',\n        revenue: 12500000\n      }, {\n        month: 'Dic',\n        revenue: 15000000\n      }]\n    };\n  },\n  computed: {\n    /**\r\n     * Obtiene los datos de ingresos, usando los predeterminados si no se proporcionan\r\n     */\n    chartData() {\n      return this.revenueData.length > 0 ? this.revenueData : this.defaultData;\n    },\n    /**\r\n     * Calcula el total de ingresos sumando todos los valores\r\n     */\n    totalRevenue() {\n      return this.chartData.reduce((sum, item) => sum + item.revenue, 0);\n    },\n    /**\r\n     * Formatea el total de ingresos para mostrar\r\n     */\n    formattedTotalRevenue() {\n      return this.formatLargeNumber(this.totalRevenue);\n    },\n    /**\r\n     * Obtiene el valor de cambio total\r\n     */\n    totalChange() {\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\n    },\n    /**\r\n     * Formatea el cambio total para mostrar\r\n     */\n    formattedTotalChange() {\n      return this.formatLargeNumber(this.totalChange);\n    },\n    /**\r\n     * Formatea el porcentaje de cambio\r\n     */\n    formattedChangePercent() {\n      return (this.changePercent || 12.2).toFixed(1);\n    },\n    /**\r\n     * Calcula la ruta SVG para la línea del gráfico\r\n     */\n    linePath() {\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      return this.chartData.map((point, index) => {\n        const x = index / (this.chartData.length - 1) * this.chartWidth;\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\n      }).join(' ');\n    },\n    /**\r\n     * Calcula la ruta SVG para el área bajo la línea\r\n     */\n    areaPath() {\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const linePath = this.chartData.map((point, index) => {\n        const x = index / (this.chartData.length - 1) * this.chartWidth;\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\n        const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\n      }).join(' ');\n      return `${linePath} L${this.chartWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\n    },\n    /**\r\n     * Obtiene la información del punto actual seleccionado\r\n     */\n    currentPoint() {\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return null;\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const point = this.chartData[this.currentMonthIndex];\n      const x = this.currentMonthIndex / (this.chartData.length - 1) * this.chartWidth;\n      const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\n      const y = this.chartHeight - paddingBottom - normalizedValue * availableHeight;\n      return {\n        x,\n        y,\n        month: point.month,\n        value: point.revenue\n      };\n    },\n    /**\r\n     * Obtiene la etiqueta del punto actual\r\n     */\n    currentPointLabel() {\n      if (!this.currentPoint) return '';\n      return `${this.currentPoint.month}, 2024`;\n    },\n    /**\r\n     * Calcula el valor acumulado hasta el punto actual\r\n     */\n    currentPointAccumulated() {\n      if (!this.chartData.length || this.currentMonthIndex < 0) return 0;\n      let sum = 0;\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\n        sum += this.chartData[i].revenue;\n      }\n      return this.formatCurrency(sum);\n    }\n  },\n  mounted() {\n    this.updateChartDimensions();\n    window.addEventListener('resize', this.updateChartDimensions);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.updateChartDimensions);\n  },\n  methods: {\n    /**\r\n     * Actualiza las dimensiones del gráfico en función del contenedor\r\n     */\n    updateChartDimensions() {\n      if (this.$refs.chartContainer) {\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\n      }\n    },\n    /**\r\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\r\n     */\n    formatLargeNumber(value) {\n      if (value >= 1000000000) {\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\n      } else if (value >= 1000000) {\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\n      } else if (value >= 1000) {\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\n      }\n      return value.toString();\n    },\n    /**\r\n     * Formatea un valor monetario con separadores de miles\r\n     */\n    formatCurrency(value) {\n      return new Intl.NumberFormat('es-ES', {\n        maximumFractionDigits: 0\n      }).format(value);\n    }\n  }\n};","map":{"version":3,"names":["MaterialIcon","name","components","icon","props","revenueData","type","Array","required","default","changePercent","Number","changeAmount","data","chartWidth","chartHeight","currentMonthIndex","monthLabels","yAxisLabels","defaultData","month","revenue","computed","chartData","length","totalRevenue","reduce","sum","item","formattedTotalRevenue","formatLargeNumber","totalChange","formattedTotalChange","formattedChangePercent","toFixed","linePath","maxValue","Math","max","map","d","minValue","min","paddingBottom","paddingTop","availableHeight","point","index","x","normalizedValue","y","join","areaPath","currentPoint","value","currentPointLabel","currentPointAccumulated","i","formatCurrency","mounted","updateChartDimensions","window","addEventListener","beforeUnmount","removeEventListener","methods","$refs","chartContainer","clientWidth","clientHeight","replace","toString","Intl","NumberFormat","maximumFractionDigits","format"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"revenue-chart-container\">\r\n    <div class=\"chart-header\">\r\n      <div class=\"chart-title-section\">\r\n        <h2 class=\"chart-title\">Total Ingresos</h2>\r\n        <div class=\"revenue-amount\">${{ formattedTotalRevenue }}</div>\r\n        <div class=\"change-indicator\" :class=\"{ 'positive': totalChange > 0, 'negative': totalChange < 0 }\">\r\n          <span class=\"change-value\">{{ totalChange > 0 ? '+' : '' }}{{ formattedTotalChange }} ({{ formattedChangePercent }}%)</span>\r\n          <span class=\"period\">· últimos 12 meses</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"period-selector\">\r\n        <button class=\"period-button active\">\r\n          Últimos 12 meses\r\n          <icon name=\"arrow_drop_down\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"chart-content\">\r\n      <div class=\"chart-axes\">\r\n        <div class=\"y-axis\">\r\n          <div class=\"axis-label\" v-for=\"(value, index) in yAxisLabels\" :key=\"index\">\r\n            {{ value }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"chart-graphic\" ref=\"chartContainer\">\r\n        <!-- La gráfica SVG se generará aquí -->\r\n        <svg class=\"chart-svg\" ref=\"chartSvg\" width=\"100%\" height=\"100%\">\r\n          <defs>\r\n            <linearGradient id=\"areaGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n              <stop offset=\"0%\" stop-color=\"#2dc6af\" stop-opacity=\"0.5\" />\r\n              <stop offset=\"100%\" stop-color=\"#2dc6af\" stop-opacity=\"0.05\" />\r\n            </linearGradient>\r\n          </defs>\r\n          <path :d=\"areaPath\" fill=\"url(#areaGradient)\" />\r\n          <path :d=\"linePath\" fill=\"none\" stroke=\"#2dc6af\" stroke-width=\"2\" />\r\n          \r\n          <!-- Punto destacado -->\r\n          <circle v-if=\"currentPoint\" :cx=\"currentPoint.x\" :cy=\"currentPoint.y\" r=\"6\" fill=\"#2dc6af\" stroke=\"#1a1a1a\" stroke-width=\"2\" />\r\n          \r\n          <!-- Línea vertical para el punto actual -->\r\n          <line v-if=\"currentPoint\" :x1=\"currentPoint.x\" :y1=\"chartHeight\" :x2=\"currentPoint.x\" :y2=\"currentPoint.y\" stroke=\"#2dc6af\" stroke-width=\"1\" stroke-dasharray=\"2,2\" />\r\n          \r\n          <!-- Etiqueta del punto destacado -->\r\n          <g v-if=\"currentPoint\" class=\"point-label\" :transform=\"`translate(${currentPoint.x}, ${currentPoint.y - 15})`\">\r\n            <rect x=\"-50\" y=\"-25\" width=\"100\" height=\"25\" rx=\"4\" fill=\"#2a2a2a\" />\r\n            <text x=\"0\" y=\"-10\" text-anchor=\"middle\" fill=\"white\" font-size=\"11\">{{ currentPoint.month }}</text>\r\n            <text x=\"0\" y=\"-10\" dy=\"12\" text-anchor=\"middle\" fill=\"#2dc6af\" font-size=\"11\" font-weight=\"bold\">${{ formatCurrency(currentPoint.value) }}</text>\r\n          </g>\r\n        </svg>\r\n        \r\n        <!-- Eje X con los meses -->\r\n        <div class=\"x-axis\">\r\n          <div class=\"x-label\" v-for=\"(month, index) in monthLabels\" :key=\"index\" :style=\"{ left: `${(index / (monthLabels.length - 1)) * 100}%` }\">\r\n            {{ month }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Información del punto actual -->\r\n    <div class=\"current-point-info\" v-if=\"currentPoint\">\r\n      <div class=\"month\">{{ currentPointLabel }}</div>\r\n      <div class=\"value\">Acumulado: ${{ formatCurrency(currentPointAccumulated) }}</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MaterialIcon from '../ui/Icon.vue';\r\n\r\nexport default {\r\n  name: 'RevenueChart',\r\n  \r\n  components: {\r\n    icon: MaterialIcon\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Datos de ingresos de los últimos 12 meses\r\n     * Debe ser un array de objetos con las propiedades \"month\" y \"revenue\"\r\n     */\r\n    revenueData: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => []\r\n    },\r\n    \r\n    /**\r\n     * Cambio porcentual en los ingresos con respecto al período anterior\r\n     */\r\n    changePercent: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    \r\n    /**\r\n     * Valor absoluto del cambio en los ingresos\r\n     */\r\n    changeAmount: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      chartWidth: 0,\r\n      chartHeight: 0,\r\n      currentMonthIndex: 7, // Por defecto, mostrar julio (puedes cambiar según tus necesidades)\r\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\r\n      yAxisLabels: ['$1M', '$10M', '$50M', '$100M', '$1B'],\r\n      // Datos simulados para el gráfico si no se proporcionan\r\n      defaultData: [\r\n        { month: 'Ene', revenue: 1000000 },\r\n        { month: 'Feb', revenue: 1200000 },\r\n        { month: 'Mar', revenue: 2500000 },\r\n        { month: 'Abr', revenue: 3800000 },\r\n        { month: 'May', revenue: 5200000 },\r\n        { month: 'Jun', revenue: 4800000 },\r\n        { month: 'Jul', revenue: 8500000 },\r\n        { month: 'Ago', revenue: 12000000 },\r\n        { month: 'Sep', revenue: 9500000 },\r\n        { month: 'Oct', revenue: 11000000 },\r\n        { month: 'Nov', revenue: 12500000 },\r\n        { month: 'Dic', revenue: 15000000 }\r\n      ]\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    /**\r\n     * Obtiene los datos de ingresos, usando los predeterminados si no se proporcionan\r\n     */\r\n    chartData() {\r\n      return this.revenueData.length > 0 ? this.revenueData : this.defaultData;\r\n    },\r\n    \r\n    /**\r\n     * Calcula el total de ingresos sumando todos los valores\r\n     */\r\n    totalRevenue() {\r\n      return this.chartData.reduce((sum, item) => sum + item.revenue, 0);\r\n    },\r\n    \r\n    /**\r\n     * Formatea el total de ingresos para mostrar\r\n     */\r\n    formattedTotalRevenue() {\r\n      return this.formatLargeNumber(this.totalRevenue);\r\n    },\r\n    \r\n    /**\r\n     * Obtiene el valor de cambio total\r\n     */\r\n    totalChange() {\r\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\r\n    },\r\n    \r\n    /**\r\n     * Formatea el cambio total para mostrar\r\n     */\r\n    formattedTotalChange() {\r\n      return this.formatLargeNumber(this.totalChange);\r\n    },\r\n    \r\n    /**\r\n     * Formatea el porcentaje de cambio\r\n     */\r\n    formattedChangePercent() {\r\n      return (this.changePercent || 12.2).toFixed(1);\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para la línea del gráfico\r\n     */\r\n    linePath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      return this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * this.chartWidth;\r\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para el área bajo la línea\r\n     */\r\n    areaPath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      const linePath = this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * this.chartWidth;\r\n        const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n      \r\n      return `${linePath} L${this.chartWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\r\n    },\r\n    \r\n    /**\r\n     * Obtiene la información del punto actual seleccionado\r\n     */\r\n    currentPoint() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return null;\r\n      \r\n      const maxValue = Math.max(...this.chartData.map(d => d.revenue));\r\n      const minValue = Math.min(...this.chartData.map(d => d.revenue));\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      \r\n      const point = this.chartData[this.currentMonthIndex];\r\n      const x = (this.currentMonthIndex / (this.chartData.length - 1)) * this.chartWidth;\r\n      const normalizedValue = (point.revenue - minValue) / (maxValue - minValue);\r\n      const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n      \r\n      return {\r\n        x,\r\n        y,\r\n        month: point.month,\r\n        value: point.revenue\r\n      };\r\n    },\r\n    \r\n    /**\r\n     * Obtiene la etiqueta del punto actual\r\n     */\r\n    currentPointLabel() {\r\n      if (!this.currentPoint) return '';\r\n      return `${this.currentPoint.month}, 2024`;\r\n    },\r\n    \r\n    /**\r\n     * Calcula el valor acumulado hasta el punto actual\r\n     */\r\n    currentPointAccumulated() {\r\n      if (!this.chartData.length || this.currentMonthIndex < 0) return 0;\r\n      \r\n      let sum = 0;\r\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\r\n        sum += this.chartData[i].revenue;\r\n      }\r\n      \r\n      return this.formatCurrency(sum);\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    this.updateChartDimensions();\r\n    window.addEventListener('resize', this.updateChartDimensions);\r\n  },\r\n  \r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.updateChartDimensions);\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Actualiza las dimensiones del gráfico en función del contenedor\r\n     */\r\n    updateChartDimensions() {\r\n      if (this.$refs.chartContainer) {\r\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\r\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\r\n     */\r\n    formatLargeNumber(value) {\r\n      if (value >= 1000000000) {\r\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\r\n      } else if (value >= 1000000) {\r\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\r\n      } else if (value >= 1000) {\r\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\r\n      }\r\n      return value.toString();\r\n    },\r\n    \r\n    /**\r\n     * Formatea un valor monetario con separadores de miles\r\n     */\r\n    formatCurrency(value) {\r\n      return new Intl.NumberFormat('es-ES', {\r\n        maximumFractionDigits: 0\r\n      }).format(value);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.revenue-chart-container {\r\n  background-color: var(--bg-secondary);\r\n  border-radius: 10px;\r\n  padding: 16px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\r\n  height: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: var(--text-primary);\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-color: #1a1a1a;\r\n  color: #efefef;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.chart-title-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 0.9rem;\r\n  font-weight: 500;\r\n  margin: 0 0 8px 0;\r\n  opacity: 0.9;\r\n}\r\n\r\n.revenue-amount {\r\n  font-size: 1.8rem;\r\n  font-weight: 700;\r\n  margin-bottom: 4px;\r\n  letter-spacing: -0.5px;\r\n}\r\n\r\n.change-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.change-value {\r\n  font-weight: 600;\r\n}\r\n\r\n.positive {\r\n  color: #2dc6af;\r\n}\r\n\r\n.negative {\r\n  color: #e74c3c;\r\n}\r\n\r\n.period {\r\n  opacity: 0.7;\r\n  margin-left: 4px;\r\n}\r\n\r\n.period-selector {\r\n  margin-left: auto;\r\n}\r\n\r\n.period-button {\r\n  display: flex;\r\n  align-items: center;\r\n  background: none;\r\n  border: none;\r\n  color: inherit;\r\n  font-size: 0.8rem;\r\n  padding: 4px 8px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  opacity: 0.8;\r\n  transition: opacity 0.3s, background-color 0.3s;\r\n}\r\n\r\n.period-button:hover, \r\n.period-button.active {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  opacity: 1;\r\n}\r\n\r\n.chart-content {\r\n  flex: 1;\r\n  display: flex;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.chart-axes {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 20px; /* Espacio para el eje X */\r\n  width: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 10px 0;\r\n}\r\n\r\n.y-axis {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n\r\n.axis-label {\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  text-align: left;\r\n}\r\n\r\n.chart-graphic {\r\n  flex: 1;\r\n  margin-left: 50px; /* Ancho del eje Y */\r\n  position: relative;\r\n  height: 100%;\r\n}\r\n\r\n.chart-svg {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: calc(100% - 20px); /* Restar altura del eje X */\r\n}\r\n\r\n.x-axis {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.x-label {\r\n  position: absolute;\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  transform: translateX(-50%);\r\n  text-align: center;\r\n}\r\n\r\n.current-point-info {\r\n  position: absolute;\r\n  bottom: 48px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background-color: #2a2a2a;\r\n  padding: 6px 12px;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.current-point-info .month {\r\n  font-weight: 500;\r\n  opacity: 0.9;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.current-point-info .value {\r\n  color: #2dc6af;\r\n  font-weight: 700;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .revenue-chart-container {\r\n    height: 300px;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .revenue-amount {\r\n    font-size: 1.6rem;\r\n  }\r\n  \r\n  .chart-title {\r\n    font-size: 0.85rem;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}