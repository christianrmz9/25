{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"revenue-chart-container\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"chart-title-section\"\n};\nconst _hoisted_4 = {\n  class: \"revenue-amount\"\n};\nconst _hoisted_5 = {\n  class: \"change-value\"\n};\nconst _hoisted_6 = {\n  class: \"period\"\n};\nconst _hoisted_7 = {\n  class: \"period-selector\"\n};\nconst _hoisted_8 = {\n  class: \"controls\"\n};\nconst _hoisted_9 = {\n  class: \"comparison-toggle\"\n};\nconst _hoisted_10 = {\n  class: \"period-button active\"\n};\nconst _hoisted_11 = {\n  class: \"chart-content\"\n};\nconst _hoisted_12 = {\n  class: \"chart-axes\"\n};\nconst _hoisted_13 = {\n  class: \"y-axis\"\n};\nconst _hoisted_14 = {\n  class: \"chart-svg\",\n  ref: \"chartSvg\",\n  width: \"100%\",\n  height: \"100%\"\n};\nconst _hoisted_15 = {\n  id: \"areaGradient\",\n  x1: \"0%\",\n  y1: \"0%\",\n  x2: \"0%\",\n  y2: \"100%\"\n};\nconst _hoisted_16 = [\"stop-color\"];\nconst _hoisted_17 = [\"stop-color\"];\nconst _hoisted_18 = [\"d\"];\nconst _hoisted_19 = [\"d\", \"stroke\"];\nconst _hoisted_20 = [\"d\", \"stroke\"];\nconst _hoisted_21 = [\"x1\", \"y1\", \"x2\", \"y2\", \"stroke\"];\nconst _hoisted_22 = [\"cx\", \"cy\", \"r\", \"fill\"];\nconst _hoisted_23 = [\"width\", \"height\"];\nconst _hoisted_24 = {\n  class: \"x-axis\"\n};\nconst _hoisted_25 = {\n  class: \"tooltip-title\"\n};\nconst _hoisted_26 = {\n  class: \"tooltip-value\"\n};\nconst _hoisted_27 = {\n  class: \"tooltip-accumulated\"\n};\nconst _hoisted_28 = {\n  key: 0,\n  class: \"tooltip-comparison\"\n};\nconst _hoisted_29 = {\n  class: \"comparison-label\"\n};\nconst _hoisted_30 = {\n  class: \"comparison-value\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_icon = _resolveComponent(\"icon\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", {\n    class: \"chart-title\"\n  }, \"Total Ingresos\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, \"$\" + _toDisplayString($options.formattedTotalRevenue), 1 /* TEXT */), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"change-indicator\", {\n      'positive': $options.totalChange > 0,\n      'negative': $options.totalChange < 0\n    }])\n  }, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString($options.totalChange > 0 ? '+' : '') + _toDisplayString($options.formattedTotalChange) + \" (\" + _toDisplayString($options.formattedChangePercent) + \"%)\", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_6, \"· \" + _toDisplayString($data.showComparison ? 'vs. año anterior' : 'últimos 12 meses'), 1 /* TEXT */)], 2 /* CLASS */)]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"label\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.showComparison = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.showComparison]]), _cache[6] || (_cache[6] = _createElementVNode(\"span\", {\n    class: \"toggle-label\"\n  }, \"Comparar con año anterior\", -1 /* HOISTED */))]), _createElementVNode(\"button\", _hoisted_10, [_cache[7] || (_cache[7] = _createTextVNode(\" Últimos 12 meses \")), _createVNode(_component_icon, {\n    name: \"arrow_drop_down\"\n  })])])])]), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.yAxisLabels, (value, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"axis-label\",\n      key: index\n    }, _toDisplayString(value), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", {\n    class: \"chart-graphic\",\n    ref: \"chartContainer\",\n    onMousemove: _cache[1] || (_cache[1] = (...args) => $options.handleMouseMove && $options.handleMouseMove(...args)),\n    onMouseleave: _cache[2] || (_cache[2] = (...args) => $options.resetHighlight && $options.resetHighlight(...args)),\n    onTouchmove: _cache[3] || (_cache[3] = (...args) => $options.handleTouchMove && $options.handleTouchMove(...args)),\n    onTouchend: _cache[4] || (_cache[4] = (...args) => $options.resetHighlight && $options.resetHighlight(...args))\n  }, [_createCommentVNode(\" La gráfica SVG se generará aquí \"), (_openBlock(), _createElementBlock(\"svg\", _hoisted_14, [_createElementVNode(\"defs\", null, [_createElementVNode(\"linearGradient\", _hoisted_15, [_createElementVNode(\"stop\", {\n    offset: \"0%\",\n    \"stop-color\": $options.chartGradientTop,\n    \"stop-opacity\": \"0.6\"\n  }, null, 8 /* PROPS */, _hoisted_16), _createElementVNode(\"stop\", {\n    offset: \"100%\",\n    \"stop-color\": $options.chartGradientBottom,\n    \"stop-opacity\": \"0.05\"\n  }, null, 8 /* PROPS */, _hoisted_17)])]), _createElementVNode(\"path\", {\n    d: $options.areaPath,\n    fill: \"url(#areaGradient)\"\n  }, null, 8 /* PROPS */, _hoisted_18), _createElementVNode(\"path\", {\n    d: $options.linePath,\n    fill: \"none\",\n    stroke: $options.chartLineColor,\n    \"stroke-width\": \"2\"\n  }, null, 8 /* PROPS */, _hoisted_19), _createCommentVNode(\" Línea de comparación del año anterior (solo visible si showComparison es true) \"), $data.showComparison ? (_openBlock(), _createElementBlock(\"path\", {\n    key: 0,\n    d: $options.comparisonLinePath,\n    fill: \"none\",\n    stroke: $options.comparisonLineColor,\n    \"stroke-width\": \"2\",\n    \"stroke-dasharray\": \"4,2\"\n  }, null, 8 /* PROPS */, _hoisted_20)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Línea vertical para el punto actual \"), $options.currentPoint && $data.mouseOver ? (_openBlock(), _createElementBlock(\"line\", {\n    key: 1,\n    x1: $options.currentPoint.x,\n    y1: $data.chartHeight,\n    x2: $options.currentPoint.x,\n    y2: $options.currentPoint.y,\n    stroke: $options.chartLineColor,\n    \"stroke-width\": \"1\",\n    \"stroke-dasharray\": \"2,2\"\n  }, null, 8 /* PROPS */, _hoisted_21)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Círculo indicador (solo aparece cuando el mouse está sobre el gráfico) \"), $options.currentPoint && $data.mouseOver ? (_openBlock(), _createElementBlock(\"circle\", {\n    key: 2,\n    cx: $options.currentPoint.x,\n    cy: $options.currentPoint.y,\n    r: $options.isMobile ? 5 : 6,\n    fill: $options.chartLineColor,\n    stroke: \"#1a1a1a\",\n    \"stroke-width\": \"2\",\n    class: \"hover-point\"\n  }, null, 8 /* PROPS */, _hoisted_22)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Área interactiva transparente para detectar movimiento del mouse \"), _createElementVNode(\"rect\", {\n    class: \"interaction-overlay\",\n    width: $data.chartWidth - 10,\n    height: $data.chartHeight,\n    fill: \"transparent\",\n    style: {\n      \"pointer-events\": \"all\"\n    }\n  }, null, 8 /* PROPS */, _hoisted_23)], 512 /* NEED_PATCH */)), _createCommentVNode(\" Eje X con los meses \"), _createElementVNode(\"div\", _hoisted_24, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.monthLabels, (month, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"x-label\", {\n        'active': $data.currentMonthIndex === index && $data.mouseOver\n      }]),\n      key: index,\n      style: _normalizeStyle({\n        left: `${index / ($data.monthLabels.length - 1) * ($data.chartWidth - 10)}px`\n      })\n    }, _toDisplayString(month), 7 /* TEXT, CLASS, STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Tooltip que sigue al mouse \"), $options.currentPoint && $data.mouseOver ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"tooltip\",\n    style: _normalizeStyle($options.tooltipStyle)\n  }, [_createElementVNode(\"div\", _hoisted_25, _toDisplayString($options.currentPoint.month) + \", \" + _toDisplayString($options.currentPoint.year), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_26, \"$\" + _toDisplayString($options.formatCurrency($options.currentPoint.value)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_27, \"Acumulado: $\" + _toDisplayString($options.formatCurrency($options.currentPointAccumulated)), 1 /* TEXT */), _createCommentVNode(\" Comparación con el año anterior (solo si showComparison es true) \"), $data.showComparison && $options.historicalDataPoints.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_28, [_createElementVNode(\"div\", _hoisted_29, _toDisplayString($options.currentPoint.year - 1) + \":\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_30, \" $\" + _toDisplayString($options.formatCurrency($options.getHistoricalValueAtCurrentIndex())), 1 /* TEXT */), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"comparison-difference\", {\n      'positive': $options.currentPointYearOverYearChange?.amount > 0,\n      'negative': $options.currentPointYearOverYearChange?.amount < 0\n    }])\n  }, _toDisplayString($options.currentPointYearOverYearChange?.amount > 0 ? '+' : '') + _toDisplayString($options.formatCurrency($options.currentPointYearOverYearChange?.amount)) + \" (\" + _toDisplayString($options.formatPercent($options.currentPointYearOverYearChange?.percent)) + \") \", 3 /* TEXT, CLASS */)])) : _createCommentVNode(\"v-if\", true)], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true)], 544 /* NEED_HYDRATION, NEED_PATCH */)])]);\n}","map":{"version":3,"names":["class","ref","width","height","id","x1","y1","x2","y2","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$options","formattedTotalRevenue","_normalizeClass","totalChange","_hoisted_5","formattedTotalChange","formattedChangePercent","_hoisted_6","$data","showComparison","_hoisted_7","_hoisted_8","_hoisted_9","type","_cache","$event","_hoisted_10","_createTextVNode","_createVNode","_component_icon","name","_hoisted_11","_hoisted_12","_hoisted_13","_Fragment","_renderList","yAxisLabels","value","index","onMousemove","args","handleMouseMove","onMouseleave","resetHighlight","onTouchmove","handleTouchMove","onTouchend","_createCommentVNode","_hoisted_14","_hoisted_15","offset","chartGradientTop","_hoisted_16","chartGradientBottom","_hoisted_17","d","areaPath","fill","_hoisted_18","linePath","stroke","chartLineColor","_hoisted_19","comparisonLinePath","comparisonLineColor","_hoisted_20","currentPoint","mouseOver","x","chartHeight","y","_hoisted_21","cx","cy","r","isMobile","_hoisted_22","chartWidth","style","_hoisted_23","_hoisted_24","monthLabels","month","currentMonthIndex","_normalizeStyle","left","length","tooltipStyle","_hoisted_25","year","_hoisted_26","formatCurrency","_hoisted_27","currentPointAccumulated","historicalDataPoints","_hoisted_28","_hoisted_29","_hoisted_30","getHistoricalValueAtCurrentIndex","currentPointYearOverYearChange","amount","formatPercent","percent"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"revenue-chart-container\">\r\n    <div class=\"chart-header\">\r\n      <div class=\"chart-title-section\">\r\n        <h2 class=\"chart-title\">Total Ingresos</h2>\r\n        <div class=\"revenue-amount\">${{ formattedTotalRevenue }}</div>\r\n        <div class=\"change-indicator\" :class=\"{ 'positive': totalChange > 0, 'negative': totalChange < 0 }\">\r\n          <span class=\"change-value\">{{ totalChange > 0 ? '+' : '' }}{{ formattedTotalChange }} ({{ formattedChangePercent }}%)</span>\r\n          <span class=\"period\">· {{ showComparison ? 'vs. año anterior' : 'últimos 12 meses' }}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"period-selector\">\r\n        <div class=\"controls\">\r\n          <label class=\"comparison-toggle\">\r\n            <input type=\"checkbox\" v-model=\"showComparison\">\r\n            <span class=\"toggle-label\">Comparar con año anterior</span>\r\n          </label>\r\n          <button class=\"period-button active\">\r\n            Últimos 12 meses\r\n            <icon name=\"arrow_drop_down\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"chart-content\">\r\n      <div class=\"chart-axes\">\r\n        <div class=\"y-axis\">\r\n          <div class=\"axis-label\" v-for=\"(value, index) in yAxisLabels\" :key=\"index\">\r\n            {{ value }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"chart-graphic\" ref=\"chartContainer\" \r\n           @mousemove=\"handleMouseMove\"\r\n           @mouseleave=\"resetHighlight\" \r\n           @touchmove=\"handleTouchMove\"\r\n           @touchend=\"resetHighlight\">\r\n        <!-- La gráfica SVG se generará aquí -->\r\n        <svg class=\"chart-svg\" ref=\"chartSvg\" width=\"100%\" height=\"100%\">\r\n          <defs>\r\n            <linearGradient id=\"areaGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n              <stop offset=\"0%\" :stop-color=\"chartGradientTop\" stop-opacity=\"0.6\" />\r\n              <stop offset=\"100%\" :stop-color=\"chartGradientBottom\" stop-opacity=\"0.05\" />\r\n            </linearGradient>\r\n          </defs>\r\n          <path :d=\"areaPath\" fill=\"url(#areaGradient)\" />\r\n          <path :d=\"linePath\" fill=\"none\" :stroke=\"chartLineColor\" stroke-width=\"2\" />\r\n          \r\n          <!-- Línea de comparación del año anterior (solo visible si showComparison es true) -->\r\n          <path v-if=\"showComparison\" \r\n                :d=\"comparisonLinePath\" \r\n                fill=\"none\" \r\n                :stroke=\"comparisonLineColor\" \r\n                stroke-width=\"2\" \r\n                stroke-dasharray=\"4,2\" />\r\n          \r\n          <!-- Línea vertical para el punto actual -->\r\n          <line v-if=\"currentPoint && mouseOver\" \r\n                :x1=\"currentPoint.x\" \r\n                :y1=\"chartHeight\" \r\n                :x2=\"currentPoint.x\" \r\n                :y2=\"currentPoint.y\" \r\n                :stroke=\"chartLineColor\" \r\n                stroke-width=\"1\" \r\n                stroke-dasharray=\"2,2\" />\r\n          \r\n          <!-- Círculo indicador (solo aparece cuando el mouse está sobre el gráfico) -->\r\n          <circle \r\n            v-if=\"currentPoint && mouseOver\"\r\n            :cx=\"currentPoint.x\" \r\n            :cy=\"currentPoint.y\" \r\n            :r=\"isMobile ? 5 : 6\" \r\n            :fill=\"chartLineColor\" \r\n            stroke=\"#1a1a1a\" \r\n            stroke-width=\"2\"\r\n            class=\"hover-point\"\r\n          />\r\n          \r\n          <!-- Área interactiva transparente para detectar movimiento del mouse -->\r\n          <rect \r\n            class=\"interaction-overlay\" \r\n            :width=\"chartWidth - 10\" \r\n            :height=\"chartHeight\" \r\n            fill=\"transparent\" \r\n            style=\"pointer-events: all;\"\r\n          />\r\n        </svg>\r\n        \r\n        <!-- Eje X con los meses -->\r\n        <div class=\"x-axis\">\r\n          <div \r\n            class=\"x-label\" \r\n            v-for=\"(month, index) in monthLabels\" \r\n            :key=\"index\" \r\n            :style=\"{ left: `${(index / (monthLabels.length - 1)) * (chartWidth - 10)}px` }\"\r\n            :class=\"{ 'active': currentMonthIndex === index && mouseOver }\"\r\n          >\r\n            {{ month }}\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Tooltip que sigue al mouse -->\r\n        <div \r\n          v-if=\"currentPoint && mouseOver\" \r\n          class=\"tooltip\" \r\n          :style=\"tooltipStyle\"\r\n        >\r\n          <div class=\"tooltip-title\">{{ currentPoint.month }}, {{ currentPoint.year }}</div>\r\n          <div class=\"tooltip-value\">${{ formatCurrency(currentPoint.value) }}</div>\r\n          <div class=\"tooltip-accumulated\">Acumulado: ${{ formatCurrency(currentPointAccumulated) }}</div>\r\n          \r\n          <!-- Comparación con el año anterior (solo si showComparison es true) -->\r\n          <div v-if=\"showComparison && historicalDataPoints.length > 0\" class=\"tooltip-comparison\">\r\n            <div class=\"comparison-label\">{{ currentPoint.year - 1 }}:</div>\r\n            <div class=\"comparison-value\">\r\n              ${{ formatCurrency(getHistoricalValueAtCurrentIndex()) }}\r\n            </div>\r\n            <div class=\"comparison-difference\" :class=\"{ 'positive': currentPointYearOverYearChange?.amount > 0, 'negative': currentPointYearOverYearChange?.amount < 0 }\">\r\n              {{ currentPointYearOverYearChange?.amount > 0 ? '+' : '' }}{{ formatCurrency(currentPointYearOverYearChange?.amount) }} \r\n              ({{ formatPercent(currentPointYearOverYearChange?.percent) }})\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MaterialIcon from '../ui/Icon.vue';\r\n\r\nexport default {\r\n  name: 'RevenueChart',\r\n  \r\n  components: {\r\n    icon: MaterialIcon\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Datos de ingresos de los últimos 12 meses\r\n     * Debe ser un array de objetos con las propiedades \"month\", \"year\" y \"revenue\"\r\n     */\r\n    revenueData: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => []\r\n    },\r\n    \r\n    /**\r\n     * Datos de ingresos históricos para comparación (año anterior)\r\n     * Debe seguir la misma estructura que revenueData\r\n     */\r\n    historicalData: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    \r\n    /**\r\n     * Si es true, intenta generar automáticamente datos históricos si no se proporcionan\r\n     */\r\n    autoGenerateHistorical: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    \r\n    /**\r\n     * Si es true, muestra la comparación por defecto\r\n     */\r\n    defaultShowComparison: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    \r\n    /**\r\n     * Cambio porcentual en los ingresos con respecto al período anterior\r\n     */\r\n    changePercent: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    \r\n    /**\r\n     * Valor absoluto del cambio en los ingresos\r\n     */\r\n    changeAmount: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    \r\n    /**\r\n     * Color principal del gráfico\r\n     */\r\n    color: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    \r\n    /**\r\n     * Color para los datos de comparación del año anterior\r\n     */\r\n    comparisonColor: {\r\n      type: String,\r\n      default: '#777777'\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      chartWidth: 0,\r\n      chartHeight: 0,\r\n      currentMonthIndex: -1,\r\n      mouseOver: false,\r\n      mouseX: 0,\r\n      mouseY: 0,\r\n      showComparison: this.defaultShowComparison,\r\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\r\n      yAxisLabelsCount: 5, // Número de etiquetas en el eje Y\r\n      // Datos simulados para el gráfico si no se proporcionan\r\n      defaultData: [\r\n        { month: 'Ene', year: new Date().getFullYear(), revenue: 1000000 },\r\n        { month: 'Feb', year: new Date().getFullYear(), revenue: 1200000 },\r\n        { month: 'Mar', year: new Date().getFullYear(), revenue: 2500000 },\r\n        { month: 'Abr', year: new Date().getFullYear(), revenue: 3800000 },\r\n        { month: 'May', year: new Date().getFullYear(), revenue: 5200000 },\r\n        { month: 'Jun', year: new Date().getFullYear(), revenue: 4800000 },\r\n        { month: 'Jul', year: new Date().getFullYear(), revenue: 8500000 },\r\n        { month: 'Ago', year: new Date().getFullYear(), revenue: 12000000 },\r\n        { month: 'Sep', year: new Date().getFullYear(), revenue: 9500000 },\r\n        { month: 'Oct', year: new Date().getFullYear(), revenue: 11000000 },\r\n        { month: 'Nov', year: new Date().getFullYear(), revenue: 12500000 },\r\n        { month: 'Dic', year: new Date().getFullYear(), revenue: 15000000 }\r\n      ],\r\n      // Datos simulados para comparación del año anterior\r\n      defaultHistoricalData: [],\r\n      // Tooltip mostrado actualmente (principal o histórico)\r\n      activeTooltipType: 'current',\r\n      // Detectar si estamos en un dispositivo móvil\r\n      windowWidth: window.innerWidth\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    /**\r\n     * Detecta si estamos en un dispositivo móvil basado en el ancho de la ventana\r\n     */\r\n    isMobile() {\r\n      return this.windowWidth <= 768;\r\n    },\r\n    \r\n    /**\r\n     * Determina el color a usar para el gráfico según el valor de cambio\r\n     */\r\n    chartLineColor() {\r\n      if (this.color) return this.color;\r\n      \r\n      // Si es positivo, usar verde como en SalesCard\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      }\r\n      // Si es negativo, usar rojo como en SalesCard\r\n      else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      }\r\n      // Si es neutral, usar color turquesa por defecto\r\n      else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Color para la línea de comparación del año anterior\r\n     */\r\n    comparisonLineColor() {\r\n      return this.comparisonColor || '#777777';\r\n    },\r\n    \r\n    /**\r\n     * Color para la parte superior del gradiente\r\n     */\r\n    chartGradientTop() {\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      } else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      } else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Color para la parte inferior del gradiente\r\n     */\r\n    chartGradientBottom() {\r\n      if (this.totalChange > 0) {\r\n        return '#27ae60';\r\n      } else if (this.totalChange < 0) {\r\n        return '#e74c3c';\r\n      } else {\r\n        return '#2dc6af';\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Obtiene los datos de ingresos actuales, generando datos con años si es necesario\r\n     */\r\n    chartData() {\r\n      if (this.revenueData.length > 0) {\r\n        return this.ensureYearInData(this.revenueData);\r\n      }\r\n      return this.defaultData;\r\n    },\r\n    \r\n    /**\r\n     * Obtiene los datos históricos para la comparación, generando si es necesario\r\n     */\r\n    historicalChartData() {\r\n      if (this.historicalData.length > 0) {\r\n        return this.ensureYearInData(this.historicalData);\r\n      }\r\n      \r\n      if (this.autoGenerateHistorical && this.chartData.length > 0) {\r\n        return this.generateHistoricalData();\r\n      }\r\n      \r\n      return this.defaultHistoricalData;\r\n    },\r\n    \r\n    /**\r\n     * Calcula el total de ingresos sumando todos los valores\r\n     */\r\n    totalRevenue() {\r\n      return this.chartData.reduce((sum, item) => sum + item.revenue, 0);\r\n    },\r\n    \r\n    /**\r\n     * Calcula el total de ingresos del año anterior para comparación\r\n     */\r\n    totalHistoricalRevenue() {\r\n      return this.historicalChartData.reduce((sum, item) => sum + item.revenue, 0);\r\n    },\r\n    \r\n    /**\r\n     * Calcula la diferencia porcentual entre el periodo actual y el histórico\r\n     */\r\n    yearOverYearChangePercent() {\r\n      if (!this.totalHistoricalRevenue) return 0;\r\n      return ((this.totalRevenue - this.totalHistoricalRevenue) / this.totalHistoricalRevenue) * 100;\r\n    },\r\n    \r\n    /**\r\n     * Formatea el total de ingresos para mostrar\r\n     */\r\n    formattedTotalRevenue() {\r\n      return this.formatLargeNumber(this.totalRevenue);\r\n    },\r\n    \r\n    /**\r\n     * Obtiene el valor de cambio total\r\n     */\r\n    totalChange() {\r\n      if (this.showComparison && this.historicalChartData.length > 0) {\r\n        return this.totalRevenue - this.totalHistoricalRevenue;\r\n      }\r\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\r\n    },\r\n    \r\n    /**\r\n     * Formatea el cambio total para mostrar\r\n     */\r\n    formattedTotalChange() {\r\n      return this.formatLargeNumber(this.totalChange);\r\n    },\r\n    \r\n    /**\r\n     * Formatea el porcentaje de cambio\r\n     */\r\n    formattedChangePercent() {\r\n      if (this.showComparison && this.historicalChartData.length > 0) {\r\n        return this.yearOverYearChangePercent.toFixed(1);\r\n      }\r\n      return (this.changePercent || 12.2).toFixed(1);\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para la línea del gráfico\r\n     */\r\n    linePath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const { maxValue } = this.calculateDataRange();\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      const availableWidth = this.chartWidth - paddingRight;\r\n      \r\n      return this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * availableWidth;\r\n        const normalizedValue = point.revenue / maxValue;\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para la línea de comparación del año anterior\r\n     */\r\n    comparisonLinePath() {\r\n      if (!this.showComparison || !this.historicalChartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const { maxValue } = this.calculateDataRange();\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      const availableWidth = this.chartWidth - paddingRight;\r\n      \r\n      return this.historicalChartData.map((point, index) => {\r\n        const x = (index / (this.historicalChartData.length - 1)) * availableWidth;\r\n        const normalizedValue = point.revenue / maxValue;\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n    },\r\n    \r\n    /**\r\n     * Calcula la ruta SVG para el área bajo la línea\r\n     */\r\n    areaPath() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return '';\r\n      \r\n      const { maxValue } = this.calculateDataRange();\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      const availableWidth = this.chartWidth - paddingRight;\r\n      \r\n      const linePath = this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * availableWidth;\r\n        const normalizedValue = point.revenue / maxValue;\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        return `${index === 0 ? 'M' : 'L'}${x},${y}`;\r\n      }).join(' ');\r\n      \r\n      return `${linePath} L${availableWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\r\n    },\r\n    \r\n    /**\r\n     * Calcula todos los puntos de datos para determinar el punto exacto a mostrar en cada posición\r\n     */\r\n    dataPoints() {\r\n      if (!this.chartData.length || !this.chartWidth || !this.chartHeight) return [];\r\n      \r\n      const { maxValue } = this.calculateDataRange();\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      const availableWidth = this.chartWidth - paddingRight;\r\n      \r\n      return this.chartData.map((point, index) => {\r\n        const x = (index / (this.chartData.length - 1)) * availableWidth;\r\n        const normalizedValue = point.revenue / maxValue;\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        \r\n        return {\r\n          x,\r\n          y,\r\n          month: point.month,\r\n          year: point.year,\r\n          value: point.revenue,\r\n          index,\r\n          type: 'current'\r\n        };\r\n      });\r\n    },\r\n    \r\n    /**\r\n     * Calcula los puntos de datos para el año anterior\r\n     */\r\n    historicalDataPoints() {\r\n      if (!this.showComparison || !this.historicalChartData.length || !this.chartWidth || !this.chartHeight) return [];\r\n      \r\n      const { maxValue } = this.calculateDataRange();\r\n      const paddingBottom = 20;\r\n      const paddingTop = 10;\r\n      const paddingRight = 10; // Añadimos un margen derecho para acomodar el último mes\r\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\r\n      const availableWidth = this.chartWidth - paddingRight;\r\n      \r\n      return this.historicalChartData.map((point, index) => {\r\n        const x = (index / (this.historicalChartData.length - 1)) * availableWidth;\r\n        const normalizedValue = point.revenue / maxValue;\r\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\r\n        \r\n        return {\r\n          x,\r\n          y,\r\n          month: point.month,\r\n          year: point.year,\r\n          value: point.revenue,\r\n          index,\r\n          type: 'historical'\r\n        };\r\n      });\r\n    },\r\n    \r\n    /**\r\n     * Obtiene la información del punto actual seleccionado\r\n     */\r\n    currentPoint() {\r\n      if (!this.dataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.dataPoints.length) \r\n        return null;\r\n      \r\n      // Siempre devolvemos el punto actual\r\n      return this.dataPoints[this.currentMonthIndex];\r\n    },\r\n    \r\n    /**\r\n     * Calcula el valor acumulado hasta el punto actual\r\n     */\r\n    currentPointAccumulated() {\r\n      if (!this.chartData.length || this.currentMonthIndex < 0) return 0;\r\n      \r\n      let sum = 0;\r\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\r\n        sum += this.chartData[i].revenue;\r\n      }\r\n      \r\n      return sum;\r\n    },\r\n    \r\n    /**\r\n     * Calcula la diferencia entre el punto actual y el mismo punto del año anterior\r\n     */\r\n    currentPointYearOverYearChange() {\r\n      if (!this.currentPoint || !this.showComparison || \r\n          this.currentMonthIndex < 0 || this.currentMonthIndex >= this.chartData.length ||\r\n          this.currentMonthIndex >= this.historicalChartData.length) {\r\n        return null;\r\n      }\r\n      \r\n      const currentValue = this.chartData[this.currentMonthIndex].revenue;\r\n      const historicalValue = this.historicalChartData[this.currentMonthIndex].revenue;\r\n      \r\n      return {\r\n        amount: currentValue - historicalValue,\r\n        percent: historicalValue ? ((currentValue - historicalValue) / historicalValue) * 100 : 0\r\n      };\r\n    },\r\n    \r\n    /**\r\n     * Estilo para la posición del tooltip basado en la posición del mouse\r\n     */\r\n    tooltipStyle() {\r\n      // Calcular si el tooltip debe aparecer a la izquierda o derecha del cursor\r\n      // para evitar que se salga de los bordes\r\n      const tooltipWidth = 180; // Aumentado para incluir la comparación\r\n      const tooltipHeight = this.showComparison ? 140 : 80; // Altura aumentada para incluir la comparación\r\n      const offset = 15; // Distancia del cursor al tooltip\r\n      \r\n      let left = this.mouseX + offset;\r\n      let top = this.mouseY - tooltipHeight / 2;\r\n      \r\n      // Evitar que se salga por el lado derecho\r\n      if (left + tooltipWidth > this.chartWidth) {\r\n        left = this.mouseX - tooltipWidth - offset;\r\n      }\r\n      \r\n      // Evitar que se salga por arriba\r\n      if (top < 0) {\r\n        top = 10;\r\n      }\r\n      \r\n      // Evitar que se salga por abajo\r\n      if (top + tooltipHeight > this.chartHeight) {\r\n        top = this.chartHeight - tooltipHeight - 10;\r\n      }\r\n      \r\n      return {\r\n        left: `${left}px`,\r\n        top: `${top}px`\r\n      };\r\n    },\r\n    \r\n    /**\r\n     * Calcula dinámicamente las etiquetas del eje Y basándose en los datos reales\r\n     */\r\n    yAxisLabels() {\r\n      const { maxValue } = this.calculateDataRange();\r\n      const labels = [];\r\n      \r\n      // Si no hay datos, retornar array vacío\r\n      if (maxValue <= 0) return [];\r\n      \r\n      // Encontrar un valor máximo redondeado adecuado para el eje Y\r\n      let roundedMax = this.getRoundedMax(maxValue);\r\n      \r\n      // Calcular el incremento entre etiquetas\r\n      const increment = roundedMax / (this.yAxisLabelsCount - 1);\r\n      \r\n      // Generar las etiquetas del eje Y\r\n      for (let i = 0; i < this.yAxisLabelsCount; i++) {\r\n        const value = i * increment;\r\n        labels.push(this.formatAxisLabel(value));\r\n      }\r\n      \r\n      // Regresar las etiquetas en orden de mayor a menor (para que coincidan con el dibujo)\r\n      return labels.reverse();\r\n    },\r\n  },\r\n  \r\n  mounted() {\r\n    this.updateChartDimensions();\r\n    window.addEventListener('resize', this.handleResize);\r\n    this.initDefaultHistoricalData();\r\n  },\r\n  \r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.handleResize);\r\n  },\r\n  \r\n  watch: {\r\n    // Observar cambios en la visualización de la comparación\r\n    showComparison(newValue) {\r\n      // Emitir evento cuando cambia el modo de comparación\r\n      this.$emit('comparison-changed', newValue);\r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Maneja el evento de redimensionamiento de la ventana\r\n     */\r\n    handleResize() {\r\n      this.windowWidth = window.innerWidth;\r\n      this.updateChartDimensions();\r\n    },\r\n    \r\n    /**\r\n     * Inicializa los datos históricos por defecto\r\n     */\r\n    initDefaultHistoricalData() {\r\n      if (this.autoGenerateHistorical && this.defaultHistoricalData.length === 0) {\r\n        this.defaultHistoricalData = this.defaultData.map(item => ({\r\n          month: item.month,\r\n          year: item.year - 1,\r\n          revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\r\n        }));\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Genera datos históricos basados en los datos actuales\r\n     */\r\n    generateHistoricalData() {\r\n      return this.chartData.map(item => ({\r\n        month: item.month,\r\n        year: item.year - 1, // Año anterior\r\n        revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\r\n      }));\r\n    },\r\n    \r\n    /**\r\n     * Asegura que todos los elementos de datos tengan un año\r\n     */\r\n    ensureYearInData(data) {\r\n      return data.map(item => {\r\n        if (!item.year) {\r\n          return {\r\n            ...item,\r\n            year: new Date().getFullYear() // Añadir el año actual si no existe\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n    },\r\n    \r\n    /**\r\n     * Calcula el rango de valores para los dos conjuntos de datos\r\n     */\r\n    calculateDataRange() {\r\n      let dataToCompare = [...this.chartData];\r\n      \r\n      if (this.showComparison && this.historicalChartData.length > 0) {\r\n        dataToCompare = [...dataToCompare, ...this.historicalChartData];\r\n      }\r\n      \r\n      // Obtener el valor máximo real de los datos\r\n      let maxValue = Math.max(...dataToCompare.map(d => d.revenue));\r\n      \r\n      // Usar el valor máximo redondeado para asegurar que coincida con las etiquetas del eje Y\r\n      maxValue = this.getRoundedMax(maxValue);\r\n      \r\n      return { maxValue };\r\n    },\r\n    \r\n    /**\r\n     * Actualiza las dimensiones del gráfico en función del contenedor\r\n     */\r\n    updateChartDimensions() {\r\n      if (this.$refs.chartContainer) {\r\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\r\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Gestiona el movimiento del mouse sobre el gráfico\r\n     * Usa un algoritmo de \"snap to nearest point\" mejorado para evitar cambios erráticos\r\n     */\r\n    handleMouseMove(event) {\r\n      if (!this.chartData.length || !this.dataPoints.length) return;\r\n      \r\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\r\n      const mouseX = event.clientX - chartRect.left;\r\n      const mouseY = event.clientY - chartRect.top;\r\n      \r\n      // Actualizar la posición del mouse para el tooltip\r\n      this.mouseX = mouseX;\r\n      this.mouseY = mouseY;\r\n      \r\n      // Encuentra el punto más cercano al mouse\r\n      this.updateActivePointFromPosition(mouseX);\r\n      this.mouseOver = true;\r\n    },\r\n    \r\n    /**\r\n     * Gestiona el movimiento táctil sobre el gráfico (para dispositivos móviles)\r\n     */\r\n    handleTouchMove(event) {\r\n      if (!this.chartData.length || !this.dataPoints.length || !event.touches[0]) return;\r\n      \r\n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\r\n      const touchX = event.touches[0].clientX - chartRect.left;\r\n      const touchY = event.touches[0].clientY - chartRect.top;\r\n      \r\n      // Actualizar la posición del touch para el tooltip\r\n      this.mouseX = touchX;\r\n      this.mouseY = touchY;\r\n      \r\n      this.updateActivePointFromPosition(touchX);\r\n      this.mouseOver = true;\r\n      \r\n      // Prevenir el desplazamiento de la página durante el uso del gráfico\r\n      event.preventDefault();\r\n    },\r\n    \r\n    /**\r\n     * Actualiza el punto activo basado en la posición X del mouse/touch\r\n     * Algoritmo mejorado para prevenir saltos y movimientos bruscos\r\n     */\r\n    updateActivePointFromPosition(posX) {\r\n      // Asegurarse de que posX esté dentro de los límites del gráfico\r\n      posX = Math.min(Math.max(0, posX), this.chartWidth);\r\n      \r\n      if (this.dataPoints.length === 0) return;\r\n      \r\n      // Encuentra el punto más cercano en los datos actuales\r\n      let nearestIndex = 0;\r\n      let minDistance = Infinity;\r\n      \r\n      this.dataPoints.forEach((point, index) => {\r\n        const distance = Math.abs(point.x - posX);\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          nearestIndex = index;\r\n        }\r\n      });\r\n      \r\n      // Siempre mostramos el punto actual\r\n      this.activeTooltipType = 'current';\r\n      \r\n      // Actualiza el índice sólo si es diferente (evita re-renders innecesarios)\r\n      if (this.currentMonthIndex !== nearestIndex) {\r\n        this.currentMonthIndex = nearestIndex;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Restablece la visualización cuando el mouse deja el gráfico\r\n     */\r\n    resetHighlight() {\r\n      this.mouseOver = false;\r\n    },\r\n    \r\n    /**\r\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\r\n     */\r\n    formatLargeNumber(value) {\r\n      if (value >= 1000000000) {\r\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\r\n      } else if (value >= 1000000) {\r\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\r\n      } else if (value >= 1000) {\r\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\r\n      }\r\n      return value.toString();\r\n    },\r\n    \r\n    /**\r\n     * Formatea un valor monetario con separadores de miles\r\n     */\r\n    formatCurrency(value) {\r\n      return new Intl.NumberFormat('es-ES', {\r\n        maximumFractionDigits: 0\r\n      }).format(value);\r\n    },\r\n    \r\n    /**\r\n     * Formatea un valor de porcentaje\r\n     */\r\n    formatPercent(value) {\r\n      return `${value > 0 ? '+' : ''}${value.toFixed(1)}%`;\r\n    },\r\n    \r\n    /**\r\n     * Obtiene el valor del punto histórico en la posición actual\r\n     */\r\n    getHistoricalValueAtCurrentIndex() {\r\n      if (!this.showComparison || !this.historicalDataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.historicalDataPoints.length) return null;\r\n      \r\n      return this.historicalDataPoints[this.currentMonthIndex].value;\r\n    },\r\n    \r\n    /**\r\n     * Calcula un valor máximo redondeado apropiado para las etiquetas del eje Y\r\n     */\r\n    getRoundedMax(maxValue) {\r\n      // Determinar la magnitud del valor\r\n      const magnitude = Math.pow(10, Math.floor(Math.log10(maxValue)));\r\n      \r\n      // Redondear hacia arriba para obtener un valor \"limpio\"\r\n      let roundedMax = Math.ceil(maxValue / magnitude) * magnitude;\r\n      \r\n      // Si el valor redondeado es mucho mayor que el máximo real, ajustar\r\n      if (roundedMax > maxValue * 1.5) {\r\n        roundedMax = Math.ceil(maxValue / (magnitude / 2)) * (magnitude / 2);\r\n      }\r\n      \r\n      return roundedMax;\r\n    },\r\n    \r\n    /**\r\n     * Formatea las etiquetas del eje Y para que sean legibles\r\n     */\r\n    formatAxisLabel(value) {\r\n      return this.formatLargeNumber(value);\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.revenue-chart-container {\r\n  background-color: var(--bg-secondary);\r\n  border-radius: 10px;\r\n  padding: 16px;\r\n  /* Efecto 3D con múltiples sombras */\r\n  box-shadow: \r\n    0 2px 4px rgba(0, 0, 0, 0.05),\r\n    0 4px 8px rgba(0, 0, 0, 0.05),\r\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\r\n  /* Borde con gradiente para efecto 3D */\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\r\n  height: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: var(--text-primary);\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-color: var(--bg-secondary, #1a1a1a);\r\n  color: var(--text-primary, #efefef);\r\n  /* Efecto de brillo en el borde superior */\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    rgba(255, 255, 255, 0.1) 0%,\r\n    rgba(255, 255, 255, 0) 20%\r\n  );\r\n  transition: transform 0.3s cubic-bezier(0.165, 0.84, 0.44, 1), \r\n              box-shadow 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\r\n}\r\n\r\n/* Efecto de elevación al pasar el mouse */\r\n.revenue-chart-container:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: \r\n    0 5px 10px rgba(0, 0, 0, 0.1),\r\n    0 10px 20px rgba(0, 0, 0, 0.05),\r\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n/* Añadir un pseudo-elemento para el efecto de brillo en el borde */\r\n.revenue-chart-container::before {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(\r\n    to right,\r\n    rgba(255, 255, 255, 0) 0%,\r\n    rgba(255, 255, 255, 0.3) 50%,\r\n    rgba(255, 255, 255, 0) 100%\r\n  );\r\n  border-top-left-radius: 10px;\r\n  border-top-right-radius: 10px;\r\n}\r\n\r\n/* Añadir un pseudo-elemento para el efecto de sombra en el borde inferior */\r\n.revenue-chart-container::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(\r\n    to right,\r\n    rgba(0, 0, 0, 0) 0%,\r\n    rgba(0, 0, 0, 0.2) 50%,\r\n    rgba(0, 0, 0, 0) 100%\r\n  );\r\n  border-bottom-left-radius: 10px;\r\n  border-bottom-right-radius: 10px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.chart-title-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 0.9rem;\r\n  font-weight: 600;\r\n  margin: 0 0 8px 0;\r\n  opacity: 0.9;\r\n  /* Efecto de texto 3D sutil */\r\n  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.revenue-amount {\r\n  font-size: 1.8rem;\r\n  font-weight: 700;\r\n  margin-bottom: 4px;\r\n  letter-spacing: -0.5px;\r\n  /* Efecto de texto 3D más pronunciado */\r\n  text-shadow: \r\n    0 1px 1px rgba(0, 0, 0, 0.1),\r\n    0 2px 2px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.change-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.change-value {\r\n  font-weight: 600;\r\n}\r\n\r\n.positive {\r\n  color: #27ae60; /* Verde que coincide con SalesCard */\r\n}\r\n\r\n.negative {\r\n  color: #e74c3c; /* Rojo que coincide con SalesCard */\r\n}\r\n\r\n.period {\r\n  opacity: 0.7;\r\n  margin-left: 4px;\r\n}\r\n\r\n.period-selector {\r\n  margin-left: auto;\r\n}\r\n\r\n.controls {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  gap: 8px;\r\n}\r\n\r\n.comparison-toggle {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.75rem;\r\n  cursor: pointer;\r\n  opacity: 0.9;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.comparison-toggle:hover {\r\n  opacity: 1;\r\n}\r\n\r\n.comparison-toggle input[type=\"checkbox\"] {\r\n  position: relative;\r\n  appearance: none;\r\n  width: 34px;\r\n  height: 16px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 10px;\r\n  margin-right: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.comparison-toggle input[type=\"checkbox\"]::before {\r\n  content: '';\r\n  position: absolute;\r\n  width: 14px;\r\n  height: 14px;\r\n  border-radius: 50%;\r\n  top: 1px;\r\n  left: 1px;\r\n  background: #444;\r\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.comparison-toggle input[type=\"checkbox\"]:checked {\r\n  background: rgba(44, 187, 168, 0.5);\r\n}\r\n\r\n.comparison-toggle input[type=\"checkbox\"]:checked::before {\r\n  left: 19px;\r\n  background: #2dc6af;\r\n}\r\n\r\n.toggle-label {\r\n  white-space: nowrap;\r\n}\r\n\r\n.period-button {\r\n  display: flex;\r\n  align-items: center;\r\n  background: none;\r\n  border: none;\r\n  color: inherit;\r\n  font-size: 0.8rem;\r\n  padding: 4px 8px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  opacity: 0.8;\r\n  transition: opacity 0.3s, background-color 0.3s;\r\n}\r\n\r\n.period-button:hover, \r\n.period-button.active {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  opacity: 1;\r\n}\r\n\r\n.chart-content {\r\n  flex: 1;\r\n  display: flex;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.chart-axes {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 20px; /* Espacio para el eje X */\r\n  width: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 10px 0;\r\n}\r\n\r\n.y-axis {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n\r\n.axis-label {\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  text-align: left;\r\n}\r\n\r\n/* Ajuste para el modo claro - etiquetas del eje Y */\r\n:root:not([data-theme='dark']) .axis-label {\r\n  color: rgba(0, 0, 0, 0.6);\r\n}\r\n\r\n.chart-graphic {\r\n  flex: 1;\r\n  margin-left: 50px; /* Ancho del eje Y */\r\n  position: relative;\r\n  height: 100%;\r\n  cursor: crosshair; /* Cambiar cursor al pasar el mouse sobre el gráfico */\r\n  padding-bottom: 5px; /* Dar más espacio en la parte inferior */\r\n}\r\n\r\n.chart-svg {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: calc(100% - 20px); /* Restar altura del eje X por defecto */\r\n  width: calc(100% - 10px); /* Añadir un pequeño margen a la derecha para mostrar diciembre */\r\n}\r\n\r\n.x-axis {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 5px; /* Pequeño padding para evitar que las etiquetas toquen los bordes */\r\n  width: calc(100% - 10px); /* Hacer que el ancho coincida con el SVG */\r\n}\r\n\r\n.x-label {\r\n  position: absolute;\r\n  font-size: 0.65rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  text-align: center;\r\n  transition: color 0.2s ease, font-weight 0.2s ease;\r\n  white-space: nowrap; /* Evitar que las etiquetas se partan en varias líneas */\r\n  transform: translateX(-50%);\r\n}\r\n\r\n/* Ajuste para el modo claro - etiquetas del eje X */\r\n:root:not([data-theme='dark']) .x-label {\r\n  color: rgba(0, 0, 0, 0.6);\r\n}\r\n\r\n/* Ajuste especial para el primer y último mes */\r\n.x-label:first-child {\r\n  left: 0 !important; /* Forzar el primer mes al inicio */\r\n  transform: translateX(0); /* El primer mes se alinea al inicio */\r\n}\r\n\r\n.x-label:last-child {\r\n  left: calc(100% - 10px) !important; /* Forzar el último mes al final */\r\n  transform: translateX(-100%); /* El último mes se alinea al final */\r\n}\r\n\r\n.x-label.active {\r\n  font-weight: 600;\r\n}\r\n\r\n/* Ajuste adicional para noviembre y diciembre para evitar superposición */\r\n.x-label:nth-last-child(1), /* Dic */\r\n.x-label:nth-last-child(2) { /* Nov */\r\n  margin-left: -2px; /* Leve separación entre Nov y Dic */\r\n}\r\n\r\n/* Ajustar altura del eje X para acomodar las etiquetas rotadas */\r\n.x-axis {\r\n  height: 35px;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n/* Los colores activos de los ejes X se definirán dinámicamente basados en chartLineColor */\r\n.positive .x-label.active {\r\n  color: #27ae60;\r\n}\r\n\r\n.negative .x-label.active {\r\n  color: #e74c3c;\r\n}\r\n\r\n/* Ajuste para el modo claro - etiquetas activas */\r\n:root:not([data-theme='dark']) .positive .x-label.active {\r\n  color: #1e8449; /* Verde más oscuro para mejor visibilidad en modo claro */\r\n}\r\n\r\n:root:not([data-theme='dark']) .negative .x-label.active {\r\n  color: #c0392b; /* Rojo más oscuro para mejor visibilidad en modo claro */\r\n}\r\n\r\n/* Estilos para los puntos de datos */\r\n.hover-point {\r\n  filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.3));\r\n  transition: transform 0.1s ease;\r\n}\r\n\r\n/* Ajustar el color del borde del círculo en modo claro */\r\n:root:not([data-theme='dark']) .chart-svg circle.hover-point {\r\n  stroke: #ffffff; /* Borde blanco en modo claro */\r\n  filter: drop-shadow(0 0 4px rgba(0, 0, 0, 0.5)); /* Sombra más pronunciada */\r\n}\r\n\r\n/* Ajustar el color de la línea vertical en modo claro */\r\n:root:not([data-theme='dark']) .chart-svg line {\r\n  stroke: var(--text-primary, #333) !important; /* Asegurar que la línea sea visible */\r\n  stroke-width: 1px; /* Líneas más finas en móvil */\r\n}\r\n\r\n/* Nuevo tooltip que sigue al cursor */\r\n.tooltip {\r\n  position: absolute;\r\n  z-index: 100;\r\n  background: var(--bg-secondary, #222);\r\n  color: var(--text-primary, #efefef);\r\n  border-radius: 6px;\r\n  padding: 6px 10px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  pointer-events: none;\r\n  width: auto;\r\n  min-width: 100px;\r\n  max-width: 220px;\r\n  opacity: 0;\r\n  animation: fadeIn 0.2s forwards;\r\n  transform-origin: center left;\r\n}\r\n\r\n.tooltip::before {\r\n  content: '';\r\n  position: absolute;\r\n  width: 8px;\r\n  height: 8px;\r\n  background: var(--bg-secondary, #222);\r\n  transform: rotate(45deg);\r\n  left: -4px;\r\n  top: 50%;\r\n  margin-top: -4px;\r\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n/* Ajustes para el modo claro */\r\n:root:not([data-theme='dark']) .tooltip {\r\n  background: var(--bg-secondary, #fff);\r\n  color: var(--text-primary, #333);\r\n  border: 1px solid rgba(0, 0, 0, 0.1);\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08), 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n:root:not([data-theme='dark']) .tooltip::before {\r\n  background: var(--bg-secondary, #fff);\r\n  border-left: 1px solid rgba(0, 0, 0, 0.1);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n:root:not([data-theme='dark']) .tooltip-accumulated,\r\n:root:not([data-theme='dark']) .comparison-label {\r\n  color: var(--text-secondary, rgba(0, 0, 0, 0.6));\r\n}\r\n\r\n:root:not([data-theme='dark']) .tooltip-comparison {\r\n  border-top: 1px dashed var(--border-color, rgba(0, 0, 0, 0.1));\r\n}\r\n\r\n.tooltip-title {\r\n  font-size: 0.8rem;\r\n  font-weight: 600;\r\n  margin-bottom: 5px;\r\n  text-align: left;\r\n  color: var(--text-primary, #efefef);\r\n}\r\n\r\n.tooltip-value {\r\n  font-size: 0.9rem;\r\n  font-weight: 700;\r\n  margin-bottom: 3px;\r\n  text-align: left;\r\n}\r\n\r\n/* Aplica color basado en el valor */\r\n.positive .tooltip-value, \r\n.comparison-difference.positive {\r\n  color: #27ae60;\r\n}\r\n\r\n.negative .tooltip-value,\r\n.comparison-difference.negative {\r\n  color: #e74c3c;\r\n}\r\n\r\n/* Aseguramos que los colores positivo/negativo sean visibles en ambos modos */\r\n:root:not([data-theme='dark']) .positive .tooltip-value,\r\n:root:not([data-theme='dark']) .comparison-difference.positive {\r\n  color: #1e8449;\r\n}\r\n\r\n:root:not([data-theme='dark']) .negative .tooltip-value,\r\n:root:not([data-theme='dark']) .comparison-difference.negative {\r\n  color: #c0392b;\r\n}\r\n\r\n.tooltip-accumulated {\r\n  font-size: 0.7rem;\r\n  color: var(--text-secondary, rgba(255, 255, 255, 0.7));\r\n  text-align: left;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n/* Estilos para la comparación de año a año */\r\n.tooltip-comparison {\r\n  margin-top: 5px;\r\n  padding-top: 5px;\r\n  border-top: 1px dashed var(--border-color, rgba(255, 255, 255, 0.15));\r\n}\r\n\r\n.comparison-label {\r\n  font-size: 0.7rem;\r\n  color: var(--text-secondary, rgba(255, 255, 255, 0.7));\r\n  text-align: left;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.comparison-value {\r\n  font-size: 0.8rem;\r\n  font-weight: 600;\r\n  text-align: left;\r\n  margin-bottom: 2px;\r\n  color: var(--text-primary, #efefef);\r\n}\r\n\r\n.comparison-difference {\r\n  font-size: 0.7rem;\r\n  font-weight: 600;\r\n  text-align: left;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateX(-5px); }\r\n  to { opacity: 1; transform: translateX(0); }\r\n}\r\n\r\n/* Eliminamos los estilos redundantes */\r\n.interaction-overlay {\r\n  cursor: crosshair;\r\n}\r\n\r\n/* Ajustes específicos para móviles */\r\n@media (max-width: 768px) {\r\n  .revenue-chart-container {\r\n    height: 300px;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .revenue-amount {\r\n    font-size: 1.6rem;\r\n  }\r\n  \r\n  .chart-title {\r\n    font-size: 0.85rem;\r\n  }\r\n  \r\n  /* Ajustes para mejorar la experiencia táctil en móviles */\r\n  .chart-graphic {\r\n    cursor: pointer;\r\n    padding-bottom: 15px; /* Más espacio en la parte inferior para las etiquetas diagonales */\r\n  }\r\n  \r\n  /* Ajustando el tooltip para móviles */\r\n  .tooltip {\r\n    padding: 6px 10px;\r\n    min-width: 100px;\r\n  }\r\n  \r\n  .tooltip-title {\r\n    font-size: 0.8rem;\r\n  }\r\n  \r\n  .tooltip-value {\r\n    font-size: 0.9rem;\r\n  }\r\n  \r\n  .tooltip-accumulated,\r\n  .comparison-label,\r\n  .comparison-value,\r\n  .comparison-difference {\r\n    font-size: 0.7rem;\r\n  }\r\n  \r\n  /* Ajustar controles y toggle para móviles */\r\n  .controls {\r\n    flex-direction: column;\r\n    gap: 5px;\r\n  }\r\n  \r\n  .comparison-toggle {\r\n    font-size: 0.7rem;\r\n  }\r\n  \r\n  .comparison-toggle input[type=\"checkbox\"] {\r\n    width: 30px;\r\n    height: 14px;\r\n    margin-right: 6px;\r\n  }\r\n  \r\n  .comparison-toggle input[type=\"checkbox\"]::before {\r\n    width: 12px;\r\n    height: 12px;\r\n  }\r\n  \r\n  .comparison-toggle input[type=\"checkbox\"]:checked::before {\r\n    left: 17px;\r\n  }\r\n  \r\n  /* Estilo diagonal para las etiquetas de meses en el eje X */\r\n  .x-label {\r\n    transform: translateX(-50%) rotate(-35deg);\r\n    transform-origin: center top;\r\n    margin-top: 8px;\r\n    font-size: 0.7rem;\r\n    font-weight: 500;\r\n    text-align: center;\r\n  }\r\n  \r\n  .x-label:first-child {\r\n    transform: rotate(-35deg);\r\n    transform-origin: left top;\r\n    left: 5px !important;\r\n    margin-top: 8px;\r\n  }\r\n  \r\n  .x-label:last-child {\r\n    transform: translateX(-100%) rotate(-35deg);\r\n    transform-origin: right top;\r\n    left: calc(100% - 20px) !important;\r\n  }\r\n  \r\n  /* Ajustar la posición de noviembre y diciembre para evitar superposición */\r\n  .x-label:nth-last-child(2) {\r\n    left: calc(100% - 40px) !important;\r\n  }\r\n  \r\n  /* Ajuste para octubre para mejorar distribución */\r\n  .x-label:nth-last-child(3) {\r\n    left: calc(100% - 65px) !important;\r\n  }\r\n  \r\n  /* Ajustar la altura del eje X */\r\n  .x-axis {\r\n    height: 40px; /* Más espacio para las etiquetas diagonales */\r\n    padding-bottom: 10px;\r\n  }\r\n  \r\n  /* Ajustar el tamaño del SVG */\r\n  .chart-svg {\r\n    height: calc(100% - 40px);\r\n  }\r\n}\r\n\r\n/* Ajustes para los elementos SVG en modo claro */\r\n:root:not([data-theme='dark']) .chart-svg path[fill=\"url(#areaGradient)\"] {\r\n  opacity: 0.7; /* Aumentar la opacidad del área en modo claro */\r\n}\r\n\r\n:root:not([data-theme='dark']) .chart-svg path[stroke] {\r\n  stroke-width: 2.5px; /* Líneas ligeramente más gruesas en modo claro */\r\n}\r\n\r\n/* Ajustes para el contenedor del gráfico en modo claro */\r\n:root:not([data-theme='dark']) .chart-content {\r\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n/* Ajustes para el contenedor del eje Y en modo claro */\r\n:root:not([data-theme='dark']) .chart-axes {\r\n  border-right: 1px dashed rgba(0, 0, 0, 0.1);\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}