{"ast":null,"code":"import axios from 'axios';\n\n// Crear instancia de axios con configuración predeterminada\nconst apiClient = axios.create({\n  baseURL: process.env.VUE_APP_API_URL || '/api',\n  timeout: 15000,\n  // 15 segundos\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Interceptor para solicitudes\napiClient.interceptors.request.use(config => {\n  // Aquí puedes modificar las solicitudes antes de enviarlas\n  // Por ejemplo, añadir tokens de autenticación\n\n  // const token = localStorage.getItem('token');\n  // if (token) {\n  //   config.headers['Authorization'] = `Bearer ${token}`;\n  // }\n\n  return config;\n}, error => {\n  // Manejar errores de solicitud\n  console.error('Error en la solicitud API:', error);\n  return Promise.reject(error);\n});\n\n// Interceptor para respuestas\napiClient.interceptors.response.use(response => {\n  // Procesar respuestas exitosas\n  return response;\n}, error => {\n  // Manejar errores de respuesta\n  if (error.response) {\n    // El servidor respondió con un código de estado fuera del rango 2xx\n    console.error('Error de respuesta API:', {\n      status: error.response.status,\n      data: error.response.data\n    });\n\n    // Aquí puedes manejar códigos de estado específicos\n    // Por ejemplo, redireccionar al login si hay un error 401\n\n    // if (error.response.status === 401) {\n    //   router.push('/login');\n    // }\n  } else if (error.request) {\n    // La solicitud se realizó pero no se recibió respuesta\n    console.error('No se recibió respuesta del servidor:', error.request);\n  } else {\n    // Algo ocurrió al configurar la solicitud\n    console.error('Error de configuración API:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n/**\r\n * Servicio para realizar llamadas a la API\r\n */\nexport default {\n  /**\r\n   * Realiza una solicitud GET\r\n   * @param {string} url - URL a solicitar\r\n   * @param {Object} params - Parámetros de consulta\r\n   * @returns {Promise} - Promesa con respuesta\r\n   */\n  get(url, params = {}) {\n    return apiClient.get(url, {\n      params\n    });\n  },\n  /**\r\n   * Realiza una solicitud POST\r\n   * @param {string} url - URL a solicitar\r\n   * @param {Object} data - Datos a enviar\r\n   * @returns {Promise} - Promesa con respuesta\r\n   */\n  post(url, data = {}) {\n    return apiClient.post(url, data);\n  },\n  /**\r\n   * Realiza una solicitud PUT\r\n   * @param {string} url - URL a solicitar\r\n   * @param {Object} data - Datos a enviar\r\n   * @returns {Promise} - Promesa con respuesta\r\n   */\n  put(url, data = {}) {\n    return apiClient.put(url, data);\n  },\n  /**\r\n   * Realiza una solicitud DELETE\r\n   * @param {string} url - URL a solicitar\r\n   * @param {Object} params - Parámetros de consulta\r\n   * @returns {Promise} - Promesa con respuesta\r\n   */\n  delete(url, params = {}) {\n    return apiClient.delete(url, {\n      params\n    });\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","VUE_APP_API_URL","timeout","headers","interceptors","request","use","config","error","console","Promise","reject","response","status","data","message","get","url","params","post","put","delete"],"sources":["C:/Users/Pc/Desktop/Proyectos/criwave/client/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Crear instancia de axios con configuración predeterminada\r\nconst apiClient = axios.create({\r\n  baseURL: process.env.VUE_APP_API_URL || '/api',\r\n  timeout: 15000, // 15 segundos\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  }\r\n});\r\n\r\n// Interceptor para solicitudes\r\napiClient.interceptors.request.use(\r\n  config => {\r\n    // Aquí puedes modificar las solicitudes antes de enviarlas\r\n    // Por ejemplo, añadir tokens de autenticación\r\n    \r\n    // const token = localStorage.getItem('token');\r\n    // if (token) {\r\n    //   config.headers['Authorization'] = `Bearer ${token}`;\r\n    // }\r\n    \r\n    return config;\r\n  },\r\n  error => {\r\n    // Manejar errores de solicitud\r\n    console.error('Error en la solicitud API:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Interceptor para respuestas\r\napiClient.interceptors.response.use(\r\n  response => {\r\n    // Procesar respuestas exitosas\r\n    return response;\r\n  },\r\n  error => {\r\n    // Manejar errores de respuesta\r\n    if (error.response) {\r\n      // El servidor respondió con un código de estado fuera del rango 2xx\r\n      console.error('Error de respuesta API:', {\r\n        status: error.response.status,\r\n        data: error.response.data\r\n      });\r\n      \r\n      // Aquí puedes manejar códigos de estado específicos\r\n      // Por ejemplo, redireccionar al login si hay un error 401\r\n      \r\n      // if (error.response.status === 401) {\r\n      //   router.push('/login');\r\n      // }\r\n      \r\n    } else if (error.request) {\r\n      // La solicitud se realizó pero no se recibió respuesta\r\n      console.error('No se recibió respuesta del servidor:', error.request);\r\n    } else {\r\n      // Algo ocurrió al configurar la solicitud\r\n      console.error('Error de configuración API:', error.message);\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Servicio para realizar llamadas a la API\r\n */\r\nexport default {\r\n  /**\r\n   * Realiza una solicitud GET\r\n   * @param {string} url - URL a solicitar\r\n   * @param {Object} params - Parámetros de consulta\r\n   * @returns {Promise} - Promesa con respuesta\r\n   */\r\n  get(url, params = {}) {\r\n    return apiClient.get(url, { params });\r\n  },\r\n  \r\n  /**\r\n   * Realiza una solicitud POST\r\n   * @param {string} url - URL a solicitar\r\n   * @param {Object} data - Datos a enviar\r\n   * @returns {Promise} - Promesa con respuesta\r\n   */\r\n  post(url, data = {}) {\r\n    return apiClient.post(url, data);\r\n  },\r\n  \r\n  /**\r\n   * Realiza una solicitud PUT\r\n   * @param {string} url - URL a solicitar\r\n   * @param {Object} data - Datos a enviar\r\n   * @returns {Promise} - Promesa con respuesta\r\n   */\r\n  put(url, data = {}) {\r\n    return apiClient.put(url, data);\r\n  },\r\n  \r\n  /**\r\n   * Realiza una solicitud DELETE\r\n   * @param {string} url - URL a solicitar\r\n   * @param {Object} params - Parámetros de consulta\r\n   * @returns {Promise} - Promesa con respuesta\r\n   */\r\n  delete(url, params = {}) {\r\n    return apiClient.delete(url, { params });\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,eAAe,IAAI,MAAM;EAC9CC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACAP,SAAS,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAChCC,MAAM,IAAI;EACR;EACA;;EAEA;EACA;EACA;EACA;;EAEA,OAAOA,MAAM;AACf,CAAC,EACDC,KAAK,IAAI;EACP;EACAC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EAClD,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,SAAS,CAACQ,YAAY,CAACQ,QAAQ,CAACN,GAAG,CACjCM,QAAQ,IAAI;EACV;EACA,OAAOA,QAAQ;AACjB,CAAC,EACDJ,KAAK,IAAI;EACP;EACA,IAAIA,KAAK,CAACI,QAAQ,EAAE;IAClB;IACAH,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAE;MACvCK,MAAM,EAAEL,KAAK,CAACI,QAAQ,CAACC,MAAM;MAC7BC,IAAI,EAAEN,KAAK,CAACI,QAAQ,CAACE;IACvB,CAAC,CAAC;;IAEF;IACA;;IAEA;IACA;IACA;EAEF,CAAC,MAAM,IAAIN,KAAK,CAACH,OAAO,EAAE;IACxB;IACAI,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAACH,OAAO,CAAC;EACvE,CAAC,MAAM;IACL;IACAI,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACO,OAAO,CAAC;EAC7D;EAEA,OAAOL,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA;AACA;AACA,eAAe;EACb;AACF;AACA;AACA;AACA;AACA;EACEQ,GAAGA,CAACC,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IACpB,OAAOtB,SAAS,CAACoB,GAAG,CAACC,GAAG,EAAE;MAAEC;IAAO,CAAC,CAAC;EACvC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,IAAIA,CAACF,GAAG,EAAEH,IAAI,GAAG,CAAC,CAAC,EAAE;IACnB,OAAOlB,SAAS,CAACuB,IAAI,CAACF,GAAG,EAAEH,IAAI,CAAC;EAClC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEM,GAAGA,CAACH,GAAG,EAAEH,IAAI,GAAG,CAAC,CAAC,EAAE;IAClB,OAAOlB,SAAS,CAACwB,GAAG,CAACH,GAAG,EAAEH,IAAI,CAAC;EACjC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEO,MAAMA,CAACJ,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IACvB,OAAOtB,SAAS,CAACyB,MAAM,CAACJ,GAAG,EAAE;MAAEC;IAAO,CAAC,CAAC;EAC1C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}