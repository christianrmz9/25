{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Servicio para obtener datos del dashboard\r\n * \r\n * Este servicio actúa como una capa de abstracción entre los componentes\r\n * y la fuente de datos. Actualmente utiliza datos de ejemplo, pero está\r\n * diseñado para facilitar la transición a una API real en el futuro.\r\n */\n\nimport apiService from './apiService';\nimport mockApi from './mockApi';\n\n// Determinar si estamos en modo desarrollo\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// Estado para almacenar datos en caché\nconst cache = {\n  dashboardData: null,\n  lastFetched: null,\n  cacheTime: 5 * 60 * 1000 // 5 minutos (en milisegundos)\n};\n\n/**\r\n * Servicio para obtener y gestionar datos del dashboard\r\n */\nexport default {\n  /**\r\n   * Obtener todos los datos del dashboard en una sola llamada\r\n   * Implementa caché para evitar llamadas innecesarias\r\n   */\n  async getDashboardData() {\n    // Usar caché si los datos son recientes\n    if (cache.dashboardData && cache.lastFetched && Date.now() - cache.lastFetched < cache.cacheTime) {\n      console.log('Usando datos en caché del dashboard');\n      return Promise.resolve(cache.dashboardData);\n    }\n    try {\n      let response;\n\n      // Usar API mock en desarrollo\n      if (isDevelopment) {\n        console.log('Usando API mock para datos del dashboard');\n        response = await mockApi.getDashboardOverview();\n      } else {\n        // Usar API real en producción\n        response = await apiService.get('/dashboard/overview');\n      }\n\n      // Guardar en caché\n      cache.dashboardData = response.data;\n      cache.lastFetched = Date.now();\n      return response.data;\n    } catch (error) {\n      console.error('Error cargando datos del dashboard:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Forzar recarga de datos (ignorar caché)\r\n   */\n  async refreshDashboardData() {\n    try {\n      let response;\n\n      // Usar API mock en desarrollo\n      if (isDevelopment) {\n        response = await mockApi.getDashboardOverview();\n      } else {\n        // Usar API real en producción\n        response = await apiService.get('/dashboard/overview');\n      }\n\n      // Actualizar caché\n      cache.dashboardData = response.data;\n      cache.lastFetched = Date.now();\n      return response.data;\n    } catch (error) {\n      console.error('Error actualizando datos del dashboard:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Obtener una sección específica de datos\r\n   * @param {string} section - Nombre de la sección (ej: 'ventas', 'usuarios')\r\n   */\n  async getSectionData(section) {\n    try {\n      // Intentar obtener del caché primero\n      const allData = await this.getDashboardData();\n      return allData[section] || null;\n    } catch (error) {\n      console.error(`Error obteniendo datos de la sección ${section}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Importar datos de ejemplo\nimport { dailySalesData, weeklySalesData, monthlySalesData, topProductsData, topCustomersData, salesByHourData, salesByDayData, salesByMonthData } from '../data/mockData';\n\n// Configuración del servicio\nconst API_BASE_URL = '/api'; // URL base para la API real (cuando se implemente)\nconst USE_MOCK_DATA = true; // Cambiar a false cuando se conecte a la API real\n\n/**\r\n * Obtiene las ventas del día actual\r\n * @returns {Promise<Object>} Datos de ventas diarias\r\n */\nexport async function getDailySales() {\n  if (USE_MOCK_DATA) {\n    // Simular un retraso de red para imitar una API real\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return dailySalesData;\n  } else {\n    // Código para obtener datos de la API real\n    const response = await fetch(`${API_BASE_URL}/sales/daily`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas diarias');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene las ventas de la semana actual\r\n * @returns {Promise<Object>} Datos de ventas semanales\r\n */\nexport async function getWeeklySales() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return weeklySalesData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/weekly`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas semanales');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene las ventas del mes actual\r\n * @returns {Promise<Object>} Datos de ventas mensuales\r\n */\nexport async function getMonthlySales() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return monthlySalesData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/monthly`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas mensuales');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene los productos más vendidos\r\n * @param {number} limit - Número máximo de productos a obtener\r\n * @returns {Promise<Array>} Lista de productos más vendidos\r\n */\nexport async function getTopProducts(limit = 5) {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return topProductsData.slice(0, limit);\n  } else {\n    const response = await fetch(`${API_BASE_URL}/products/top?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de productos más vendidos');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene los clientes principales\r\n * @param {number} limit - Número máximo de clientes a obtener\r\n * @returns {Promise<Array>} Lista de clientes principales\r\n */\nexport async function getTopCustomers(limit = 5) {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return topCustomersData.slice(0, limit);\n  } else {\n    const response = await fetch(`${API_BASE_URL}/customers/top?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de clientes principales');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene las ventas por hora para el día actual\r\n * @returns {Promise<Array>} Datos de ventas por hora\r\n */\nexport async function getSalesByHour() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByHourData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-hour`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por hora');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene las ventas por día para la semana actual\r\n * @returns {Promise<Array>} Datos de ventas por día\r\n */\nexport async function getSalesByDay() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByDayData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-day`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por día');\n    }\n    return await response.json();\n  }\n}\n\n/**\r\n * Obtiene las ventas por mes para el año actual\r\n * @returns {Promise<Array>} Datos de ventas por mes\r\n */\nexport async function getSalesByMonth() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByMonthData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-month`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por mes');\n    }\n    return await response.json();\n  }\n}\nexport async function getSalesByDateRange(startDate, endDate) {\n  // Simulación de datos\n  const data = [];\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const diffDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24));\n  let baseValue = 250000; // Valor base para las ventas\n\n  for (let i = 0; i <= diffDays; i++) {\n    const currentDate = new Date(start);\n    currentDate.setDate(start.getDate() + i);\n\n    // Generar variación basada en el día de la semana\n    const dayOfWeek = currentDate.getDay();\n    let dayVariation = 1;\n\n    // Menos ventas los fines de semana\n    if (dayOfWeek === 0) dayVariation = 0.7; // Domingo\n    if (dayOfWeek === 6) dayVariation = 0.8; // Sábado\n\n    // Más ventas a mitad de semana\n    if (dayOfWeek === 2 || dayOfWeek === 3) dayVariation = 1.2;\n\n    // Añadir variación aleatoria (-10% a +10%)\n    const randomVariation = 0.9 + Math.random() * 0.2;\n    const value = Math.floor(baseValue * dayVariation * randomVariation);\n    data.push({\n      date: currentDate.getTime(),\n      value: value\n    });\n\n    // Ajustar el valor base con una pequeña tendencia\n    baseValue = baseValue * (1 + (Math.random() * 0.02 - 0.01));\n  }\n  return data;\n}","map":{"version":3,"names":["apiService","mockApi","isDevelopment","process","env","NODE_ENV","cache","dashboardData","lastFetched","cacheTime","getDashboardData","Date","now","console","log","Promise","resolve","response","getDashboardOverview","get","data","error","refreshDashboardData","getSectionData","section","allData","dailySalesData","weeklySalesData","monthlySalesData","topProductsData","topCustomersData","salesByHourData","salesByDayData","salesByMonthData","API_BASE_URL","USE_MOCK_DATA","getDailySales","setTimeout","fetch","ok","Error","json","getWeeklySales","getMonthlySales","getTopProducts","limit","slice","getTopCustomers","getSalesByHour","getSalesByDay","getSalesByMonth","getSalesByDateRange","startDate","endDate","start","end","diffDays","Math","ceil","baseValue","i","currentDate","setDate","getDate","dayOfWeek","getDay","dayVariation","randomVariation","random","value","floor","push","date","getTime"],"sources":["C:/Users/Pc/Desktop/Proyectos/criwave/client/src/services/dashboardService.js"],"sourcesContent":["/**\r\n * Servicio para obtener datos del dashboard\r\n * \r\n * Este servicio actúa como una capa de abstracción entre los componentes\r\n * y la fuente de datos. Actualmente utiliza datos de ejemplo, pero está\r\n * diseñado para facilitar la transición a una API real en el futuro.\r\n */\r\n\r\nimport apiService from './apiService';\r\nimport mockApi from './mockApi';\r\n\r\n// Determinar si estamos en modo desarrollo\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\n\r\n// Estado para almacenar datos en caché\r\nconst cache = {\r\n  dashboardData: null,\r\n  lastFetched: null,\r\n  cacheTime: 5 * 60 * 1000 // 5 minutos (en milisegundos)\r\n};\r\n\r\n/**\r\n * Servicio para obtener y gestionar datos del dashboard\r\n */\r\nexport default {\r\n  /**\r\n   * Obtener todos los datos del dashboard en una sola llamada\r\n   * Implementa caché para evitar llamadas innecesarias\r\n   */\r\n  async getDashboardData() {\r\n    // Usar caché si los datos son recientes\r\n    if (cache.dashboardData && \r\n        cache.lastFetched && \r\n        (Date.now() - cache.lastFetched) < cache.cacheTime) {\r\n      console.log('Usando datos en caché del dashboard');\r\n      return Promise.resolve(cache.dashboardData);\r\n    }\r\n    \r\n    try {\r\n      let response;\r\n      \r\n      // Usar API mock en desarrollo\r\n      if (isDevelopment) {\r\n        console.log('Usando API mock para datos del dashboard');\r\n        response = await mockApi.getDashboardOverview();\r\n      } else {\r\n        // Usar API real en producción\r\n        response = await apiService.get('/dashboard/overview');\r\n      }\r\n      \r\n      // Guardar en caché\r\n      cache.dashboardData = response.data;\r\n      cache.lastFetched = Date.now();\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error cargando datos del dashboard:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Forzar recarga de datos (ignorar caché)\r\n   */\r\n  async refreshDashboardData() {\r\n    try {\r\n      let response;\r\n      \r\n      // Usar API mock en desarrollo\r\n      if (isDevelopment) {\r\n        response = await mockApi.getDashboardOverview();\r\n      } else {\r\n        // Usar API real en producción\r\n        response = await apiService.get('/dashboard/overview');\r\n      }\r\n      \r\n      // Actualizar caché\r\n      cache.dashboardData = response.data;\r\n      cache.lastFetched = Date.now();\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error actualizando datos del dashboard:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Obtener una sección específica de datos\r\n   * @param {string} section - Nombre de la sección (ej: 'ventas', 'usuarios')\r\n   */\r\n  async getSectionData(section) {\r\n    try {\r\n      // Intentar obtener del caché primero\r\n      const allData = await this.getDashboardData();\r\n      return allData[section] || null;\r\n    } catch (error) {\r\n      console.error(`Error obteniendo datos de la sección ${section}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Importar datos de ejemplo\r\nimport {\r\n  dailySalesData,\r\n  weeklySalesData,\r\n  monthlySalesData,\r\n  topProductsData,\r\n  topCustomersData,\r\n  salesByHourData,\r\n  salesByDayData,\r\n  salesByMonthData\r\n} from '../data/mockData';\r\n\r\n// Configuración del servicio\r\nconst API_BASE_URL = '/api'; // URL base para la API real (cuando se implemente)\r\nconst USE_MOCK_DATA = true; // Cambiar a false cuando se conecte a la API real\r\n\r\n/**\r\n * Obtiene las ventas del día actual\r\n * @returns {Promise<Object>} Datos de ventas diarias\r\n */\r\nexport async function getDailySales() {\r\n  if (USE_MOCK_DATA) {\r\n    // Simular un retraso de red para imitar una API real\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return dailySalesData;\r\n  } else {\r\n    // Código para obtener datos de la API real\r\n    const response = await fetch(`${API_BASE_URL}/sales/daily`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas diarias');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene las ventas de la semana actual\r\n * @returns {Promise<Object>} Datos de ventas semanales\r\n */\r\nexport async function getWeeklySales() {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return weeklySalesData;\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/sales/weekly`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas semanales');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene las ventas del mes actual\r\n * @returns {Promise<Object>} Datos de ventas mensuales\r\n */\r\nexport async function getMonthlySales() {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return monthlySalesData;\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/sales/monthly`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas mensuales');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los productos más vendidos\r\n * @param {number} limit - Número máximo de productos a obtener\r\n * @returns {Promise<Array>} Lista de productos más vendidos\r\n */\r\nexport async function getTopProducts(limit = 5) {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return topProductsData.slice(0, limit);\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/products/top?limit=${limit}`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de productos más vendidos');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los clientes principales\r\n * @param {number} limit - Número máximo de clientes a obtener\r\n * @returns {Promise<Array>} Lista de clientes principales\r\n */\r\nexport async function getTopCustomers(limit = 5) {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return topCustomersData.slice(0, limit);\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/customers/top?limit=${limit}`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de clientes principales');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene las ventas por hora para el día actual\r\n * @returns {Promise<Array>} Datos de ventas por hora\r\n */\r\nexport async function getSalesByHour() {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return salesByHourData;\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/sales/by-hour`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas por hora');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene las ventas por día para la semana actual\r\n * @returns {Promise<Array>} Datos de ventas por día\r\n */\r\nexport async function getSalesByDay() {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return salesByDayData;\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/sales/by-day`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas por día');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene las ventas por mes para el año actual\r\n * @returns {Promise<Array>} Datos de ventas por mes\r\n */\r\nexport async function getSalesByMonth() {\r\n  if (USE_MOCK_DATA) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return salesByMonthData;\r\n  } else {\r\n    const response = await fetch(`${API_BASE_URL}/sales/by-month`);\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener datos de ventas por mes');\r\n    }\r\n    return await response.json();\r\n  }\r\n}\r\n\r\nexport async function getSalesByDateRange(startDate, endDate) {\r\n  // Simulación de datos\r\n  const data = [];\r\n  const start = new Date(startDate);\r\n  const end = new Date(endDate);\r\n  const diffDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24));\r\n  \r\n  let baseValue = 250000; // Valor base para las ventas\r\n  \r\n  for (let i = 0; i <= diffDays; i++) {\r\n    const currentDate = new Date(start);\r\n    currentDate.setDate(start.getDate() + i);\r\n    \r\n    // Generar variación basada en el día de la semana\r\n    const dayOfWeek = currentDate.getDay();\r\n    let dayVariation = 1;\r\n    \r\n    // Menos ventas los fines de semana\r\n    if (dayOfWeek === 0) dayVariation = 0.7; // Domingo\r\n    if (dayOfWeek === 6) dayVariation = 0.8; // Sábado\r\n    \r\n    // Más ventas a mitad de semana\r\n    if (dayOfWeek === 2 || dayOfWeek === 3) dayVariation = 1.2;\r\n    \r\n    // Añadir variación aleatoria (-10% a +10%)\r\n    const randomVariation = 0.9 + Math.random() * 0.2;\r\n    \r\n    const value = Math.floor(baseValue * dayVariation * randomVariation);\r\n    \r\n    data.push({\r\n      date: currentDate.getTime(),\r\n      value: value\r\n    });\r\n    \r\n    // Ajustar el valor base con una pequeña tendencia\r\n    baseValue = baseValue * (1 + (Math.random() * 0.02 - 0.01));\r\n  }\r\n  \r\n  return data;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}