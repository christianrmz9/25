{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, mergeProps as _mergeProps, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"date-range-chart\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"date-controls\"\n};\nconst _hoisted_4 = {\n  class: \"date-picker-container\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_7 = {\n  key: 2,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_date_picker = _resolveComponent(\"v-date-picker\");\n  const _component_v_menu = _resolveComponent(\"v-menu\");\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[7] || (_cache[7] = _createElementVNode(\"h3\", null, \"Ventas por Rango de Fecha\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_v_menu, {\n    modelValue: _ctx.menu,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.menu = $event),\n    \"close-on-content-click\": false,\n    \"min-width\": \"auto\"\n  }, {\n    activator: _withCtx(({\n      props\n    }) => [_createVNode(_component_v_text_field, _mergeProps({\n      modelValue: _ctx.dateRangeText,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.dateRangeText = $event),\n      placeholder: 'Seleccionar rango de fechas',\n      readonly: \"\"\n    }, props, {\n      \"hide-details\": \"\",\n      class: \"date-input\",\n      variant: \"outlined\",\n      density: \"compact\",\n      \"prepend-inner-icon\": \"mdi-calendar\",\n      \"onClick:clear\": _cache[1] || (_cache[1] = $event => _ctx.dates = []),\n      clearable: \"\"\n    }), null, 16 /* FULL_PROPS */, [\"modelValue\"])]),\n    default: _withCtx(() => [_createVNode(_component_v_date_picker, {\n      modelValue: _ctx.dates,\n      \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.dates = $event),\n      range: \"\",\n      max: _ctx.today,\n      \"first-day-of-week\": 1\n    }, {\n      actions: _withCtx(() => [_createVNode(_component_v_btn, {\n        color: \"primary\",\n        variant: \"text\",\n        onClick: _cache[2] || (_cache[2] = $event => _ctx.menu = false)\n      }, {\n        default: _withCtx(() => _cache[5] || (_cache[5] = [_createTextVNode(\" Cancelar \")])),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_btn, {\n        color: \"primary\",\n        variant: \"text\",\n        onClick: _ctx.confirmDateRange\n      }, {\n        default: _withCtx(() => _cache[6] || (_cache[6] = [_createTextVNode(\" Aplicar \")])),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"])]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\", \"max\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])])])]), _ctx.hasDateRange ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _cache[8] || (_cache[8] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _ctx.hasData ? (_openBlock(), _createBlock(_component_apexchart, {\n    key: 1,\n    type: \"area\",\n    height: \"350\",\n    options: _ctx.chartOptions,\n    series: _ctx.series\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])) : !_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, \" Selecciona un rango de fechas para visualizar los datos \")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_v_menu","modelValue","_ctx","menu","_cache","$event","activator","_withCtx","props","_component_v_text_field","_mergeProps","dateRangeText","placeholder","readonly","variant","density","dates","clearable","default","_component_v_date_picker","range","max","today","actions","_component_v_btn","color","onClick","_createTextVNode","_","confirmDateRange","hasDateRange","_hoisted_5","isLoading","_hoisted_6","_createCommentVNode","hasData","_createBlock","_component_apexchart","type","height","options","chartOptions","series","_hoisted_7"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\DateRangeChart.vue"],"sourcesContent":["<template>\n  <div class=\"date-range-chart\">\n    <div class=\"chart-header\">\n      <h3>Ventas por Rango de Fecha</h3>\n      <div class=\"date-controls\">\n        <div class=\"date-picker-container\">\n          <v-menu\n            v-model=\"menu\"\n            :close-on-content-click=\"false\"\n            min-width=\"auto\"\n          >\n            <template v-slot:activator=\"{ props }\">\n              <v-text-field\n                v-model=\"dateRangeText\"\n                :placeholder=\"'Seleccionar rango de fechas'\"\n                readonly\n                v-bind=\"props\"\n                hide-details\n                class=\"date-input\"\n                variant=\"outlined\"\n                density=\"compact\"\n                prepend-inner-icon=\"mdi-calendar\"\n                @click:clear=\"dates = []\"\n                clearable\n              ></v-text-field>\n            </template>\n\n            <v-date-picker\n              v-model=\"dates\"\n              range\n              :max=\"today\"\n              :first-day-of-week=\"1\"\n            >\n              <template v-slot:actions>\n                <v-btn\n                  color=\"primary\"\n                  variant=\"text\"\n                  @click=\"menu = false\"\n                >\n                  Cancelar\n                </v-btn>\n                <v-btn\n                  color=\"primary\"\n                  variant=\"text\"\n                  @click=\"confirmDateRange\"\n                >\n                  Aplicar\n                </v-btn>\n              </template>\n            </v-date-picker>\n          </v-menu>\n        </div>\n      </div>\n    </div>\n      \n    <div class=\"chart-container\" v-if=\"hasDateRange\">\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\n        <div class=\"loading-spinner\"></div>\n      </div>\n      <apexchart\n        v-if=\"hasData\"\n        type=\"area\"\n        height=\"350\"\n        :options=\"chartOptions\"\n        :series=\"series\"\n      ></apexchart>\n      <div v-else-if=\"!isLoading\" class=\"no-data-message\">\n        Selecciona un rango de fechas para visualizar los datos\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue'\nimport VueApexCharts from 'vue3-apexcharts'\n\nexport default defineComponent({\n  name: 'DateRangeChart',\n  components: {\n    apexchart: VueApexCharts\n  },\n  \n  data() {\n    return {\n      dates: [],\n      menu: false,\n      today: new Date().toISOString().split('T')[0],\n      isLoading: false,\n      isDarkMode: false,\n      series: [{\n        name: 'Ventas',\n        data: []\n      }],\n      chartOptions: {\n        chart: {\n          type: 'area',\n          height: 350,\n          background: 'transparent',\n          foreColor: '#666',\n          toolbar: {\n            show: true,\n            tools: {\n              download: true,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              reset: true\n            }\n          },\n          animations: {\n            enabled: true,\n            easing: 'easeinout',\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 150\n            },\n            dynamicAnimation: {\n              enabled: true,\n              speed: 350\n            }\n          }\n        },\n        colors: ['#2E93fA'],\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.45,\n            opacityTo: 0.05,\n            stops: [0, 95, 100]\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 2\n        },\n        grid: {\n          show: true,\n          borderColor: '#f1f1f1',\n          strokeDashArray: 3,\n          position: 'back'\n        },\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: '#666',\n              fontSize: '12px'\n            }\n          },\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Ventas ($)',\n            style: {\n              fontSize: '14px',\n              color: '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: '#666'\n            },\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        },\n        tooltip: {\n          shared: true,\n          intersect: false,\n          y: {\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        }\n      }\n    }\n  },\n\n  computed: {\n    dateRangeText() {\n      if (!this.dates || this.dates.length !== 2) return ''\n      const [start, end] = this.dates\n      return `${this.formatDate(start)} - ${this.formatDate(end)}`\n    },\n    \n    hasDateRange() {\n      return this.dates && this.dates.length === 2\n    },\n\n    startDate() {\n      return this.dates[0] || ''\n    },\n\n    endDate() {\n      return this.dates[1] || ''\n    },\n\n    hasData() {\n      return this.series[0].data.length > 0\n    }\n  },\n\n  created() {\n    this.checkDarkMode()\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', this.checkDarkMode)\n  },\n  \n  beforeUnmount() {\n    window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', this.checkDarkMode)\n  },\n  \n  methods: {\n    checkDarkMode() {\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme')\n      this.updateChartTheme()\n    },\n\n    updateChartTheme() {\n      const style = getComputedStyle(document.documentElement)\n      const bgSecondary = style.getPropertyValue('--bg-secondary').trim()\n      const textSecondary = style.getPropertyValue('--text-secondary').trim()\n      const borderColor = style.getPropertyValue('--border-color').trim()\n      \n      this.chartOptions = {\n        ...this.chartOptions,\n        chart: {\n          ...this.chartOptions.chart,\n          background: bgSecondary,\n          foreColor: textSecondary\n        },\n        grid: {\n          ...this.chartOptions.grid,\n          borderColor: borderColor\n        },\n        xaxis: {\n          ...this.chartOptions.xaxis,\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          }\n        },\n        yaxis: {\n          ...this.chartOptions.yaxis,\n          title: {\n            style: {\n              color: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#e0e0e0' : '#666'\n            }\n          }\n        },\n        tooltip: {\n          theme: this.isDarkMode ? 'dark' : 'light'\n        }\n      }\n    },\n\n    async loadData() {\n      if (!this.hasDateRange) return\n\n      this.isLoading = true\n      // Resetear los datos actuales\n      this.series[0].data = []\n      \n      try {\n        const start = new Date(this.startDate)\n        const end = new Date(this.endDate)\n        const diffDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24))\n        \n        const data = []\n        let currentValue = Math.floor(Math.random() * 500000) + 100000\n        \n        for (let i = 0; i <= diffDays; i++) {\n          const date = new Date(start)\n          date.setDate(start.getDate() + i)\n          \n          const variation = (Math.random() * 0.2) - 0.1\n          currentValue = Math.floor(currentValue * (1 + variation))\n          currentValue = Math.max(currentValue, 100000)\n          \n          data.push([\n            date.getTime(),\n            currentValue\n          ])\n        }\n        \n        // Actualizar los datos con un pequeño retraso para asegurar la re-renderización\n        setTimeout(() => {\n          this.series = [{\n            name: 'Ventas',\n            data: data\n          }]\n          this.isLoading = false\n        }, 300)\n        \n      } catch (error) {\n        console.error('Error loading data:', error)\n        this.isLoading = false\n      }\n    },\n\n    formatDate(dateStr) {\n      if (!dateStr) return ''\n      const [year, month, day] = dateStr.split('-')\n      return `${day}/${month}/${year}`\n    },\n\n    confirmDateRange() {\n      this.menu = false\n      if (this.hasDateRange) {\n        this.loadData()\n      }\n    },\n\n    onDateChange() {\n      if (this.dates.length === 2) {\n        const [start, end] = this.dates\n        if (start > end) {\n          this.dates = [end, start]\n        }\n      }\n    }\n  }\n})\n</script>\n\n<style scoped>\n.date-range-chart {\n  background: var(--bg-secondary);\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.chart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.date-controls {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.date-picker-container {\n  position: relative;\n  min-width: 260px;\n}\n\n.date-input {\n  width: 100%;\n}\n\n:deep(.v-field__input) {\n  min-height: 40px !important;\n  padding-top: 0 !important;\n  padding-bottom: 0 !important;\n}\n\n:deep(.v-field__outline) {\n  --v-field-border-width: 1px !important;\n}\n\n:deep(.v-field--variant-outlined.v-field--focused .v-field__outline) {\n  --v-field-border-width: 2px !important;\n}\n\n.chart-container {\n  position: relative;\n  min-height: 350px;\n  background: var(--bg-primary);\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: var(--bg-overlay);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 10;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid var(--spinner-track);\n  border-top-color: var(--spinner-color);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n.no-data-message {\n  height: 350px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (max-width: 768px) {\n  .chart-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 15px;\n  }\n\n  .date-controls {\n    flex-direction: column;\n    width: 100%;\n  }\n\n  .date-picker-container {\n    width: 100%;\n    flex-direction: column;\n  }\n\n  .date-input {\n    width: 100%;\n  }\n\n  .update-button {\n    width: 100%;\n    margin-top: 10px;\n  }\n}\n\n:deep(.apexcharts-canvas) {\n  background: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-tooltip) {\n  background: var(--bg-secondary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-tooltip-title) {\n  background: var(--bg-tertiary) !important;\n  border-bottom: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-xaxistooltip) {\n  background: var(--bg-secondary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n\n.update-button {\n  padding: 8px 16px;\n  background: var(--primary);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 100px;\n}\n\n.update-button:hover:not(:disabled) {\n  background: var(--primary-dark);\n  transform: translateY(-1px);\n}\n\n.update-button:disabled {\n  background: var(--disabled);\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.button-text {\n  font-weight: 500;\n}\n\n:deep(.v-text-field__details) {\n  display: none;\n}\n\n:deep(.v-text-field.v-text-field--enclosed .v-text-field__details) {\n  margin-bottom: 0;\n}\n\n:deep(.v-input__slot) {\n  margin-bottom: 0 !important;\n  min-height: 40px !important;\n}\n\n:deep(.v-text-field.v-text-field--enclosed:not(.v-text-field--rounded) > .v-input__control > .v-input__slot) {\n  padding: 0 12px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}