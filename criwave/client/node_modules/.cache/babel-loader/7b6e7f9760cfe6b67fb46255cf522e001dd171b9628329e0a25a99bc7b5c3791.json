{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeStyle as _normalizeStyle, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"sales-chart-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"chart-data\"\n};\nconst _hoisted_3 = {\n  class: \"chart-summary\"\n};\nconst _hoisted_4 = {\n  class: \"chart-total\"\n};\nconst _hoisted_5 = {\n  class: \"chart-average\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"chart-comparison\"\n};\nconst _hoisted_7 = {\n  class: \"comparison-toggle\"\n};\nconst _hoisted_8 = {\n  class: \"chart-bars\"\n};\nconst _hoisted_9 = {\n  class: \"chart-bar-label\"\n};\nconst _hoisted_10 = {\n  class: \"chart-bar-value\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"chart-previous-year\"\n};\nconst _hoisted_12 = [\"viewBox\"];\nconst _hoisted_13 = [\"points\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_chart_card = _resolveComponent(\"chart-card\");\n  return _openBlock(), _createBlock(_component_chart_card, {\n    title: $props.title,\n    \"data-type\": $props.dataType,\n    \"load-on-visible\": $props.loadOnVisible,\n    \"auto-refresh\": $props.autoRefresh,\n    \"refresh-interval\": $props.refreshInterval\n  }, {\n    default: _withCtx(({\n      data\n    }) => [_createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Para simplicidad, solo mostramos los datos en texto \"), _createCommentVNode(\" En un caso real, aquí usarías un componente de gráfico como Chart.js, Echarts, etc. \"), data && data.labels && data.values ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createTextVNode(_toDisplayString($options.formatCurrency($options.getTotalSales(data.values))) + \" \", 1 /* TEXT */), _cache[1] || (_cache[1] = _createElementVNode(\"span\", {\n      class: \"chart-label\"\n    }, \"Total\", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_5, [_createTextVNode(_toDisplayString($options.formatCurrency($options.getAverageSales(data.values))) + \" \", 1 /* TEXT */), _cache[2] || (_cache[2] = _createElementVNode(\"span\", {\n      class: \"chart-label\"\n    }, \"Promedio\", -1 /* HOISTED */))]), _createCommentVNode(\" Opción para comparar con año anterior \"), $props.showComparison ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"label\", _hoisted_7, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.compareWithPreviousYear = $event)\n    }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.compareWithPreviousYear]]), _cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n      class: \"toggle-label\"\n    }, \"Comparar con año anterior\", -1 /* HOISTED */))])])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(data.values, (value, index) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: index,\n        class: \"chart-bar-item\"\n      }, [_createElementVNode(\"div\", {\n        class: \"chart-bar\",\n        style: _normalizeStyle({\n          height: $options.calculateBarHeight(value, data.values)\n        })\n      }, null, 4 /* STYLE */), _createElementVNode(\"div\", _hoisted_9, _toDisplayString(data.labels[index]), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_10, _toDisplayString($options.formatCurrency(value)), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Línea para el año anterior (morada) \"), $data.compareWithPreviousYear && data.previousYearValues ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [(_openBlock(), _createElementBlock(\"svg\", {\n      class: \"previous-year-line\",\n      viewBox: `0 0 ${data.values.length * 100} 100`,\n      preserveAspectRatio: \"none\"\n    }, [_createElementVNode(\"polyline\", {\n      points: $options.generatePreviousYearPoints(data.previousYearValues, data.values),\n      fill: \"none\",\n      stroke: \"var(--previous-year-color, #9333ea)\",\n      \"stroke-width\": \"2\",\n      \"stroke-dasharray\": \"5,5\"\n    }, null, 8 /* PROPS */, _hoisted_13)], 8 /* PROPS */, _hoisted_12)), _cache[4] || (_cache[4] = _createElementVNode(\"div\", {\n      class: \"previous-year-legend\"\n    }, [_createElementVNode(\"span\", {\n      class: \"legend-color\",\n      style: {\n        \"background-color\": \"var(--previous-year-color, #9333ea)\"\n      }\n    }), _createElementVNode(\"span\", {\n      class: \"legend-label\"\n    }, \"Año anterior\")], -1 /* HOISTED */))])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"title\", \"data-type\", \"load-on-visible\", \"auto-refresh\", \"refresh-interval\"]);\n}","map":{"version":3,"names":["class","key","_createBlock","_component_chart_card","title","$props","dataType","loadOnVisible","autoRefresh","refreshInterval","default","_withCtx","data","_createElementVNode","_hoisted_1","_createCommentVNode","labels","values","_createElementBlock","_hoisted_2","_hoisted_3","_hoisted_4","_createTextVNode","_toDisplayString","$options","formatCurrency","getTotalSales","_hoisted_5","getAverageSales","showComparison","_hoisted_6","_hoisted_7","type","_cache","$event","$data","compareWithPreviousYear","_hoisted_8","_Fragment","_renderList","value","index","style","_normalizeStyle","height","calculateBarHeight","_hoisted_9","_hoisted_10","previousYearValues","_hoisted_11","viewBox","length","preserveAspectRatio","points","generatePreviousYearPoints","fill","stroke","_hoisted_13","_hoisted_12","_"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\SalesChart.vue"],"sourcesContent":["<template>\r\n  <chart-card\r\n    :title=\"title\"\r\n    :data-type=\"dataType\"\r\n    :load-on-visible=\"loadOnVisible\"\r\n    :auto-refresh=\"autoRefresh\"\r\n    :refresh-interval=\"refreshInterval\"\r\n  >\r\n    <template v-slot:default=\"{ data }\">\r\n      <div class=\"sales-chart-container\">\r\n        <!-- Para simplicidad, solo mostramos los datos en texto -->\r\n        <!-- En un caso real, aquí usarías un componente de gráfico como Chart.js, Echarts, etc. -->\r\n        <div v-if=\"data && data.labels && data.values\" class=\"chart-data\">\r\n          <div class=\"chart-summary\">\r\n            <div class=\"chart-total\">\r\n              {{ formatCurrency(getTotalSales(data.values)) }}\r\n              <span class=\"chart-label\">Total</span>\r\n            </div>\r\n            <div class=\"chart-average\">\r\n              {{ formatCurrency(getAverageSales(data.values)) }}\r\n              <span class=\"chart-label\">Promedio</span>\r\n            </div>\r\n            \r\n            <!-- Opción para comparar con año anterior -->\r\n            <div class=\"chart-comparison\" v-if=\"showComparison\">\r\n              <label class=\"comparison-toggle\">\r\n                <input type=\"checkbox\" v-model=\"compareWithPreviousYear\">\r\n                <span class=\"toggle-label\">Comparar con año anterior</span>\r\n              </label>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"chart-bars\">\r\n            <div \r\n              v-for=\"(value, index) in data.values\" \r\n              :key=\"index\"\r\n              class=\"chart-bar-item\"\r\n            >\r\n              <div \r\n                class=\"chart-bar\" \r\n                :style=\"{ height: calculateBarHeight(value, data.values) }\"\r\n              ></div>\r\n              <div class=\"chart-bar-label\">{{ data.labels[index] }}</div>\r\n              <div class=\"chart-bar-value\">{{ formatCurrency(value) }}</div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Línea para el año anterior (morada) -->\r\n          <div v-if=\"compareWithPreviousYear && data.previousYearValues\" class=\"chart-previous-year\">\r\n            <svg class=\"previous-year-line\" :viewBox=\"`0 0 ${data.values.length * 100} 100`\" preserveAspectRatio=\"none\">\r\n              <polyline \r\n                :points=\"generatePreviousYearPoints(data.previousYearValues, data.values)\" \r\n                fill=\"none\" \r\n                stroke=\"var(--previous-year-color, #9333ea)\" \r\n                stroke-width=\"2\" \r\n                stroke-dasharray=\"5,5\"\r\n              />\r\n            </svg>\r\n            <div class=\"previous-year-legend\">\r\n              <span class=\"legend-color\" style=\"background-color: var(--previous-year-color, #9333ea);\"></span>\r\n              <span class=\"legend-label\">Año anterior</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </chart-card>\r\n</template>\r\n\r\n<script>\r\nimport ChartCard from './ChartCard.vue';\r\n\r\nexport default {\r\n  name: 'SalesChart',\r\n  \r\n  components: {\r\n    ChartCard\r\n  },\r\n  \r\n  props: {\r\n    /**\r\n     * Título del gráfico\r\n     */\r\n    title: {\r\n      type: String,\r\n      default: 'Ventas'\r\n    },\r\n    \r\n    /**\r\n     * Tipo de datos (ventasDiarias, ventasSemanales, ventasMensuales)\r\n     */\r\n    dataType: {\r\n      type: String,\r\n      default: 'ventasDiarias',\r\n      validator: value => ['ventasDiarias', 'ventasSemanales', 'ventasMensuales'].includes(value)\r\n    },\r\n    \r\n    /**\r\n     * Si se debe cargar solo cuando sea visible\r\n     */\r\n    loadOnVisible: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    \r\n    /**\r\n     * Si se debe actualizar automáticamente\r\n     */\r\n    autoRefresh: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    \r\n    /**\r\n     * Intervalo de actualización en ms\r\n     */\r\n    refreshInterval: {\r\n      type: Number,\r\n      default: 60000 // 1 minuto\r\n    },\r\n    \r\n    /**\r\n     * Si se debe mostrar la opción de comparar con año anterior\r\n     */\r\n    showComparison: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      compareWithPreviousYear: true\r\n    };\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Formatear valor como moneda\r\n     */\r\n    formatCurrency(value) {\r\n      return new Intl.NumberFormat('es-MX', {\r\n        style: 'currency',\r\n        currency: 'MXN',\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0\r\n      }).format(value);\r\n    },\r\n    \r\n    /**\r\n     * Calcular altura de la barra en porcentaje\r\n     */\r\n    calculateBarHeight(value, allValues) {\r\n      if (!allValues || !allValues.length) return '0%';\r\n      \r\n      const maxValue = Math.max(...allValues);\r\n      if (maxValue === 0) return '0%';\r\n      \r\n      const percentage = (value / maxValue) * 100;\r\n      return `${percentage}%`;\r\n    },\r\n    \r\n    /**\r\n     * Obtener suma total de ventas\r\n     */\r\n    getTotalSales(values) {\r\n      if (!values || !values.length) return 0;\r\n      return values.reduce((sum, value) => sum + value, 0);\r\n    },\r\n    \r\n    /**\r\n     * Obtener promedio de ventas\r\n     */\r\n    getAverageSales(values) {\r\n      if (!values || !values.length) return 0;\r\n      return this.getTotalSales(values) / values.length;\r\n    },\r\n    \r\n    /**\r\n     * Generar puntos para la línea del año anterior\r\n     */\r\n    generatePreviousYearPoints(previousValues, currentValues) {\r\n      if (!previousValues || !previousValues.length || !currentValues || !currentValues.length) {\r\n        return '';\r\n      }\r\n      \r\n      const maxCurrentValue = Math.max(...currentValues);\r\n      const points = [];\r\n      \r\n      for (let i = 0; i < previousValues.length; i++) {\r\n        const x = i * 100 + 50; // Centrar en cada barra\r\n        const y = 100 - ((previousValues[i] / maxCurrentValue) * 100); // Invertir el eje Y\r\n        points.push(`${x},${y}`);\r\n      }\r\n      \r\n      return points.join(' ');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.sales-chart-container {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n}\r\n\r\n.chart-data {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chart-summary {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 0 20px;\r\n  border-bottom: 1px solid var(--border, #eee);\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.chart-total, .chart-average {\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 1.4rem;\r\n  font-weight: 700;\r\n  color: var(--text-primary);\r\n}\r\n\r\n.chart-label {\r\n  font-size: 0.8rem;\r\n  font-weight: 400;\r\n  color: var(--text-secondary);\r\n  margin-top: 2px;\r\n}\r\n\r\n.chart-comparison {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.comparison-toggle {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.comparison-toggle input {\r\n  margin-right: 8px;\r\n}\r\n\r\n.toggle-label {\r\n  font-size: 0.85rem;\r\n  color: var(--text-secondary);\r\n}\r\n\r\n.chart-bars {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n  height: 200px;\r\n  margin-top: auto;\r\n  position: relative;\r\n}\r\n\r\n.chart-bar-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n  position: relative;\r\n  z-index: 2;\r\n}\r\n\r\n.chart-bar {\r\n  width: 36px;\r\n  min-height: 4px;\r\n  background-color: var(--primary, #4f46e5);\r\n  border-radius: 4px 4px 0 0;\r\n  transition: height 0.3s ease;\r\n}\r\n\r\n.chart-bar-label {\r\n  margin-top: 8px;\r\n  font-size: 0.75rem;\r\n  color: var(--text-secondary);\r\n  white-space: nowrap;\r\n}\r\n\r\n.chart-bar-value {\r\n  margin-top: 4px;\r\n  font-size: 0.7rem;\r\n  font-weight: 600;\r\n  color: var(--text-primary);\r\n}\r\n\r\n/* Estilos para la línea del año anterior */\r\n.chart-previous-year {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1;\r\n  pointer-events: none;\r\n}\r\n\r\n.previous-year-line {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: calc(100% - 80px); /* Ajustar para no cubrir las etiquetas */\r\n  margin-top: 20px; /* Espacio para el encabezado del gráfico */\r\n}\r\n\r\n.previous-year-legend {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.75rem;\r\n  color: var(--text-secondary);\r\n  padding: 4px 8px;\r\n  background-color: var(--bg-secondary, #f5f5f5);\r\n  border-radius: 4px;\r\n}\r\n\r\n.legend-color {\r\n  display: inline-block;\r\n  width: 12px;\r\n  height: 2px;\r\n  margin-right: 6px;\r\n  background-color: var(--previous-year-color, #9333ea);\r\n}\r\n\r\n.legend-label {\r\n  font-size: 0.7rem;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chart-bar {\r\n    width: 24px;\r\n  }\r\n  \r\n  .chart-bar-value {\r\n    font-size: 0.65rem;\r\n  }\r\n  \r\n  .chart-summary {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n  \r\n  .chart-total, .chart-average {\r\n    margin-bottom: 8px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}