{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-container\"\n};\nconst _hoisted_2 = {\n  class: \"chart-content\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n    class: \"chart-header\"\n  }, [_createElementVNode(\"h3\", null, \"Ingresos\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[0] || (_cache[0] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createVNode(_component_apexchart, {\n    type: \"area\",\n    height: \"350\",\n    options: $data.chartOptions,\n    series: $data.series\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$data","isLoading","_hoisted_3","_cache","_createCommentVNode","_createVNode","_component_apexchart","type","height","options","chartOptions","series"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\n  <div class=\"chart-container\">\n    <div class=\"chart-header\">\n      <h3>Ingresos</h3>\n    </div>\n    <div class=\"chart-content\">\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\n        <div class=\"loading-spinner\"></div>\n      </div>\n      <apexchart\n        type=\"area\"\n        height=\"350\"\n        :options=\"chartOptions\"\n        :series=\"series\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'RevenueChart',\n  data() {\n    return {\n      isLoading: false,\n      isDarkMode: false,\n      series: [{\n        name: 'Ingresos',\n        data: []\n      }],\n      chartOptions: {\n        chart: {\n          type: 'area',\n          height: 350,\n          toolbar: {\n            show: false\n          },\n          background: 'transparent',\n          foreColor: '#666'\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 2\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: '#666',\n              fontSize: '12px'\n            }\n          },\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          crosshairs: {\n            show: true,\n            stroke: {\n              color: '#666',\n              width: 1,\n              dashArray: 3\n            }\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Ingresos ($)',\n            style: {\n              fontSize: '14px',\n              color: '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: '#666'\n            },\n            formatter: function(value) {\n              return value >= 1000000 \n                ? `$${(value/1000000).toFixed(1)}M` \n                : value >= 1000 \n                  ? `$${(value/1000).toFixed(1)}K` \n                  : `$${value}`\n            }\n          }\n        },\n        grid: {\n          borderColor: '#f1f1f1',\n          strokeDashArray: 4,\n          xaxis: {\n            lines: {\n              show: true\n            }\n          },\n          yaxis: {\n            lines: {\n              show: true\n            }\n          }\n        },\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeColors: '#fff',\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        tooltip: {\n          shared: true,\n          intersect: false,\n          y: {\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        },\n        theme: {\n          mode: 'light'\n        }\n      }\n    }\n  },\n  mounted() {\n    this.checkDarkMode()\n    this.loadData()\n    window.addEventListener('resize', this.handleResize)\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', this.checkDarkMode)\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize)\n    window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', this.checkDarkMode)\n  },\n  methods: {\n    checkDarkMode() {\n      this.isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches\n      this.updateChartTheme()\n    },\n    handleResize() {\n      if (this.$refs.chart) {\n        this.$refs.chart.updateOptions({\n          chart: {\n            height: this.$refs.chart.$el.clientHeight\n          }\n        })\n      }\n    },\n    async loadData() {\n      this.isLoading = true\n      try {\n        // Generar datos para el último mes\n        const data = []\n        const today = new Date()\n        const thirtyDaysAgo = new Date(today)\n        thirtyDaysAgo.setDate(today.getDate() - 30)\n        \n        let currentValue = Math.floor(Math.random() * 500000) + 100000 // Valor inicial\n        \n        for (let i = 0; i <= 30; i++) {\n          const date = new Date(thirtyDaysAgo)\n          date.setDate(thirtyDaysAgo.getDate() + i)\n          \n          // Generar variación aleatoria entre -10% y +10%\n          const variation = (Math.random() * 0.2) - 0.1\n          currentValue = Math.floor(currentValue * (1 + variation))\n          \n          // Asegurar que el valor no sea negativo\n          currentValue = Math.max(currentValue, 100000)\n          \n          data.push([\n            date.getTime(),\n            currentValue\n          ])\n        }\n        \n        // Actualizar las series con los datos\n        this.series = [{\n          name: 'Ingresos',\n          data: data\n        }]\n      } catch (error) {\n        console.error('Error loading revenue data:', error)\n      } finally {\n        this.isLoading = false\n      }\n    },\n    updateChartTheme() {\n      const style = getComputedStyle(document.documentElement)\n      const bgSecondary = style.getPropertyValue('--bg-secondary').trim()\n      const textPrimary = style.getPropertyValue('--text-primary').trim()\n      const textSecondary = style.getPropertyValue('--text-secondary').trim()\n      const borderColor = style.getPropertyValue('--border-color').trim()\n      \n      this.chartOptions = {\n        ...this.chartOptions,\n        chart: {\n          ...this.chartOptions.chart,\n          background: bgSecondary,\n          foreColor: textSecondary\n        },\n        grid: {\n          ...this.chartOptions.grid,\n          borderColor: borderColor\n        },\n        colors: ['#2E93fA'],\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeColors: bgSecondary,\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          ...this.chartOptions.xaxis,\n          labels: {\n            style: {\n              colors: textSecondary,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: true,\n            stroke: {\n              color: borderColor,\n              width: 1,\n              dashArray: 3\n            }\n          }\n        },\n        yaxis: {\n          ...this.chartOptions.yaxis,\n          title: {\n            text: 'Ingresos ($)',\n            style: {\n              fontSize: '14px',\n              color: textSecondary\n            }\n          },\n          labels: {\n            style: {\n              colors: textSecondary\n            }\n          }\n        },\n        tooltip: {\n          theme: this.isDarkMode ? 'dark' : 'light',\n          shared: true,\n          intersect: false,\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chart-container {\n  background: var(--bg-secondary);\n  border-radius: 12px;\n  padding: 1.5rem;\n  height: 100%;\n  position: relative;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.chart-header {\n  margin-bottom: 1.5rem;\n}\n\n.chart-header h3 {\n  margin: 0;\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.chart-content {\n  position: relative;\n  height: calc(100% - 3rem);\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(255, 255, 255, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid var(--primary-color);\n  border-top-color: transparent;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n:deep(.apexcharts-canvas) {\n  background: transparent !important;\n}\n\n:deep(.apexcharts-gridline) {\n  stroke: var(--border-color) !important;\n}\n\n:deep(.apexcharts-tooltip) {\n  background: var(--bg-secondary) !important;\n  color: var(--text-primary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-tooltip-title) {\n  background: var(--bg-primary) !important;\n  color: var(--text-primary) !important;\n  border-bottom: 1px solid var(--border-color) !important;\n}\n\n@media (max-width: 768px) {\n  .chart-container {\n    padding: 1rem;\n  }\n  \n  .chart-header h3 {\n    font-size: 1.1rem;\n  }\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAIrBA,KAAK,EAAC;AAAe;;EAL9BC,GAAA;EAM4BD,KAAK,EAAC;;;;uBALhCE,mBAAA,CAeM,OAfNC,UAeM,G,0BAdJC,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAc,IACvBI,mBAAA,CAAiB,YAAb,UAAQ,E,sBAEdA,mBAAA,CAUM,OAVNC,UAUM,GATOC,KAAA,CAAAC,SAAS,I,cAApBL,mBAAA,CAEM,OAFNM,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJL,mBAAA,CAAmC;IAA9BJ,KAAK,EAAC;EAAiB,2B,MAPpCU,mBAAA,gBASMC,YAAA,CAKEC,oBAAA;IAJAC,IAAI,EAAC,MAAM;IACXC,MAAM,EAAC,KAAK;IACXC,OAAO,EAAET,KAAA,CAAAU,YAAY;IACrBC,MAAM,EAAEX,KAAA,CAAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}