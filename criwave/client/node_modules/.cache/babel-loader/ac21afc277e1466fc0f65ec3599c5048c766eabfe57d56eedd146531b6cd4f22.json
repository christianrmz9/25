{"ast":null,"code":"/**\r\n * Store para gestionar el tema de la aplicación\r\n * \r\n * Maneja el cambio entre temas claro y oscuro, y persiste\r\n * la preferencia del usuario en localStorage.\r\n */\n\n// Intentar cargar el tema guardado\nlet currentTheme = 'light';\ntry {\n  const savedTheme = localStorage.getItem('theme-preference');\n  if (savedTheme) {\n    currentTheme = savedTheme;\n  }\n} catch (error) {\n  console.error('Error al acceder a localStorage:', error);\n}\n\n// Formato de módulo Vuex\nconst themeModule = {\n  namespaced: true,\n  state: () => ({\n    current: currentTheme\n  }),\n  getters: {\n    /**\r\n     * Verifica si el tema actual es oscuro\r\n     * @returns {boolean} - true si el tema es oscuro\r\n     */\n    isDark: state => state.current === 'dark',\n    /**\r\n     * Verifica si el tema actual es claro\r\n     * @returns {boolean} - true si el tema es claro\r\n     */\n    isLight: state => state.current === 'light'\n  },\n  mutations: {\n    /**\r\n     * Actualiza el tema actual\r\n     * @param {Object} state - Estado del módulo\r\n     * @param {string} theme - Nuevo tema ('light' o 'dark')\r\n     */\n    SET_THEME(state, theme) {\n      state.current = theme;\n    }\n  },\n  actions: {\n    /**\r\n     * Alterna entre temas claro y oscuro\r\n     */\n    toggleTheme({\n      state,\n      commit\n    }) {\n      // Cambiar al tema opuesto\n      const newTheme = state.current === 'light' ? 'dark' : 'light';\n      commit('SET_THEME', newTheme);\n\n      // Guardar en localStorage\n      try {\n        localStorage.setItem('theme-preference', newTheme);\n      } catch (error) {\n        console.error('Error al guardar en localStorage:', error);\n      }\n\n      // Aplicar al elemento HTML\n      document.documentElement.setAttribute('data-theme', newTheme);\n    },\n    /**\r\n     * Establece un tema específico\r\n     * @param {Object} context - Contexto de la acción\r\n     * @param {string} theme - El tema a establecer ('light' o 'dark')\r\n     */\n    setTheme({\n      commit\n    }, theme) {\n      if (theme !== 'light' && theme !== 'dark') return;\n      commit('SET_THEME', theme);\n      try {\n        localStorage.setItem('theme-preference', theme);\n      } catch (error) {\n        console.error('Error al guardar en localStorage:', error);\n      }\n      document.documentElement.setAttribute('data-theme', theme);\n    },\n    /**\r\n     * Inicializa el tema al cargar la aplicación\r\n     */\n    initTheme({\n      state\n    }) {\n      // Aplicar el tema guardado\n      document.documentElement.setAttribute('data-theme', state.current);\n    }\n  }\n};\nexport default themeModule;","map":{"version":3,"names":["currentTheme","savedTheme","localStorage","getItem","error","console","themeModule","namespaced","state","current","getters","isDark","isLight","mutations","SET_THEME","theme","actions","toggleTheme","commit","newTheme","setItem","document","documentElement","setAttribute","setTheme","initTheme"],"sources":["C:/Users/Pc/Desktop/Proyectos/criwave/client/src/store/theme.js"],"sourcesContent":["/**\r\n * Store para gestionar el tema de la aplicación\r\n * \r\n * Maneja el cambio entre temas claro y oscuro, y persiste\r\n * la preferencia del usuario en localStorage.\r\n */\r\n\r\n// Intentar cargar el tema guardado\r\nlet currentTheme = 'light';\r\ntry {\r\n  const savedTheme = localStorage.getItem('theme-preference');\r\n  if (savedTheme) {\r\n    currentTheme = savedTheme;\r\n  }\r\n} catch (error) {\r\n  console.error('Error al acceder a localStorage:', error);\r\n}\r\n\r\n// Formato de módulo Vuex\r\nconst themeModule = {\r\n  namespaced: true,\r\n  \r\n  state: () => ({\r\n    current: currentTheme\r\n  }),\r\n  \r\n  getters: {\r\n    /**\r\n     * Verifica si el tema actual es oscuro\r\n     * @returns {boolean} - true si el tema es oscuro\r\n     */\r\n    isDark: state => state.current === 'dark',\r\n    \r\n    /**\r\n     * Verifica si el tema actual es claro\r\n     * @returns {boolean} - true si el tema es claro\r\n     */\r\n    isLight: state => state.current === 'light'\r\n  },\r\n  \r\n  mutations: {\r\n    /**\r\n     * Actualiza el tema actual\r\n     * @param {Object} state - Estado del módulo\r\n     * @param {string} theme - Nuevo tema ('light' o 'dark')\r\n     */\r\n    SET_THEME(state, theme) {\r\n      state.current = theme;\r\n    }\r\n  },\r\n  \r\n  actions: {\r\n    /**\r\n     * Alterna entre temas claro y oscuro\r\n     */\r\n    toggleTheme({ state, commit }) {\r\n      // Cambiar al tema opuesto\r\n      const newTheme = state.current === 'light' ? 'dark' : 'light';\r\n      commit('SET_THEME', newTheme);\r\n      \r\n      // Guardar en localStorage\r\n      try {\r\n        localStorage.setItem('theme-preference', newTheme);\r\n      } catch (error) {\r\n        console.error('Error al guardar en localStorage:', error);\r\n      }\r\n      \r\n      // Aplicar al elemento HTML\r\n      document.documentElement.setAttribute('data-theme', newTheme);\r\n    },\r\n    \r\n    /**\r\n     * Establece un tema específico\r\n     * @param {Object} context - Contexto de la acción\r\n     * @param {string} theme - El tema a establecer ('light' o 'dark')\r\n     */\r\n    setTheme({ commit }, theme) {\r\n      if (theme !== 'light' && theme !== 'dark') return;\r\n      \r\n      commit('SET_THEME', theme);\r\n      \r\n      try {\r\n        localStorage.setItem('theme-preference', theme);\r\n      } catch (error) {\r\n        console.error('Error al guardar en localStorage:', error);\r\n      }\r\n      \r\n      document.documentElement.setAttribute('data-theme', theme);\r\n    },\r\n    \r\n    /**\r\n     * Inicializa el tema al cargar la aplicación\r\n     */\r\n    initTheme({ state }) {\r\n      // Aplicar el tema guardado\r\n      document.documentElement.setAttribute('data-theme', state.current);\r\n    }\r\n  }\r\n};\r\n\r\nexport default themeModule; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIA,YAAY,GAAG,OAAO;AAC1B,IAAI;EACF,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;EAC3D,IAAIF,UAAU,EAAE;IACdD,YAAY,GAAGC,UAAU;EAC3B;AACF,CAAC,CAAC,OAAOG,KAAK,EAAE;EACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;AAC1D;;AAEA;AACA,MAAME,WAAW,GAAG;EAClBC,UAAU,EAAE,IAAI;EAEhBC,KAAK,EAAEA,CAAA,MAAO;IACZC,OAAO,EAAET;EACX,CAAC,CAAC;EAEFU,OAAO,EAAE;IACP;AACJ;AACA;AACA;IACIC,MAAM,EAAEH,KAAK,IAAIA,KAAK,CAACC,OAAO,KAAK,MAAM;IAEzC;AACJ;AACA;AACA;IACIG,OAAO,EAAEJ,KAAK,IAAIA,KAAK,CAACC,OAAO,KAAK;EACtC,CAAC;EAEDI,SAAS,EAAE;IACT;AACJ;AACA;AACA;AACA;IACIC,SAASA,CAACN,KAAK,EAAEO,KAAK,EAAE;MACtBP,KAAK,CAACC,OAAO,GAAGM,KAAK;IACvB;EACF,CAAC;EAEDC,OAAO,EAAE;IACP;AACJ;AACA;IACIC,WAAWA,CAAC;MAAET,KAAK;MAAEU;IAAO,CAAC,EAAE;MAC7B;MACA,MAAMC,QAAQ,GAAGX,KAAK,CAACC,OAAO,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;MAC7DS,MAAM,CAAC,WAAW,EAAEC,QAAQ,CAAC;;MAE7B;MACA,IAAI;QACFjB,YAAY,CAACkB,OAAO,CAAC,kBAAkB,EAAED,QAAQ,CAAC;MACpD,CAAC,CAAC,OAAOf,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;;MAEA;MACAiB,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEJ,QAAQ,CAAC;IAC/D,CAAC;IAED;AACJ;AACA;AACA;AACA;IACIK,QAAQA,CAAC;MAAEN;IAAO,CAAC,EAAEH,KAAK,EAAE;MAC1B,IAAIA,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,MAAM,EAAE;MAE3CG,MAAM,CAAC,WAAW,EAAEH,KAAK,CAAC;MAE1B,IAAI;QACFb,YAAY,CAACkB,OAAO,CAAC,kBAAkB,EAAEL,KAAK,CAAC;MACjD,CAAC,CAAC,OAAOX,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;MAEAiB,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAER,KAAK,CAAC;IAC5D,CAAC;IAED;AACJ;AACA;IACIU,SAASA,CAAC;MAAEjB;IAAM,CAAC,EAAE;MACnB;MACAa,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEf,KAAK,CAACC,OAAO,CAAC;IACpE;EACF;AACF,CAAC;AAED,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}