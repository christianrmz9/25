{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"revenue-chart\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"chart-controls\"\n};\nconst _hoisted_4 = {\n  class: \"period-selector\"\n};\nconst _hoisted_5 = {\n  class: \"comparison-toggle\"\n};\nconst _hoisted_6 = {\n  class: \"switch\"\n};\nconst _hoisted_7 = {\n  class: \"chart-container\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", {\n    class: \"chart-title\"\n  }, \"Total Ingresos\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectedPeriod = $event),\n    class: \"period-select\"\n  }, _cache[2] || (_cache[2] = [_createElementVNode(\"option\", {\n    value: \"day\"\n  }, \"Hoy\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"week\"\n  }, \"Esta semana\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"month\"\n  }, \"Este mes\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"year\"\n  }, \"Este año\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedPeriod]])]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"label\", _hoisted_6, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.showComparison = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, _ctx.showComparison]]), _cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n    class: \"slider\"\n  }, null, -1 /* HOISTED */))]), _cache[4] || (_cache[4] = _createElementVNode(\"span\", {\n    class: \"toggle-label\"\n  }, \"Comparar con período anterior\", -1 /* HOISTED */))])])]), _createElementVNode(\"div\", _hoisted_7, [_ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _cache[6] || (_cache[6] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createVNode(_component_apexchart, {\n    type: \"area\",\n    height: \"350\",\n    options: _ctx.chartOptions,\n    series: _ctx.series\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_cache","$event","_ctx","selectedPeriod","value","_hoisted_5","_hoisted_6","type","showComparison","_hoisted_7","isLoading","_hoisted_8","_createCommentVNode","_createVNode","_component_apexchart","height","options","chartOptions","series"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\n  <div class=\"revenue-chart\">\n    <div class=\"chart-header\">\n        <h2 class=\"chart-title\">Total Ingresos</h2>\n      <div class=\"chart-controls\">\n      <div class=\"period-selector\">\n          <select v-model=\"selectedPeriod\" class=\"period-select\">\n            <option value=\"day\">Hoy</option>\n            <option value=\"week\">Esta semana</option>\n            <option value=\"month\">Este mes</option>\n            <option value=\"year\">Este año</option>\n          </select>\n        </div>\n        <div class=\"comparison-toggle\">\n          <label class=\"switch\">\n            <input type=\"checkbox\" v-model=\"showComparison\">\n            <span class=\"slider\"></span>\n          </label>\n          <span class=\"toggle-label\">Comparar con período anterior</span>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"chart-container\">\n      <div v-if=\"isLoading\" class=\"loading-overlay\">\n        <div class=\"loading-spinner\"></div>\n          </div>\n      <apexchart\n        type=\"area\"\n        height=\"350\"\n        :options=\"chartOptions\"\n        :series=\"series\"\n      ></apexchart>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue'\nimport VueApexCharts from 'vue3-apexcharts'\n\nexport default defineComponent({\n  name: 'RevenueChart',\n  components: {\n    apexchart: VueApexCharts\n  },\n  \n  data() {\n    return {\n      selectedPeriod: 'month',\n      showComparison: false,\n      isLoading: false,\n      isDarkMode: false,\n      series: [{\n        name: 'Ingresos',\n        data: []\n      }],\n      chartOptions: {\n        chart: {\n          type: 'area',\n          height: 350,\n          background: this.isDarkMode ? '#000000' : '#fff',\n          foreColor: '#666',\n          toolbar: {\n            show: true,\n            tools: {\n              download: true,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              reset: true\n            }\n          },\n          animations: {\n            enabled: true,\n            easing: 'easeinout',\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 150\n            },\n            dynamicAnimation: {\n              enabled: true,\n              speed: 350\n            }\n          }\n        },\n        plotOptions: {\n          area: {\n            fillTo: 'origin'\n          }\n        },\n        colors: ['#2E93fA', '#66DA26'],\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.45,\n            opacityTo: 0.05,\n            stops: [0, 95, 100]\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 2\n        },\n        grid: {\n          show: true,\n          borderColor: this.isDarkMode ? '#333' : '#f1f1f1',\n          strokeDashArray: 3,\n          position: 'back',\n          padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n          },\n          xaxis: {\n            lines: {\n              show: true\n            }\n          },\n          yaxis: {\n            lines: {\n              show: true\n            }\n          }\n        },\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeColors: this.isDarkMode ? '#333' : '#fff',\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#999' : '#666',\n              fontSize: '12px'\n            }\n          },\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          crosshairs: {\n            show: true,\n            stroke: {\n              color: '#666',\n              width: 1,\n              dashArray: 3\n            }\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Ingresos ($)',\n            style: {\n              fontSize: '14px',\n              color: this.isDarkMode ? '#999' : '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#999' : '#666'\n            },\n            formatter: function(value) {\n              return value >= 1000000 \n                ? `$${(value/1000000).toFixed(1)}M` \n                : value >= 1000 \n                  ? `$${(value/1000).toFixed(1)}K` \n                  : `$${value}`\n            }\n          }\n        },\n        tooltip: {\n          theme: this.isDarkMode ? 'dark' : 'light',\n          shared: true,\n          intersect: false,\n          y: {\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        },\n        theme: {\n          mode: this.isDarkMode ? 'dark' : 'light',\n          palette: 'palette1'\n        }\n      }\n    }\n  },\n\n  created() {\n    // Detectar el modo oscuro inicial\n    this.checkDarkMode()\n    // Escuchar cambios en el modo oscuro\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', this.checkDarkMode)\n  },\n  \n  mounted() {\n    // Cargar datos iniciales con comparación\n    this.loadData(this.selectedPeriod)\n  },\n  \n  beforeUnmount() {\n    // Limpiar el listener cuando el componente se destruye\n    window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', this.checkDarkMode)\n  },\n  \n  watch: {\n    selectedPeriod: {\n      handler(newPeriod) {\n        this.loadData(newPeriod)\n      },\n      immediate: false\n    },\n    showComparison: {\n      immediate: true,\n      handler(newValue) {\n        if (newValue) {\n          this.loadComparisonData()\n        } else {\n          // Si se desactiva, mantener solo la serie principal\n          this.series = [this.series[0]]\n        }\n      }\n    }\n  },\n\n  methods: {\n    checkDarkMode() {\n      this.isDarkMode = document.documentElement.classList.contains('dark-theme')\n      this.updateChartTheme()\n    },\n\n    updateChartTheme() {\n      const style = getComputedStyle(document.documentElement)\n      const bgSecondary = style.getPropertyValue('--bg-secondary').trim()\n      \n      this.chartOptions = {\n        ...this.chartOptions,\n        chart: {\n          ...this.chartOptions.chart,\n          background: bgSecondary,\n          foreColor: this.isDarkMode ? '#999' : '#666'\n        },\n        grid: {\n          ...this.chartOptions.grid,\n          borderColor: this.isDarkMode ? '#333' : '#f1f1f1'\n        },\n        colors: ['#2E93fA', '#66DA26'],\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.45,\n            opacityTo: 0.05,\n            stops: [0, 95, 100]\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 2\n        },\n        markers: {\n          size: 4,\n          colors: ['#2E93fA'],\n          strokeColors: this.isDarkMode ? '#333' : '#fff',\n          strokeWidth: 2,\n          hover: {\n            size: 7\n          }\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#999' : '#666',\n              fontSize: '12px'\n            }\n          },\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          crosshairs: {\n            show: true,\n            stroke: {\n              color: '#666',\n              width: 1,\n              dashArray: 3\n            }\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Ingresos ($)',\n            style: {\n              fontSize: '14px',\n              color: this.isDarkMode ? '#999' : '#666'\n            }\n          },\n          labels: {\n            style: {\n              colors: this.isDarkMode ? '#999' : '#666'\n            },\n            formatter: function(value) {\n              return value >= 1000000 \n                ? `$${(value/1000000).toFixed(1)}M` \n                : value >= 1000 \n                  ? `$${(value/1000).toFixed(1)}K` \n                  : `$${value}`\n            }\n          }\n        },\n        tooltip: {\n          theme: this.isDarkMode ? 'dark' : 'light',\n          shared: true,\n          intersect: false,\n          y: {\n            formatter: function(value) {\n              return new Intl.NumberFormat('es-MX', {\n                style: 'currency',\n                currency: 'MXN'\n              }).format(value)\n            }\n          }\n        },\n        theme: {\n          ...this.chartOptions.theme,\n          mode: this.isDarkMode ? 'dark' : 'light'\n        }\n      }\n    },\n\n    async loadData(period) {\n      this.isLoading = true\n      try {\n        const data = this.generateMockData(period)\n        // Siempre empezar con la serie principal\n        this.series = [{\n          name: 'Ingresos',\n          data: data\n        }]\n        \n        // Si showComparison está activo, cargar los datos de comparación\n        if (this.showComparison) {\n          await this.loadComparisonData()\n        }\n      } catch (error) {\n        console.error('Error loading revenue data:', error)\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    async loadComparisonData() {\n      try {\n        const comparisonData = this.generateMockComparisonData(this.selectedPeriod)\n        // Actualizar las series con los datos de comparación\n        this.series = [\n          this.series[0],\n          {\n            name: 'Período anterior',\n            data: comparisonData\n          }\n        ]\n      } catch (error) {\n        console.error('Error loading comparison data:', error)\n      }\n    },\n\n    generateMockData(period) {\n      const data = []\n      let points = 0\n      \n      switch(period) {\n        case 'day':\n          points = 24\n          for (let i = 0; i < points; i++) {\n            const date = new Date()\n            date.setHours(i, 0, 0)\n            data.push([\n              date.getTime(),\n              Math.floor(Math.random() * 50000) + 10000\n            ])\n          }\n          break\n        case 'week':\n          points = 7\n          for (let i = 0; i < points; i++) {\n            const date = new Date()\n            date.setDate(date.getDate() - i)\n            data.push([\n              date.getTime(),\n              Math.floor(Math.random() * 200000) + 50000\n            ])\n          }\n          break\n        case 'month':\n          points = 30\n          for (let i = 0; i < points; i++) {\n            const date = new Date()\n            date.setDate(date.getDate() - i)\n            data.push([\n              date.getTime(),\n              Math.floor(Math.random() * 500000) + 100000\n            ])\n          }\n          break\n        case 'year':\n          points = 12\n          for (let i = 0; i < points; i++) {\n            const date = new Date()\n            date.setMonth(date.getMonth() - i)\n            data.push([\n              date.getTime(),\n              Math.floor(Math.random() * 2000000) + 500000\n            ])\n          }\n          break\n      }\n      \n      return data.reverse()\n    },\n\n    generateMockComparisonData(period) {\n      const data = []\n      const currentData = this.generateMockData(period)\n      \n      currentData.forEach(([date, value]) => {\n        const prevDate = new Date(date)\n        switch(period) {\n          case 'day':\n            prevDate.setDate(prevDate.getDate() - 1)\n            break\n          case 'week':\n            prevDate.setDate(prevDate.getDate() - 7)\n            break\n          case 'month':\n            prevDate.setMonth(prevDate.getMonth() - 1)\n            break\n          case 'year':\n            prevDate.setFullYear(prevDate.getFullYear() - 1)\n            break\n        }\n        data.push([\n          prevDate.getTime(),\n          Math.floor(value * 0.8 + Math.random() * value * 0.4)\n        ])\n      })\n      \n      return data\n    }\n  }\n})\n</script>\n\n<style scoped>\n.revenue-chart {\n  background: var(--bg-secondary);\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: \n    0 2px 4px rgba(0, 0, 0, 0.05),\n    0 4px 8px rgba(0, 0, 0, 0.05),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\n  transform: translateY(0);\n  transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);\n  position: relative;\n  background-image: linear-gradient(\n    to bottom,\n    rgba(255, 255, 255, 0.1) 0%,\n    rgba(255, 255, 255, 0) 20%\n  );\n}\n\n/* Efecto de elevación al pasar el mouse */\n.revenue-chart:hover {\n  transform: translateY(-5px);\n  box-shadow: \n    0 5px 10px rgba(0, 0, 0, 0.1),\n    0 10px 20px rgba(0, 0, 0, 0.1),\n    0 20px 40px rgba(0, 0, 0, 0.05),\n    inset 0 -2px 0 rgba(0, 0, 0, 0.1),\n    inset 0 2px 0 rgba(255, 255, 255, 0.1);\n}\n\n/* Efecto de presión al hacer clic */\n.revenue-chart:active {\n  transform: translateY(-2px);\n  box-shadow: \n    0 2px 5px rgba(0, 0, 0, 0.1),\n    0 5px 10px rgba(0, 0, 0, 0.05),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  transition: all 0.1s cubic-bezier(0.165, 0.84, 0.44, 1);\n}\n\n/* Añadir un pseudo-elemento para el efecto de brillo en el borde */\n.revenue-chart::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 1px;\n  background: linear-gradient(\n    to right,\n    rgba(255, 255, 255, 0) 0%,\n    rgba(255, 255, 255, 0.5) 50%,\n    rgba(255, 255, 255, 0) 100%\n  );\n  border-top-left-radius: 12px;\n  border-top-right-radius: 12px;\n}\n\n/* Añadir un pseudo-elemento para el efecto de sombra en el borde inferior */\n.revenue-chart::after {\n  content: \"\";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 1px;\n  background: linear-gradient(\n    to right,\n    rgba(0, 0, 0, 0) 0%,\n    rgba(0, 0, 0, 0.2) 50%,\n    rgba(0, 0, 0, 0) 100%\n  );\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n}\n\n.chart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.chart-title {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: var(--text-primary);\n  margin: 0;\n}\n\n.chart-controls {\n  display: flex;\n  gap: 20px;\n  align-items: center;\n}\n\n.period-select {\n  padding: 8px 12px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.period-select:hover {\n  border-color: var(--border-hover);\n}\n\n.switch {\n  position: relative;\n  display: inline-block;\n  width: 50px;\n  height: 24px;\n}\n\n.switch input {\n    opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: var(--bg-tertiary);\n  transition: .4s;\n  border-radius: 24px;\n}\n\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 16px;\n  width: 16px;\n  left: 4px;\n  bottom: 4px;\n  background-color: var(--bg-primary);\n  transition: .4s;\n  border-radius: 50%;\n}\n\ninput:checked + .slider {\n  background-color: #2E93fA;\n}\n\ninput:checked + .slider:before {\n  transform: translateX(26px);\n}\n\n.toggle-label {\n  margin-left: 10px;\n  color: var(--text-secondary);\n    font-size: 0.9rem;\n  }\n  \n.chart-container {\n  position: relative;\n  min-height: 350px;\n  background: var(--bg-primary);\n}\n\n.loading-overlay {\n    position: absolute;\n  top: 0;\n    left: 0;\n    right: 0;\n  bottom: 0;\n  background: var(--bg-overlay);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 10;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid var(--spinner-track);\n  border-top-color: var(--spinner-color);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (max-width: 768px) {\n  .chart-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 15px;\n  }\n\n  .chart-controls {\n    flex-direction: column;\n    width: 100%;\n  }\n\n  .period-select {\n  width: 100%;\n  }\n}\n\n:deep(.apexcharts-canvas) {\n  background: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-svg) {\n  background: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-plot-area) {\n  fill: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-grid) {\n  background: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-gridlines-horizontal),\n:deep(.apexcharts-gridlines-vertical) {\n  stroke: var(--border-color) !important;\n}\n\n:deep(.apexcharts-plot-background) {\n  fill: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-inner) {\n  background: var(--bg-secondary) !important;\n}\n\n:deep(.apexcharts-area-series) path {\n  fill-opacity: 0.5;\n}\n\n:deep(.apexcharts-tooltip) {\n  background: var(--bg-secondary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-tooltip-title) {\n  background: var(--bg-tertiary) !important;\n  border-bottom: 1px solid var(--border-color) !important;\n}\n\n:deep(.apexcharts-xaxistooltip) {\n  background: var(--bg-secondary) !important;\n  border: 1px solid var(--border-color) !important;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAgB;;EACtBA,KAAK,EAAC;AAAiB;;EAQrBA,KAAK,EAAC;AAAmB;;EACrBA,KAAK,EAAC;AAAQ;;EAStBA,KAAK,EAAC;AAAiB;;EAvBhCC,GAAA;EAwB4BD,KAAK,EAAC;;;;uBAvBhCE,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCJC,mBAAA,CAmBM,OAnBNC,UAmBM,G,0BAlBFD,mBAAA,CAA2C;IAAvCJ,KAAK,EAAC;EAAa,GAAC,gBAAc,sBACxCI,mBAAA,CAgBM,OAhBNE,UAgBM,GAfNF,mBAAA,CAOQ,OAPRG,UAOQ,G,gBANJH,mBAAA,CAKS;IAXnB,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAM2BC,IAAA,CAAAC,cAAc,GAAAF,MAAA;IAAET,KAAK,EAAC;gCACrCI,mBAAA,CAAgC;IAAxBQ,KAAK,EAAC;EAAK,GAAC,KAAG,qBACvBR,mBAAA,CAAyC;IAAjCQ,KAAK,EAAC;EAAM,GAAC,aAAW,qBAChCR,mBAAA,CAAuC;IAA/BQ,KAAK,EAAC;EAAO,GAAC,UAAQ,qBAC9BR,mBAAA,CAAsC;IAA9BQ,KAAK,EAAC;EAAM,GAAC,UAAQ,oB,2CAJdF,IAAA,CAAAC,cAAc,E,KAOjCP,mBAAA,CAMM,OANNS,UAMM,GALJT,mBAAA,CAGQ,SAHRU,UAGQ,G,gBAFNV,mBAAA,CAAgD;IAAzCW,IAAI,EAAC,UAAU;IAflC,uBAAAP,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAe4CC,IAAA,CAAAM,cAAc,GAAAP,MAAA;qDAAdC,IAAA,CAAAM,cAAc,E,6BAC9CZ,mBAAA,CAA4B;IAAtBJ,KAAK,EAAC;EAAQ,4B,6BAEtBI,mBAAA,CAA+D;IAAzDJ,KAAK,EAAC;EAAc,GAAC,+BAA6B,qB,OAK9DI,mBAAA,CAUM,OAVNa,UAUM,GATOP,IAAA,CAAAQ,SAAS,I,cAApBhB,mBAAA,CAEU,OAFViB,UAEU,EAAAX,MAAA,QAAAA,MAAA,OADRJ,mBAAA,CAAmC;IAA9BJ,KAAK,EAAC;EAAiB,2B,MAzBpCoB,mBAAA,gBA2BMC,YAAA,CAKaC,oBAAA;IAJXP,IAAI,EAAC,MAAM;IACXQ,MAAM,EAAC,KAAK;IACXC,OAAO,EAAEd,IAAA,CAAAe,YAAY;IACrBC,MAAM,EAAEhB,IAAA,CAAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}