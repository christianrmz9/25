{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveDirective as _resolveDirective, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"revenue-chart-container\"\n};\nconst _hoisted_2 = {\n  class: \"chart-header\"\n};\nconst _hoisted_3 = {\n  class: \"chart-title-section\"\n};\nconst _hoisted_4 = {\n  class: \"revenue-amount\"\n};\nconst _hoisted_5 = {\n  class: \"change-value\"\n};\nconst _hoisted_6 = {\n  class: \"period\"\n};\nconst _hoisted_7 = {\n  class: \"period-selector\"\n};\nconst _hoisted_8 = {\n  class: \"controls\"\n};\nconst _hoisted_9 = {\n  class: \"comparison-toggle\"\n};\nconst _hoisted_10 = {\n  class: \"period-dropdown\"\n};\nconst _hoisted_11 = {\n  class: \"period-options\"\n};\nconst _hoisted_12 = [\"onClick\"];\nconst _hoisted_13 = {\n  class: \"chart-content\"\n};\nconst _hoisted_14 = {\n  class: \"chart-axes\"\n};\nconst _hoisted_15 = {\n  class: \"y-axis\"\n};\nconst _hoisted_16 = {\n  class: \"chart-svg\",\n  ref: \"chartSvg\",\n  width: \"100%\",\n  height: \"100%\"\n};\nconst _hoisted_17 = {\n  id: \"areaGradient\",\n  x1: \"0%\",\n  y1: \"0%\",\n  x2: \"0%\",\n  y2: \"100%\"\n};\nconst _hoisted_18 = [\"stop-color\"];\nconst _hoisted_19 = [\"stop-color\"];\nconst _hoisted_20 = [\"d\"];\nconst _hoisted_21 = [\"d\", \"stroke\"];\nconst _hoisted_22 = [\"d\", \"stroke\"];\nconst _hoisted_23 = [\"x1\", \"y1\", \"x2\", \"stroke\"];\nconst _hoisted_24 = [\"transform\"];\nconst _hoisted_25 = [\"r\", \"fill\"];\nconst _hoisted_26 = [\"r\", \"fill\"];\nconst _hoisted_27 = [\"r\", \"fill\"];\nconst _hoisted_28 = [\"width\", \"height\"];\nconst _hoisted_29 = {\n  class: \"x-axis\"\n};\nconst _hoisted_30 = {\n  class: \"tooltip-title\"\n};\nconst _hoisted_31 = {\n  class: \"tooltip-value\"\n};\nconst _hoisted_32 = {\n  class: \"tooltip-accumulated\"\n};\nconst _hoisted_33 = {\n  key: 0,\n  class: \"tooltip-comparison\"\n};\nconst _hoisted_34 = {\n  class: \"comparison-label\"\n};\nconst _hoisted_35 = {\n  class: \"comparison-value\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_icon = _resolveComponent(\"icon\");\n  const _directive_click_outside = _resolveDirective(\"click-outside\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", {\n    class: \"chart-title\"\n  }, \"Total Ingresos\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, \"$\" + _toDisplayString($options.formattedTotalRevenue), 1 /* TEXT */), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"change-indicator\", {\n      'positive': $options.totalChange > 0,\n      'negative': $options.totalChange < 0\n    }])\n  }, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString($options.totalChange > 0 ? '+' : '') + _toDisplayString($options.formattedTotalChange) + \" (\" + _toDisplayString($options.formattedChangePercent) + \"%)\", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_6, \"· \" + _toDisplayString($data.showComparison ? 'vs. año anterior' : 'últimos 12 meses'), 1 /* TEXT */)], 2 /* CLASS */)]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"label\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.showComparison = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.showComparison]]), _cache[8] || (_cache[8] = _createElementVNode(\"span\", {\n    class: \"toggle-label\"\n  }, \"Comparar con año anterior\", -1 /* HOISTED */))]), _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"button\", {\n    class: \"period-button\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.togglePeriodSelector && $options.togglePeriodSelector(...args))\n  }, [_createTextVNode(_toDisplayString($options.selectedPeriodLabel) + \" \", 1 /* TEXT */), _createVNode(_component_icon, {\n    name: \"arrow_drop_down\"\n  })]), $data.showPeriodSelector ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 0\n  }, [_createElementVNode(\"div\", {\n    class: \"mobile-overlay\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.closePeriodSelector && $options.closePeriodSelector(...args))\n  }), _createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availablePeriods, period => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: period.value,\n      class: _normalizeClass([\"period-option\", {\n        active: $data.selectedPeriod === period.value\n      }]),\n      onClick: $event => $options.selectPeriod(period.value)\n    }, _toDisplayString(period.label), 11 /* TEXT, CLASS, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))])], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)])), [[_directive_click_outside, $options.closePeriodSelector]])])])]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.yAxisLabels, (value, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"axis-label\",\n      key: index\n    }, _toDisplayString(value), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", {\n    class: \"chart-graphic\",\n    ref: \"chartContainer\",\n    onMousemove: _cache[3] || (_cache[3] = (...args) => $options.handleMouseMove && $options.handleMouseMove(...args)),\n    onMouseleave: _cache[4] || (_cache[4] = (...args) => $options.resetHighlight && $options.resetHighlight(...args)),\n    onTouchmove: _cache[5] || (_cache[5] = (...args) => $options.handleTouchMove && $options.handleTouchMove(...args)),\n    onTouchend: _cache[6] || (_cache[6] = (...args) => $options.resetHighlight && $options.resetHighlight(...args))\n  }, [_createCommentVNode(\" La gráfica SVG se generará aquí \"), (_openBlock(), _createElementBlock(\"svg\", _hoisted_16, [_createElementVNode(\"defs\", null, [_createElementVNode(\"linearGradient\", _hoisted_17, [_createElementVNode(\"stop\", {\n    offset: \"0%\",\n    \"stop-color\": $options.chartGradientTop,\n    \"stop-opacity\": \"0.6\"\n  }, null, 8 /* PROPS */, _hoisted_18), _createElementVNode(\"stop\", {\n    offset: \"100%\",\n    \"stop-color\": $options.chartGradientBottom,\n    \"stop-opacity\": \"0.05\"\n  }, null, 8 /* PROPS */, _hoisted_19)]), _createCommentVNode(\" Patrón para la cuadrícula \"), _cache[9] || (_cache[9] = _createElementVNode(\"pattern\", {\n    id: \"grid\",\n    width: \"50\",\n    height: \"50\",\n    patternUnits: \"userSpaceOnUse\"\n  }, [_createCommentVNode(\" Líneas horizontales \"), _createElementVNode(\"path\", {\n    d: \"M 0 50 L 50 50\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    \"stroke-width\": \"0.5\"\n  }), _createCommentVNode(\" Líneas verticales \"), _createElementVNode(\"path\", {\n    d: \"M 50 0 L 50 50\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    \"stroke-width\": \"0.5\"\n  })], -1 /* HOISTED */))]), _createCommentVNode(\" Cuadrícula de fondo \"), _cache[10] || (_cache[10] = _createElementVNode(\"rect\", {\n    width: \"100%\",\n    height: \"100%\",\n    fill: \"url(#grid)\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"path\", {\n    d: $options.areaPath,\n    fill: \"url(#areaGradient)\"\n  }, null, 8 /* PROPS */, _hoisted_20), _createElementVNode(\"path\", {\n    d: $options.linePath,\n    fill: \"none\",\n    stroke: $options.chartLineColor,\n    \"stroke-width\": \"2\"\n  }, null, 8 /* PROPS */, _hoisted_21), _createCommentVNode(\" Línea de comparación del año anterior (solo visible si showComparison es true) \"), $data.showComparison ? (_openBlock(), _createElementBlock(\"path\", {\n    key: 0,\n    d: $options.comparisonLinePath,\n    fill: \"none\",\n    stroke: $options.comparisonLineColor,\n    \"stroke-width\": \"2\",\n    \"stroke-dasharray\": \"4,2\"\n  }, null, 8 /* PROPS */, _hoisted_22)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Línea vertical para el punto actual \"), $options.currentPoint && $data.mouseOver ? (_openBlock(), _createElementBlock(\"line\", {\n    key: 1,\n    x1: $data.mouseX,\n    y1: $data.chartHeight,\n    x2: $data.mouseX,\n    y2: 0,\n    stroke: $options.chartLineColor,\n    \"stroke-width\": \"1\",\n    \"stroke-dasharray\": \"2,2\"\n  }, null, 8 /* PROPS */, _hoisted_23)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Círculo indicador con efectos mejorados \"), $options.currentPoint && $data.mouseOver ? (_openBlock(), _createElementBlock(\"g\", {\n    key: 2,\n    class: \"hover-point-group\",\n    transform: `translate(${$data.mouseX},${$options.currentPoint.y})`\n  }, [_createCommentVNode(\" Anillo exterior con brillo \"), _createElementVNode(\"circle\", {\n    cx: \"0\",\n    cy: \"0\",\n    r: $options.isMobile ? 12 : 15,\n    fill: $options.chartLineColor,\n    class: \"point-glow\",\n    opacity: \"0.15\"\n  }, null, 8 /* PROPS */, _hoisted_25), _createCommentVNode(\" Anillo medio para efecto de profundidad \"), _createElementVNode(\"circle\", {\n    cx: \"0\",\n    cy: \"0\",\n    r: $options.isMobile ? 8 : 10,\n    fill: $options.chartLineColor,\n    class: \"point-ring\",\n    opacity: \"0.3\"\n  }, null, 8 /* PROPS */, _hoisted_26), _createCommentVNode(\" Punto central \"), _createElementVNode(\"circle\", {\n    cx: \"0\",\n    cy: \"0\",\n    r: $options.isMobile ? 4 : 5,\n    fill: $options.chartLineColor,\n    stroke: \"#1a1a1a\",\n    \"stroke-width\": \"2\",\n    class: \"point-center\"\n  }, null, 8 /* PROPS */, _hoisted_27)], 8 /* PROPS */, _hoisted_24)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Área interactiva transparente para detectar movimiento del mouse \"), _createElementVNode(\"rect\", {\n    class: \"interaction-overlay\",\n    width: $data.chartWidth - 10,\n    height: $data.chartHeight,\n    fill: \"transparent\",\n    style: {\n      \"pointer-events\": \"all\"\n    }\n  }, null, 8 /* PROPS */, _hoisted_28)], 512 /* NEED_PATCH */)), _createCommentVNode(\" Eje X con los meses \"), _createElementVNode(\"div\", _hoisted_29, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.monthLabels, (month, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"x-label\", {\n        'active': $data.currentMonthIndex === index && $data.mouseOver,\n        [`month-${index}`]: true\n      }]),\n      key: index\n    }, _toDisplayString(month), 3 /* TEXT, CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Tooltip que sigue al mouse \"), $options.currentPoint && $data.mouseOver ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"tooltip\",\n    style: _normalizeStyle($options.tooltipStyle)\n  }, [_createElementVNode(\"div\", _hoisted_30, _toDisplayString($options.currentPoint.month) + \", \" + _toDisplayString($options.currentPoint.year), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_31, \"$\" + _toDisplayString($options.formatCurrency($options.currentPoint.value)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_32, \"Acumulado: $\" + _toDisplayString($options.formatCurrency($options.currentPointAccumulated)), 1 /* TEXT */), _createCommentVNode(\" Comparación con el año anterior (solo si showComparison es true) \"), $data.showComparison && $options.historicalDataPoints.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, _toDisplayString($options.currentPoint.year - 1) + \":\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_35, \" $\" + _toDisplayString($options.formatCurrency($options.getHistoricalValueAtCurrentIndex())), 1 /* TEXT */), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"comparison-difference\", {\n      'positive': $options.currentPointYearOverYearChange?.amount > 0,\n      'negative': $options.currentPointYearOverYearChange?.amount < 0\n    }])\n  }, _toDisplayString($options.currentPointYearOverYearChange?.amount > 0 ? '+' : '') + _toDisplayString($options.formatCurrency($options.currentPointYearOverYearChange?.amount)) + \" (\" + _toDisplayString($options.formatPercent($options.currentPointYearOverYearChange?.percent)) + \") \", 3 /* TEXT, CLASS */)])) : _createCommentVNode(\"v-if\", true)], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true)], 544 /* NEED_HYDRATION, NEED_PATCH */)])]);\n}","map":{"version":3,"names":["class","ref","width","height","id","x1","y1","x2","y2","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$options","formattedTotalRevenue","_normalizeClass","totalChange","_hoisted_5","formattedTotalChange","formattedChangePercent","_hoisted_6","$data","showComparison","_hoisted_7","_hoisted_8","_hoisted_9","type","_cache","$event","_hoisted_10","onClick","args","togglePeriodSelector","_createTextVNode","selectedPeriodLabel","_createVNode","_component_icon","name","showPeriodSelector","_Fragment","closePeriodSelector","_hoisted_11","_renderList","availablePeriods","period","value","active","selectedPeriod","selectPeriod","label","_hoisted_12","_createCommentVNode","_hoisted_13","_hoisted_14","_hoisted_15","yAxisLabels","index","onMousemove","handleMouseMove","onMouseleave","resetHighlight","onTouchmove","handleTouchMove","onTouchend","_hoisted_16","_hoisted_17","offset","chartGradientTop","_hoisted_18","chartGradientBottom","_hoisted_19","patternUnits","d","fill","stroke","areaPath","_hoisted_20","linePath","chartLineColor","_hoisted_21","comparisonLinePath","comparisonLineColor","_hoisted_22","currentPoint","mouseOver","mouseX","chartHeight","_hoisted_23","transform","y","cx","cy","r","isMobile","opacity","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_24","chartWidth","style","_hoisted_28","_hoisted_29","monthLabels","month","currentMonthIndex","_normalizeStyle","tooltipStyle","_hoisted_30","year","_hoisted_31","formatCurrency","_hoisted_32","currentPointAccumulated","historicalDataPoints","length","_hoisted_33","_hoisted_34","_hoisted_35","getHistoricalValueAtCurrentIndex","currentPointYearOverYearChange","amount","formatPercent","percent"],"sources":["C:\\Users\\Pc\\Desktop\\Proyectos\\criwave\\client\\src\\components\\dashboard\\RevenueChart.vue"],"sourcesContent":["<template>\n  <div class=\"revenue-chart-container\">\n    <div class=\"chart-header\">\n      <div class=\"chart-title-section\">\n        <h2 class=\"chart-title\">Total Ingresos</h2>\n        <div class=\"revenue-amount\">${{ formattedTotalRevenue }}</div>\n        <div class=\"change-indicator\" :class=\"{ 'positive': totalChange > 0, 'negative': totalChange < 0 }\">\n          <span class=\"change-value\">{{ totalChange > 0 ? '+' : '' }}{{ formattedTotalChange }} ({{ formattedChangePercent }}%)</span>\n          <span class=\"period\">· {{ showComparison ? 'vs. año anterior' : 'últimos 12 meses' }}</span>\n        </div>\n      </div>\n      \n      <div class=\"period-selector\">\n        <div class=\"controls\">\n          <label class=\"comparison-toggle\">\n            <input type=\"checkbox\" v-model=\"showComparison\">\n            <span class=\"toggle-label\">Comparar con año anterior</span>\n          </label>\n          <div class=\"period-dropdown\" v-click-outside=\"closePeriodSelector\">\n            <button class=\"period-button\" @click=\"togglePeriodSelector\">\n              {{ selectedPeriodLabel }}\n              <icon name=\"arrow_drop_down\" />\n            </button>\n            <template v-if=\"showPeriodSelector\">\n              <div class=\"mobile-overlay\" @click=\"closePeriodSelector\"></div>\n              <div class=\"period-options\">\n                <button \n                  v-for=\"period in availablePeriods\" \n                  :key=\"period.value\"\n                  class=\"period-option\" \n                  :class=\"{ active: selectedPeriod === period.value }\"\n                  @click=\"selectPeriod(period.value)\"\n                >\n                  {{ period.label }}\n                </button>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"chart-content\">\n      <div class=\"chart-axes\">\n        <div class=\"y-axis\">\n          <div class=\"axis-label\" v-for=\"(value, index) in yAxisLabels\" :key=\"index\">\n            {{ value }}\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"chart-graphic\" ref=\"chartContainer\" \n           @mousemove=\"handleMouseMove\"\n           @mouseleave=\"resetHighlight\" \n           @touchmove=\"handleTouchMove\"\n           @touchend=\"resetHighlight\">\n        <!-- La gráfica SVG se generará aquí -->\n        <svg class=\"chart-svg\" ref=\"chartSvg\" width=\"100%\" height=\"100%\">\n          <defs>\n            <linearGradient id=\"areaGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <stop offset=\"0%\" :stop-color=\"chartGradientTop\" stop-opacity=\"0.6\" />\n              <stop offset=\"100%\" :stop-color=\"chartGradientBottom\" stop-opacity=\"0.05\" />\n            </linearGradient>\n            <!-- Patrón para la cuadrícula -->\n            <pattern id=\"grid\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\">\n              <!-- Líneas horizontales -->\n              <path \n                d=\"M 0 50 L 50 50\" \n                fill=\"none\" \n                stroke=\"currentColor\"\n                stroke-width=\"0.5\"\n              />\n              <!-- Líneas verticales -->\n              <path \n                d=\"M 50 0 L 50 50\" \n                fill=\"none\" \n                stroke=\"currentColor\"\n                stroke-width=\"0.5\"\n              />\n            </pattern>\n          </defs>\n          <!-- Cuadrícula de fondo -->\n          <rect \n            width=\"100%\" \n            height=\"100%\" \n            fill=\"url(#grid)\" \n          />\n          <path :d=\"areaPath\" fill=\"url(#areaGradient)\" />\n          <path :d=\"linePath\" fill=\"none\" :stroke=\"chartLineColor\" stroke-width=\"2\" />\n          \n          <!-- Línea de comparación del año anterior (solo visible si showComparison es true) -->\n          <path v-if=\"showComparison\" \n                :d=\"comparisonLinePath\" \n                fill=\"none\" \n                :stroke=\"comparisonLineColor\" \n                stroke-width=\"2\" \n                stroke-dasharray=\"4,2\" />\n          \n          <!-- Línea vertical para el punto actual -->\n          <line v-if=\"currentPoint && mouseOver\" \n                :x1=\"mouseX\" \n                :y1=\"chartHeight\" \n                :x2=\"mouseX\" \n                :y2=\"0\" \n                :stroke=\"chartLineColor\" \n                stroke-width=\"1\" \n                stroke-dasharray=\"2,2\" />\n          \n          <!-- Círculo indicador con efectos mejorados -->\n          <g v-if=\"currentPoint && mouseOver\" class=\"hover-point-group\" :transform=\"`translate(${mouseX},${currentPoint.y})`\">\n            <!-- Anillo exterior con brillo -->\n            <circle \n              cx=\"0\" \n              cy=\"0\" \n              :r=\"isMobile ? 12 : 15\" \n              :fill=\"chartLineColor\"\n              class=\"point-glow\"\n              opacity=\"0.15\"\n            />\n            <!-- Anillo medio para efecto de profundidad -->\n            <circle \n              cx=\"0\" \n              cy=\"0\" \n              :r=\"isMobile ? 8 : 10\" \n              :fill=\"chartLineColor\"\n              class=\"point-ring\"\n              opacity=\"0.3\"\n            />\n            <!-- Punto central -->\n            <circle \n              cx=\"0\" \n              cy=\"0\" \n              :r=\"isMobile ? 4 : 5\" \n              :fill=\"chartLineColor\"\n              stroke=\"#1a1a1a\" \n              stroke-width=\"2\"\n              class=\"point-center\"\n            />\n          </g>\n          \n          <!-- Área interactiva transparente para detectar movimiento del mouse -->\n          <rect \n            class=\"interaction-overlay\" \n            :width=\"chartWidth - 10\" \n            :height=\"chartHeight\" \n            fill=\"transparent\" \n            style=\"pointer-events: all;\"\n          />\n        </svg>\n        \n        <!-- Eje X con los meses -->\n        <div class=\"x-axis\">\n          <div \n            class=\"x-label\" \n            v-for=\"(month, index) in monthLabels\" \n            :key=\"index\" \n            :class=\"{ \n              'active': currentMonthIndex === index && mouseOver,\n              [`month-${index}`]: true\n            }\"\n          >\n            {{ month }}\n          </div>\n        </div>\n        \n        <!-- Tooltip que sigue al mouse -->\n        <div \n          v-if=\"currentPoint && mouseOver\" \n          class=\"tooltip\" \n          :style=\"tooltipStyle\"\n        >\n          <div class=\"tooltip-title\">{{ currentPoint.month }}, {{ currentPoint.year }}</div>\n          <div class=\"tooltip-value\">${{ formatCurrency(currentPoint.value) }}</div>\n          <div class=\"tooltip-accumulated\">Acumulado: ${{ formatCurrency(currentPointAccumulated) }}</div>\n          \n          <!-- Comparación con el año anterior (solo si showComparison es true) -->\n          <div v-if=\"showComparison && historicalDataPoints.length > 0\" class=\"tooltip-comparison\">\n            <div class=\"comparison-label\">{{ currentPoint.year - 1 }}:</div>\n            <div class=\"comparison-value\">\n              ${{ formatCurrency(getHistoricalValueAtCurrentIndex()) }}\n            </div>\n            <div class=\"comparison-difference\" :class=\"{ 'positive': currentPointYearOverYearChange?.amount > 0, 'negative': currentPointYearOverYearChange?.amount < 0 }\">\n              {{ currentPointYearOverYearChange?.amount > 0 ? '+' : '' }}{{ formatCurrency(currentPointYearOverYearChange?.amount) }} \n              ({{ formatPercent(currentPointYearOverYearChange?.percent) }})\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport MaterialIcon from '../ui/Icon.vue';\n\nexport default {\n  name: 'RevenueChart',\n  \n  components: {\n    icon: MaterialIcon\n  },\n  \n  props: {\n    /**\n     * Datos de ingresos de los últimos 12 meses\n     * Debe ser un array de objetos con las propiedades \"month\", \"year\" y \"revenue\"\n     */\n    revenueData: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    \n    /**\n     * Datos de ingresos históricos para comparación (año anterior)\n     * Debe seguir la misma estructura que revenueData\n     */\n    historicalData: {\n      type: Array,\n      default: () => []\n    },\n    \n    /**\n     * Si es true, intenta generar automáticamente datos históricos si no se proporcionan\n     */\n    autoGenerateHistorical: {\n      type: Boolean,\n      default: false\n    },\n    \n    /**\n     * Si es true, muestra la comparación por defecto\n     */\n    defaultShowComparison: {\n      type: Boolean,\n      default: false\n    },\n    \n    /**\n     * Cambio porcentual en los ingresos con respecto al período anterior\n     */\n    changePercent: {\n      type: Number,\n      default: 0\n    },\n    \n    /**\n     * Valor absoluto del cambio en los ingresos\n     */\n    changeAmount: {\n      type: Number,\n      default: 0\n    },\n    \n    /**\n     * Color principal del gráfico\n     */\n    color: {\n      type: String,\n      default: null\n    },\n    \n    /**\n     * Color para los datos de comparación del año anterior\n     */\n    comparisonColor: {\n      type: String,\n      default: '#777777'\n    }\n  },\n  \n  data() {\n    return {\n      chartWidth: 0,\n      chartHeight: 0,\n      currentMonthIndex: -1,\n      mouseOver: false,\n      mouseX: 0,\n      mouseY: 0,\n      showComparison: this.defaultShowComparison,\n      monthLabels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\n      yAxisLabelsCount: 5, // Número de etiquetas en el eje Y\n      // Datos simulados para el gráfico si no se proporcionan\n      defaultData: [\n        { month: 'Ene', year: new Date().getFullYear(), revenue: 1000000 },\n        { month: 'Feb', year: new Date().getFullYear(), revenue: 1200000 },\n        { month: 'Mar', year: new Date().getFullYear(), revenue: 2500000 },\n        { month: 'Abr', year: new Date().getFullYear(), revenue: 3800000 },\n        { month: 'May', year: new Date().getFullYear(), revenue: 5200000 },\n        { month: 'Jun', year: new Date().getFullYear(), revenue: 4800000 },\n        { month: 'Jul', year: new Date().getFullYear(), revenue: 8500000 },\n        { month: 'Ago', year: new Date().getFullYear(), revenue: 12000000 },\n        { month: 'Sep', year: new Date().getFullYear(), revenue: 9500000 },\n        { month: 'Oct', year: new Date().getFullYear(), revenue: 11000000 },\n        { month: 'Nov', year: new Date().getFullYear(), revenue: 12500000 },\n        { month: 'Dic', year: new Date().getFullYear(), revenue: 15000000 }\n      ],\n      // Datos simulados para comparación del año anterior\n      defaultHistoricalData: [],\n      // Tooltip mostrado actualmente (principal o histórico)\n      activeTooltipType: 'current',\n      // Detectar si estamos en un dispositivo móvil\n      windowWidth: window.innerWidth,\n      showPeriodSelector: false,\n      selectedPeriod: '12m',\n      availablePeriods: [\n        { value: '1d', label: 'Último día' },\n        { value: '3d', label: 'Últimos 3 días' },\n        { value: '7d', label: 'Últimos 7 días' },\n        { value: '1m', label: 'Último mes' },\n        { value: '3m', label: 'Últimos 3 meses' },\n        { value: '6m', label: 'Últimos 6 meses' },\n        { value: '9m', label: 'Últimos 9 meses' },\n        { value: '12m', label: 'Últimos 12 meses' }\n      ],\n    };\n  },\n  \n  computed: {\n    /**\n     * Detecta si estamos en modo oscuro\n     */\n    isDarkTheme() {\n      return document.documentElement.getAttribute('data-theme') === 'dark';\n    },\n    \n    /**\n     * Detecta si estamos en un dispositivo móvil basado en el ancho de la ventana\n     */\n    isMobile() {\n      return this.windowWidth <= 768;\n    },\n    \n    /**\n     * Determina el color a usar para el gráfico según el valor de cambio\n     */\n    chartLineColor() {\n      if (this.color) return this.color;\n      \n      // Si es positivo, usar verde como en SalesCard\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      }\n      // Si es negativo, usar rojo como en SalesCard\n      else if (this.totalChange < 0) {\n        return '#e74c3c';\n      }\n      // Si es neutral, usar color turquesa por defecto\n      else {\n        return '#2dc6af';\n      }\n    },\n    \n    /**\n     * Color para la línea de comparación del año anterior\n     */\n    comparisonLineColor() {\n      return this.comparisonColor || '#777777';\n    },\n    \n    /**\n     * Color para la parte superior del gradiente\n     */\n    chartGradientTop() {\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      } else if (this.totalChange < 0) {\n        return '#e74c3c';\n      } else {\n        return '#2dc6af';\n      }\n    },\n    \n    /**\n     * Color para la parte inferior del gradiente\n     */\n    chartGradientBottom() {\n      if (this.totalChange > 0) {\n        return '#27ae60';\n      } else if (this.totalChange < 0) {\n        return '#e74c3c';\n      } else {\n        return '#2dc6af';\n      }\n    },\n    \n    /**\n     * Obtiene los datos de ingresos actuales, generando datos con años si es necesario\n     */\n    chartData() {\n      if (this.revenueData.length > 0) {\n        return this.ensureYearInData(this.revenueData);\n      }\n      return this.defaultData;\n    },\n    \n    /**\n     * Obtiene los datos históricos para la comparación, generando si es necesario\n     */\n    historicalChartData() {\n      if (this.historicalData.length > 0) {\n        return this.ensureYearInData(this.historicalData);\n      }\n      \n      if (this.autoGenerateHistorical && this.chartData.length > 0) {\n        return this.generateHistoricalData();\n      }\n      \n      return this.defaultHistoricalData;\n    },\n    \n    /**\n     * Calcula el total de ingresos sumando todos los valores\n     */\n    totalRevenue() {\n      return this.filteredChartData.reduce((sum, item) => sum + item.revenue, 0);\n    },\n    \n    /**\n     * Calcula el total de ingresos del año anterior para comparación\n     */\n    totalHistoricalRevenue() {\n      return this.filteredHistoricalChartData.reduce((sum, item) => sum + item.revenue, 0);\n    },\n    \n    /**\n     * Calcula la diferencia porcentual entre el periodo actual y el histórico\n     */\n    yearOverYearChangePercent() {\n      if (!this.totalHistoricalRevenue) return 0;\n      return ((this.totalRevenue - this.totalHistoricalRevenue) / this.totalHistoricalRevenue) * 100;\n    },\n    \n    /**\n     * Formatea el total de ingresos para mostrar\n     */\n    formattedTotalRevenue() {\n      return this.formatLargeNumber(this.totalRevenue);\n    },\n    \n    /**\n     * Obtiene el valor de cambio total\n     */\n    totalChange() {\n      if (this.showComparison && this.historicalChartData.length > 0) {\n        return this.totalRevenue - this.totalHistoricalRevenue;\n      }\n      return this.changeAmount || 22325; // Valor de ejemplo si no se proporciona\n    },\n    \n    /**\n     * Formatea el cambio total para mostrar\n     */\n    formattedTotalChange() {\n      return this.formatLargeNumber(this.totalChange);\n    },\n    \n    /**\n     * Formatea el porcentaje de cambio\n     */\n    formattedChangePercent() {\n      if (this.showComparison && this.historicalChartData.length > 0) {\n        return this.yearOverYearChangePercent.toFixed(1);\n      }\n      return (this.changePercent || 12.2).toFixed(1);\n    },\n    \n    /**\n     * Calcula la ruta SVG para la línea del gráfico usando curvas suavizadas\n     */\n    linePath() {\n      if (!this.filteredChartData.length || !this.chartWidth || !this.chartHeight) return '';\n      \n      const { maxValue } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      \n      // Crear puntos para la curva\n      const points = this.filteredChartData.map((point, index) => {\n        const x = (index / (this.filteredChartData.length - 1)) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\n        return [x, y];\n      });\n      \n      // Generar la curva suavizada usando curvas de Bézier\n      return points.reduce((path, point, i) => {\n        if (i === 0) {\n          return `M ${point[0]},${point[1]}`;\n        }\n        \n        // Calcular los puntos de control para la curva\n        const prev = points[i - 1];\n        const curr = point;\n        \n        // Calcular puntos de control para curva suave\n        const controlPoint1 = [\n          prev[0] + (curr[0] - prev[0]) * 0.5,\n          prev[1]\n        ];\n        const controlPoint2 = [\n          curr[0] - (curr[0] - prev[0]) * 0.5,\n          curr[1]\n        ];\n        \n        return `${path} C ${controlPoint1[0]},${controlPoint1[1]} ${controlPoint2[0]},${controlPoint2[1]} ${curr[0]},${curr[1]}`;\n      }, '');\n    },\n    \n    /**\n     * Calcula la ruta SVG para la línea de comparación del año anterior usando curvas suavizadas\n     */\n    comparisonLinePath() {\n      if (!this.showComparison || !this.filteredHistoricalChartData.length || !this.chartWidth || !this.chartHeight) return '';\n      \n      const { maxValue } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      \n      // Crear puntos para la curva de comparación\n      const points = this.filteredHistoricalChartData.map((point, index) => {\n        const x = (index / (this.filteredHistoricalChartData.length - 1)) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\n        return [x, y];\n      });\n      \n      // Generar la curva suavizada usando curvas de Bézier\n      return points.reduce((path, point, i) => {\n        if (i === 0) {\n          return `M ${point[0]},${point[1]}`;\n        }\n        \n        const prev = points[i - 1];\n        const curr = point;\n        \n        const controlPoint1 = [\n          prev[0] + (curr[0] - prev[0]) * 0.5,\n          prev[1]\n        ];\n        const controlPoint2 = [\n          curr[0] - (curr[0] - prev[0]) * 0.5,\n          curr[1]\n        ];\n        \n        return `${path} C ${controlPoint1[0]},${controlPoint1[1]} ${controlPoint2[0]},${controlPoint2[1]} ${curr[0]},${curr[1]}`;\n      }, '');\n    },\n    \n    /**\n     * Calcula la ruta SVG para el área bajo la línea usando curvas suavizadas\n     */\n    areaPath() {\n      if (!this.filteredChartData.length || !this.chartWidth || !this.chartHeight) return '';\n      \n      const { maxValue } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      \n      // Crear puntos para la curva\n      const points = this.filteredChartData.map((point, index) => {\n        const x = (index / (this.filteredChartData.length - 1)) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\n        return [x, y];\n      });\n      \n      // Generar la curva suavizada con área\n      const curvePath = points.reduce((path, point, i) => {\n        if (i === 0) {\n          return `M ${point[0]},${point[1]}`;\n        }\n        \n        const prev = points[i - 1];\n        const curr = point;\n        \n        const controlPoint1 = [\n          prev[0] + (curr[0] - prev[0]) * 0.5,\n          prev[1]\n        ];\n        const controlPoint2 = [\n          curr[0] - (curr[0] - prev[0]) * 0.5,\n          curr[1]\n        ];\n        \n        return `${path} C ${controlPoint1[0]},${controlPoint1[1]} ${controlPoint2[0]},${controlPoint2[1]} ${curr[0]},${curr[1]}`;\n      }, '');\n      \n      // Cerrar el path para crear el área\n      return `${curvePath} L${availableWidth},${this.chartHeight - paddingBottom} L0,${this.chartHeight - paddingBottom} Z`;\n    },\n    \n    /**\n     * Calcula todos los puntos de datos para determinar el punto exacto a mostrar en cada posición\n     */\n    dataPoints() {\n      if (!this.filteredChartData.length || !this.chartWidth || !this.chartHeight) return [];\n      \n      const { maxValue } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      \n      return this.filteredChartData.map((point, index) => {\n        const x = (index / (this.filteredChartData.length - 1)) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\n        \n        return {\n          x,\n          y,\n          month: point.month,\n          year: point.year,\n          value: point.revenue,\n          index,\n          type: 'current'\n        };\n      });\n    },\n    \n    /**\n     * Calcula los puntos de datos para el año anterior\n     */\n    historicalDataPoints() {\n      if (!this.showComparison || !this.filteredHistoricalChartData.length || !this.chartWidth || !this.chartHeight) return [];\n      \n      const { maxValue } = this.calculateDataRange();\n      const paddingBottom = 20;\n      const paddingTop = 10;\n      const paddingRight = 10;\n      const availableHeight = this.chartHeight - paddingBottom - paddingTop;\n      const availableWidth = this.chartWidth - paddingRight;\n      \n      return this.filteredHistoricalChartData.map((point, index) => {\n        const x = (index / (this.filteredHistoricalChartData.length - 1)) * availableWidth;\n        const normalizedValue = point.revenue / maxValue;\n        const y = this.chartHeight - paddingBottom - (normalizedValue * availableHeight);\n        \n        return {\n          x,\n          y,\n          month: point.month,\n          year: point.year,\n          value: point.revenue,\n          index,\n          type: 'historical'\n        };\n      });\n    },\n    \n    /**\n     * Obtiene la información del punto actual seleccionado\n     */\n    currentPoint() {\n      if (!this.dataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.dataPoints.length) \n        return null;\n      \n      // Siempre devolvemos el punto actual\n      return this.dataPoints[this.currentMonthIndex];\n    },\n    \n    /**\n     * Calcula el valor acumulado hasta el punto actual\n     */\n    currentPointAccumulated() {\n      if (!this.filteredChartData.length || this.currentMonthIndex < 0) return 0;\n      \n      let sum = 0;\n      for (let i = 0; i <= this.currentMonthIndex; i++) {\n        sum += this.filteredChartData[i].revenue;\n      }\n      \n      return sum;\n    },\n    \n    /**\n     * Calcula la diferencia entre el punto actual y el mismo punto del año anterior\n     */\n    currentPointYearOverYearChange() {\n      if (!this.currentPoint || !this.showComparison || \n          this.currentMonthIndex < 0 || this.currentMonthIndex >= this.filteredChartData.length ||\n          this.currentMonthIndex >= this.filteredHistoricalChartData.length) {\n        return null;\n      }\n      \n      const currentValue = this.filteredChartData[this.currentMonthIndex].revenue;\n      const historicalValue = this.filteredHistoricalChartData[this.currentMonthIndex].revenue;\n      \n      return {\n        amount: currentValue - historicalValue,\n        percent: historicalValue ? ((currentValue - historicalValue) / historicalValue) * 100 : 0\n      };\n    },\n    \n    /**\n     * Estilo para la posición del tooltip basado en la posición del mouse\n     */\n    tooltipStyle() {\n      // Calcular si el tooltip debe aparecer a la izquierda o derecha del cursor\n      // para evitar que se salga de los bordes\n      const tooltipWidth = 180; // Aumentado para incluir la comparación\n      const tooltipHeight = this.showComparison ? 140 : 80; // Altura aumentada para incluir la comparación\n      const offset = 15; // Distancia del cursor al tooltip\n      \n      let left = this.mouseX + offset;\n      let top = this.mouseY - tooltipHeight / 2;\n      \n      // Evitar que se salga por el lado derecho\n      if (left + tooltipWidth > this.chartWidth) {\n        left = this.mouseX - tooltipWidth - offset;\n      }\n      \n      // Evitar que se salga por arriba\n      if (top < 0) {\n        top = 10;\n      }\n      \n      // Evitar que se salga por abajo\n      if (top + tooltipHeight > this.chartHeight) {\n        top = this.chartHeight - tooltipHeight - 10;\n      }\n      \n      return {\n        left: `${left}px`,\n        top: `${top}px`\n      };\n    },\n    \n    /**\n     * Calcula dinámicamente las etiquetas del eje Y basándose en los datos reales\n     */\n    yAxisLabels() {\n      const { maxValue } = this.calculateDataRange();\n      const labels = [];\n      \n      // Si no hay datos, retornar array vacío\n      if (maxValue <= 0) return [];\n      \n      // Encontrar un valor máximo redondeado adecuado para el eje Y\n      let roundedMax = this.getRoundedMax(maxValue);\n      \n      // Calcular el incremento entre etiquetas\n      const increment = roundedMax / (this.yAxisLabelsCount - 1);\n      \n      // Generar las etiquetas del eje Y\n      for (let i = 0; i < this.yAxisLabelsCount; i++) {\n        const value = i * increment;\n        labels.push(this.formatAxisLabel(value));\n      }\n      \n      // Regresar las etiquetas en orden de mayor a menor (para que coincidan con el dibujo)\n      return labels.reverse();\n    },\n    \n    /**\n     * Color para la cuadrícula basado en el tema\n     */\n    gridColor() {\n      return this.isDarkTheme ? '#ffffff' : '#000000';\n    },\n    \n    /**\n     * Obtiene la etiqueta del período seleccionado\n     */\n    selectedPeriodLabel() {\n      const period = this.availablePeriods.find(p => p.value === this.selectedPeriod);\n      return period ? period.label : 'Últimos 12 meses';\n    },\n\n    /**\n     * Filtra los datos según el período seleccionado\n     */\n    filteredChartData() {\n      const data = [...this.chartData];\n      \n      switch (this.selectedPeriod) {\n        case '1d':\n          return this.filterLastDays(data, 1);\n        case '3d':\n          return this.filterLastDays(data, 3);\n        case '7d':\n          return this.filterLastDays(data, 7);\n        case '1m':\n          return this.filterLastMonths(data, 1);\n        case '3m':\n          return this.filterLastMonths(data, 3);\n        case '6m':\n          return this.filterLastMonths(data, 6);\n        case '9m':\n          return this.filterLastMonths(data, 9);\n        default:\n          return data;\n      }\n    },\n\n    /**\n     * Filtra los datos históricos según el período seleccionado\n     */\n    filteredHistoricalChartData() {\n      if (!this.showComparison) return [];\n      \n      const data = [...this.historicalChartData];\n      \n      switch (this.selectedPeriod) {\n        case '1d':\n          return this.filterLastDays(data, 1);\n        case '3d':\n          return this.filterLastDays(data, 3);\n        case '7d':\n          return this.filterLastDays(data, 7);\n        case '1m':\n          return this.filterLastMonths(data, 1);\n        case '3m':\n          return this.filterLastMonths(data, 3);\n        case '6m':\n          return this.filterLastMonths(data, 6);\n        case '9m':\n          return this.filterLastMonths(data, 9);\n        default:\n          return data;\n      }\n    }\n  },\n  \n  mounted() {\n    this.updateChartDimensions();\n    window.addEventListener('resize', this.handleResize);\n    this.initDefaultHistoricalData();\n  },\n  \n  beforeUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  \n  watch: {\n    // Observar cambios en la visualización de la comparación\n    showComparison(newValue) {\n      // Emitir evento cuando cambia el modo de comparación\n      this.$emit('comparison-changed', newValue);\n    }\n  },\n  \n  methods: {\n    /**\n     * Maneja el evento de redimensionamiento de la ventana\n     */\n    handleResize() {\n      this.windowWidth = window.innerWidth;\n      this.updateChartDimensions();\n    },\n    \n    /**\n     * Inicializa los datos históricos por defecto\n     */\n    initDefaultHistoricalData() {\n      if (this.autoGenerateHistorical && this.defaultHistoricalData.length === 0) {\n        this.defaultHistoricalData = this.defaultData.map(item => ({\n          month: item.month,\n          year: item.year - 1,\n          revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\n        }));\n      }\n    },\n    \n    /**\n     * Genera datos históricos basados en los datos actuales\n     */\n    generateHistoricalData() {\n      return this.filteredChartData.map(item => ({\n        month: item.month,\n        year: item.year - 1, // Año anterior\n        revenue: Math.floor(item.revenue * (0.7 + Math.random() * 0.4)) // 70-110% del valor actual\n      }));\n    },\n    \n    /**\n     * Asegura que todos los elementos de datos tengan un año\n     */\n    ensureYearInData(data) {\n      return data.map(item => {\n        if (!item.year) {\n          return {\n            ...item,\n            year: new Date().getFullYear() // Añadir el año actual si no existe\n          };\n        }\n        return item;\n      });\n    },\n    \n    /**\n     * Calcula el rango de valores para los dos conjuntos de datos\n     */\n    calculateDataRange() {\n      let dataToCompare = [...this.filteredChartData];\n      \n      if (this.showComparison && this.filteredHistoricalChartData.length > 0) {\n        dataToCompare = [...dataToCompare, ...this.filteredHistoricalChartData];\n      }\n      \n      // Obtener el valor máximo real de los datos\n      let maxValue = Math.max(...dataToCompare.map(d => d.revenue));\n      \n      // Usar el valor máximo redondeado para asegurar que coincida con las etiquetas del eje Y\n      maxValue = this.getRoundedMax(maxValue);\n      \n      return { maxValue };\n    },\n    \n    /**\n     * Actualiza las dimensiones del gráfico en función del contenedor\n     */\n    updateChartDimensions() {\n      if (this.$refs.chartContainer) {\n        this.chartWidth = this.$refs.chartContainer.clientWidth;\n        this.chartHeight = this.$refs.chartContainer.clientHeight;\n      }\n    },\n    \n    /**\n     * Gestiona el movimiento del mouse sobre el gráfico\n     * Usa un algoritmo de \"snap to nearest point\" mejorado para evitar cambios erráticos\n     */\n    handleMouseMove(event) {\n      if (!this.filteredChartData.length || !this.dataPoints.length) return;\n      \n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\n      const mouseX = event.clientX - chartRect.left;\n      const mouseY = event.clientY - chartRect.top;\n      \n      // Solo actualizar mouseY, mouseX se actualizará en updateActivePointFromPosition\n      this.mouseY = mouseY;\n      \n      // Encuentra el punto más cercano al mouse\n      this.updateActivePointFromPosition(mouseX);\n      this.mouseOver = true;\n    },\n    \n    /**\n     * Gestiona el movimiento táctil sobre el gráfico (para dispositivos móviles)\n     */\n    handleTouchMove(event) {\n      if (!this.filteredChartData.length || !this.dataPoints.length || !event.touches[0]) return;\n      \n      const chartRect = this.$refs.chartContainer.getBoundingClientRect();\n      const touchX = event.touches[0].clientX - chartRect.left;\n      const touchY = event.touches[0].clientY - chartRect.top;\n      \n      // Solo actualizar mouseY, mouseX se actualizará en updateActivePointFromPosition\n      this.mouseY = touchY;\n      \n      this.updateActivePointFromPosition(touchX);\n      this.mouseOver = true;\n      \n      // Prevenir el desplazamiento de la página durante el uso del gráfico\n      event.preventDefault();\n    },\n    \n    /**\n     * Actualiza el punto activo basado en la posición X del mouse/touch\n     * Algoritmo mejorado para prevenir saltos y movimientos bruscos\n     */\n    updateActivePointFromPosition(posX) {\n      // Asegurarse de que posX esté dentro de los límites del gráfico\n      posX = Math.min(Math.max(0, posX), this.chartWidth);\n      \n      if (this.dataPoints.length === 0) return;\n      \n      // Calcular el ancho de cada segmento\n      const segmentWidth = this.chartWidth / (this.dataPoints.length - 1);\n      \n      // Encontrar el índice del punto más cercano basado en la posición X\n      const nearestIndex = Math.round(posX / segmentWidth);\n      \n      // Limitar el índice al rango válido\n      const boundedIndex = Math.min(Math.max(0, nearestIndex), this.dataPoints.length - 1);\n      \n      // Actualiza el índice sólo si es diferente\n      if (this.currentMonthIndex !== boundedIndex) {\n        this.currentMonthIndex = boundedIndex;\n        this.mouseX = this.dataPoints[boundedIndex].x;\n      }\n    },\n    \n    /**\n     * Restablece la visualización cuando el mouse deja el gráfico\n     */\n    resetHighlight() {\n      this.mouseOver = false;\n    },\n    \n    /**\n     * Formatea un número grande para mostrar (1M, 1B, etc.)\n     */\n    formatLargeNumber(value) {\n      if (value >= 1000000000) {\n        return `${(value / 1000000000).toFixed(3).replace(/\\.?0+$/, '')}B`;\n      } else if (value >= 1000000) {\n        return `${(value / 1000000).toFixed(3).replace(/\\.?0+$/, '')}M`;\n      } else if (value >= 1000) {\n        return `${(value / 1000).toFixed(1).replace(/\\.0$/, '')}K`;\n      }\n      return value.toString();\n    },\n    \n    /**\n     * Formatea un valor monetario con separadores de miles\n     */\n    formatCurrency(value) {\n      return new Intl.NumberFormat('es-ES', {\n        maximumFractionDigits: 0\n      }).format(value);\n    },\n    \n    /**\n     * Formatea un valor de porcentaje\n     */\n    formatPercent(value) {\n      return `${value > 0 ? '+' : ''}${value.toFixed(1)}%`;\n    },\n    \n    /**\n     * Obtiene el valor del punto histórico en la posición actual\n     */\n    getHistoricalValueAtCurrentIndex() {\n      if (!this.showComparison || !this.historicalDataPoints.length || this.currentMonthIndex < 0 || this.currentMonthIndex >= this.historicalDataPoints.length) return null;\n      \n      return this.historicalDataPoints[this.currentMonthIndex].value;\n    },\n    \n    /**\n     * Calcula un valor máximo redondeado apropiado para las etiquetas del eje Y\n     */\n    getRoundedMax(maxValue) {\n      // Determinar la magnitud del valor\n      const magnitude = Math.pow(10, Math.floor(Math.log10(maxValue)));\n      \n      // Redondear hacia arriba para obtener un valor \"limpio\"\n      let roundedMax = Math.ceil(maxValue / magnitude) * magnitude;\n      \n      // Si el valor redondeado es mucho mayor que el máximo real, ajustar\n      if (roundedMax > maxValue * 1.5) {\n        roundedMax = Math.ceil(maxValue / (magnitude / 2)) * (magnitude / 2);\n      }\n      \n      return roundedMax;\n    },\n    \n    /**\n     * Formatea las etiquetas del eje Y para que sean legibles\n     */\n    formatAxisLabel(value) {\n      return this.formatLargeNumber(value);\n    },\n    \n    /**\n     * Abre/cierra el selector de períodos\n     */\n    togglePeriodSelector() {\n      this.showPeriodSelector = !this.showPeriodSelector;\n    },\n\n    /**\n     * Cierra el selector de períodos\n     */\n    closePeriodSelector() {\n      this.showPeriodSelector = false;\n    },\n\n    /**\n     * Selecciona un nuevo período\n     */\n    selectPeriod(period) {\n      this.selectedPeriod = period;\n      this.showPeriodSelector = false;\n      this.$emit('period-changed', period);\n    },\n\n    /**\n     * Filtra los datos para mostrar los últimos X días\n     */\n    filterLastDays(data, days) {\n      const now = new Date();\n      const startDate = new Date(now.setDate(now.getDate() - days));\n      return data.filter(item => {\n        const itemDate = new Date(item.year, this.monthLabels.indexOf(item.month), 1);\n        return itemDate >= startDate;\n      });\n    },\n\n    /**\n     * Filtra los datos para mostrar los últimos X meses\n     */\n    filterLastMonths(data, months) {\n      const now = new Date();\n      const startDate = new Date(now.setMonth(now.getMonth() - months));\n      return data.filter(item => {\n        const itemDate = new Date(item.year, this.monthLabels.indexOf(item.month), 1);\n        return itemDate >= startDate;\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Definir variables CSS para los colores de la cuadrícula */\n:root {\n  --grid-color-dark: rgba(255, 255, 255, 0.1);\n  --grid-color-light: rgba(0, 0, 0, 0.1);\n}\n\n.revenue-chart-container {\n  background-color: var(--bg-secondary);\n  border-radius: 10px;\n  padding: 16px;\n  height: 350px;\n  display: flex;\n  flex-direction: column;\n  color: var(--text-primary);\n  position: relative;\n  background-color: var(--bg-secondary, #1a1a1a);\n  color: var(--text-primary, #efefef);\n  /* Eliminamos overflow: hidden para permitir que el menú sea visible */\n}\n\n.chart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 12px;\n}\n\n.chart-title-section {\n  display: flex;\n  flex-direction: column;\n}\n\n.chart-title {\n  font-size: 0.9rem;\n  font-weight: 600;\n  margin: 0 0 8px 0;\n  opacity: 0.9;\n  /* Efecto de texto 3D sutil */\n  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);\n}\n\n.revenue-amount {\n  font-size: 1.8rem;\n  font-weight: 700;\n  margin-bottom: 4px;\n  letter-spacing: -0.5px;\n  /* Efecto de texto 3D más pronunciado */\n  text-shadow: \n    0 1px 1px rgba(0, 0, 0, 0.1),\n    0 2px 2px rgba(0, 0, 0, 0.05);\n}\n\n.change-indicator {\n  display: flex;\n  align-items: center;\n  font-size: 0.8rem;\n}\n\n.change-value {\n  font-weight: 600;\n}\n\n.positive {\n  color: #27ae60; /* Verde que coincide con SalesCard */\n}\n\n.negative {\n  color: #e74c3c; /* Rojo que coincide con SalesCard */\n}\n\n.period {\n  opacity: 0.7;\n  margin-left: 4px;\n}\n\n.period-selector {\n  margin-left: auto;\n}\n\n.controls {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 8px;\n}\n\n.comparison-toggle {\n  display: flex;\n  align-items: center;\n  font-size: 0.75rem;\n  cursor: pointer;\n  opacity: 0.9;\n  transition: opacity 0.3s ease;\n}\n\n.comparison-toggle:hover {\n  opacity: 1;\n}\n\n.comparison-toggle input[type=\"checkbox\"] {\n  position: relative;\n  appearance: none;\n  width: 34px;\n  height: 16px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n  margin-right: 8px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.comparison-toggle input[type=\"checkbox\"]::before {\n  content: '';\n  position: absolute;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  top: 1px;\n  left: 1px;\n  background: #444;\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n}\n\n.comparison-toggle input[type=\"checkbox\"]:checked {\n  background: rgba(44, 187, 168, 0.5);\n}\n\n.comparison-toggle input[type=\"checkbox\"]:checked::before {\n  left: 19px;\n  background: #2dc6af;\n}\n\n.toggle-label {\n  white-space: nowrap;\n}\n\n.period-button {\n  display: flex;\n  align-items: center;\n  background: none;\n  border: none;\n  color: inherit;\n  font-size: 0.8rem;\n  padding: 4px 8px;\n  border-radius: 6px;\n  cursor: pointer;\n  opacity: 0.8;\n  transition: opacity 0.3s, background-color 0.3s;\n}\n\n.period-button:hover, \n.period-button.active {\n  background-color: rgba(255, 255, 255, 0.1);\n  opacity: 1;\n}\n\n.chart-content {\n  flex: 1;\n  display: flex;\n  position: relative;\n  /* Añadimos overflow solo para el contenido del gráfico */\n  overflow: hidden;\n}\n\n.chart-axes {\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 20px; /* Espacio para el eje X */\n  width: 50px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 10px 0;\n}\n\n.y-axis {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.axis-label {\n  font-size: 0.65rem;\n  color: rgba(255, 255, 255, 0.6);\n  text-align: left;\n}\n\n/* Ajuste para el modo claro - etiquetas del eje Y */\n:root:not([data-theme='dark']) .axis-label {\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.chart-graphic {\n  flex: 1;\n  margin-left: 50px; /* Ancho del eje Y */\n  position: relative;\n  height: 100%;\n  cursor: crosshair; /* Cambiar cursor al pasar el mouse sobre el gráfico */\n  padding-bottom: 5px; /* Dar más espacio en la parte inferior */\n}\n\n.chart-svg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: calc(100% - 20px); /* Restar altura del eje X por defecto */\n  width: calc(100% - 10px); /* Añadir un pequeño margen a la derecha para mostrar diciembre */\n}\n\n.x-axis {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  padding: 0 5px; /* Pequeño padding para evitar que las etiquetas toquen los bordes */\n  width: calc(100% - 10px); /* Hacer que el ancho coincida con el SVG */\n}\n\n.x-label {\n  transform: translateX(-50%);\n  font-size: 0.7rem;\n  font-weight: 500;\n  position: absolute;\n  text-align: center;\n}\n\n/* Ajuste para el modo claro - etiquetas del eje X */\n:root:not([data-theme='dark']) .x-label {\n  color: rgba(0, 0, 0, 0.6);\n}\n\n/* Ajuste especial para el primer y último mes */\n.x-label:first-child {\n  left: 0 !important; /* Forzar el primer mes al inicio */\n  transform: translateX(0); /* El primer mes se alinea al inicio */\n}\n\n.x-label:last-child {\n  left: calc(100% - 10px) !important; /* Forzar el último mes al final */\n  transform: translateX(-100%); /* El último mes se alinea al final */\n}\n\n.x-label.active {\n  font-weight: 600;\n}\n\n/* Ajuste adicional para noviembre y diciembre para evitar superposición */\n.x-label:nth-last-child(1), /* Dic */\n.x-label:nth-last-child(2) { /* Nov */\n  margin-left: -2px; /* Leve separación entre Nov y Dic */\n}\n\n/* Ajustar altura del eje X para acomodar las etiquetas rotadas */\n.x-axis {\n  height: 35px;\n  padding-bottom: 5px;\n}\n\n/* Los colores activos de los ejes X se definirán dinámicamente basados en chartLineColor */\n.positive .x-label.active {\n  color: #27ae60;\n}\n\n.negative .x-label.active {\n  color: #e74c3c;\n}\n\n/* Ajuste para el modo claro - etiquetas activas */\n:root:not([data-theme='dark']) .positive .x-label.active {\n  color: #1e8449; /* Verde más oscuro para mejor visibilidad en modo claro */\n}\n\n:root:not([data-theme='dark']) .negative .x-label.active {\n  color: #c0392b; /* Rojo más oscuro para mejor visibilidad en modo claro */\n}\n\n/* Estilos para los puntos de datos */\n.hover-point {\n  filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.3));\n  transition: transform 0.1s ease;\n}\n\n/* Ajustar el color del borde del círculo en modo claro */\n:root:not([data-theme='dark']) .chart-svg circle.hover-point {\n  stroke: #ffffff; /* Borde blanco en modo claro */\n  filter: drop-shadow(0 0 4px rgba(0, 0, 0, 0.5)); /* Sombra más pronunciada */\n}\n\n/* Ajustar el color de la línea vertical en modo claro */\n:root:not([data-theme='dark']) .chart-svg line {\n  stroke: var(--text-primary, #333) !important; /* Asegurar que la línea sea visible */\n  stroke-width: 1px; /* Líneas más finas en móvil */\n}\n\n/* Nuevo tooltip que sigue al cursor */\n.tooltip {\n  position: absolute;\n  z-index: 100;\n  background: var(--bg-secondary, #222);\n  color: var(--text-primary, #efefef);\n  border-radius: 6px;\n  padding: 6px 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  pointer-events: none;\n  width: auto;\n  min-width: 100px;\n  max-width: 220px;\n  opacity: 0;\n  animation: tooltipFade 0.1s ease-out forwards;\n}\n\n.tooltip::before {\n  content: '';\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: var(--bg-secondary, #222);\n  transform: rotate(45deg);\n  left: -4px;\n  top: 50%;\n  margin-top: -4px;\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Ajustes para el modo claro */\n:root:not([data-theme='dark']) .tooltip {\n  background: var(--bg-secondary, #fff);\n  color: var(--text-primary, #333);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08), 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n:root:not([data-theme='dark']) .tooltip::before {\n  background: var(--bg-secondary, #fff);\n  border-left: 1px solid rgba(0, 0, 0, 0.1);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n:root:not([data-theme='dark']) .tooltip-accumulated,\n:root:not([data-theme='dark']) .comparison-label {\n  color: var(--text-secondary, rgba(0, 0, 0, 0.6));\n}\n\n:root:not([data-theme='dark']) .tooltip-comparison {\n  border-top: 1px dashed var(--border-color, rgba(0, 0, 0, 0.1));\n}\n\n.tooltip-title {\n  font-size: 0.8rem;\n  font-weight: 600;\n  margin-bottom: 5px;\n  text-align: left;\n  color: var(--text-primary, #efefef);\n}\n\n.tooltip-value {\n  font-size: 0.9rem;\n  font-weight: 700;\n  margin-bottom: 3px;\n  text-align: left;\n}\n\n/* Aplica color basado en el valor */\n.positive .tooltip-value, \n.comparison-difference.positive {\n  color: #27ae60;\n}\n\n.negative .tooltip-value,\n.comparison-difference.negative {\n  color: #e74c3c;\n}\n\n/* Aseguramos que los colores positivo/negativo sean visibles en ambos modos */\n:root:not([data-theme='dark']) .positive .tooltip-value,\n:root:not([data-theme='dark']) .comparison-difference.positive {\n  color: #1e8449;\n}\n\n:root:not([data-theme='dark']) .negative .tooltip-value,\n:root:not([data-theme='dark']) .comparison-difference.negative {\n  color: #c0392b;\n}\n\n.tooltip-accumulated {\n  font-size: 0.7rem;\n  color: var(--text-secondary, rgba(255, 255, 255, 0.7));\n  text-align: left;\n  margin-bottom: 5px;\n}\n\n/* Estilos para la comparación de año a año */\n.tooltip-comparison {\n  margin-top: 5px;\n  padding-top: 5px;\n  border-top: 1px dashed var(--border-color, rgba(255, 255, 255, 0.15));\n}\n\n.comparison-label {\n  font-size: 0.7rem;\n  color: var(--text-secondary, rgba(255, 255, 255, 0.7));\n  text-align: left;\n  margin-bottom: 2px;\n}\n\n.comparison-value {\n  font-size: 0.8rem;\n  font-weight: 600;\n  text-align: left;\n  margin-bottom: 2px;\n  color: var(--text-primary, #efefef);\n}\n\n.comparison-difference {\n  font-size: 0.7rem;\n  font-weight: 600;\n  text-align: left;\n}\n\n@keyframes tooltipFade {\n  from { \n    opacity: 0;\n  }\n  to { \n    opacity: 1;\n  }\n}\n\n/* Eliminamos los estilos redundantes */\n.interaction-overlay {\n  cursor: crosshair;\n}\n\n/* Ajustes para móviles */\n@media (max-width: 768px) {\n  .revenue-chart-container {\n    height: 300px;\n    padding: 12px;\n  }\n  \n  .revenue-amount {\n    font-size: 1.6rem;\n  }\n  \n  .chart-title {\n    font-size: 0.85rem;\n  }\n  \n  /* Ajustes para mejorar la experiencia táctil en móviles */\n  .chart-graphic {\n    cursor: pointer;\n    padding-bottom: 25px; /* Más espacio en la parte inferior para las etiquetas */\n  }\n  \n  /* Ajustando el tooltip para móviles */\n  .tooltip {\n    padding: 6px 10px;\n    min-width: 100px;\n  }\n  \n  .tooltip-title {\n    font-size: 0.8rem;\n  }\n  \n  .tooltip-value {\n    font-size: 0.9rem;\n  }\n  \n  .tooltip-accumulated,\n  .comparison-label,\n  .comparison-value,\n  .comparison-difference {\n    font-size: 0.7rem;\n  }\n  \n  /* Ajustar controles y toggle para móviles */\n  .controls {\n    flex-direction: column;\n    gap: 5px;\n  }\n  \n  .comparison-toggle {\n    font-size: 0.7rem;\n  }\n  \n  .comparison-toggle input[type=\"checkbox\"] {\n    width: 30px;\n    height: 14px;\n    margin-right: 6px;\n  }\n  \n  .comparison-toggle input[type=\"checkbox\"]::before {\n    width: 12px;\n    height: 12px;\n  }\n  \n  .comparison-toggle input[type=\"checkbox\"]:checked::before {\n    left: 17px;\n  }\n  \n  /* Base para todos los meses en móvil - estilo diagonal unificado */\n  .x-label {\n    transform: translateX(-50%) rotate(-35deg) !important;\n    transform-origin: center top !important;\n    font-size: 0.7rem;\n    top: auto;\n    bottom: 5px; /* Separar un poco del borde inferior */\n    height: 20px;\n    line-height: 1;\n    margin-top: 0;\n    white-space: nowrap;\n    color: rgba(255, 255, 255, 0.6);\n  }\n  \n  /* Ajustar la altura del eje X y su posición */\n  .x-axis {\n    height: 30px; /* Ajustar altura para etiquetas en la parte inferior */\n    padding-bottom: 5px; /* Añadir padding en la parte inferior */\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n  \n  /* Ajustar el tamaño del SVG */\n  .chart-svg {\n    height: calc(100% - 30px); /* Ajustar a la nueva altura del eje X */\n  }\n  \n  /* Líneas más finas en móvil */\n  .chart-svg line {\n    stroke-width: 1px !important;\n  }\n  \n  /* Ajuste para el modo claro en móvil */\n  :root:not([data-theme='dark']) .x-label {\n    color: rgba(0, 0, 0, 0.6);\n  }\n  \n  /* Posiciones específicas para cada mes */\n  .x-label.month-0 { left: 3% !important; }\n  .x-label.month-1 { left: 11% !important; }\n  .x-label.month-2 { left: 19% !important; }\n  .x-label.month-3 { left: 27% !important; }\n  .x-label.month-4 { left: 35% !important; }\n  .x-label.month-5 { left: 43% !important; }\n  .x-label.month-6 { left: 51% !important; }\n  .x-label.month-7 { left: 60% !important; }\n  .x-label.month-8 { left: 69% !important; }\n  .x-label.month-9 { left: 78% !important; }\n  .x-label.month-10 { left: 87% !important; }\n  .x-label.month-11 { left: 97% !important; }\n}\n\n/* Ajustes para los elementos SVG en modo claro */\n:root:not([data-theme='dark']) .chart-svg path[fill=\"url(#areaGradient)\"] {\n  opacity: 0.7; /* Aumentar la opacidad del área en modo claro */\n}\n\n:root:not([data-theme='dark']) .chart-svg path[stroke] {\n  stroke-width: 2.5px; /* Líneas ligeramente más gruesas en modo claro */\n}\n\n/* Ajustes para el contenedor del gráfico en modo claro */\n:root:not([data-theme='dark']) .chart-content {\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n/* Ajustes para el contenedor del eje Y en modo claro */\n:root:not([data-theme='dark']) .chart-axes {\n  border-right: 1px dashed rgba(0, 0, 0, 0.1);\n}\n\n/* Posicionamiento base para las etiquetas de meses */\n.x-label.month-0 { left: 0%; transform: translateX(0); } /* Enero */\n.x-label.month-1 { left: 9.09%; } /* Febrero */\n.x-label.month-2 { left: 18.18%; } /* Marzo */\n.x-label.month-3 { left: 27.27%; } /* Abril */\n.x-label.month-4 { left: 36.36%; } /* Mayo */\n.x-label.month-5 { left: 45.45%; } /* Junio */\n.x-label.month-6 { left: 54.54%; } /* Julio */\n.x-label.month-7 { left: 63.63%; } /* Agosto */\n.x-label.month-8 { left: 72.72%; } /* Septiembre */\n.x-label.month-9 { left: 81.81%; } /* Octubre */\n.x-label.month-10 { left: 90.90%; } /* Noviembre */\n.x-label.month-11 { left: 100%; transform: translateX(-100%); } /* Diciembre */\n\n/* Estilos mejorados para el punto indicador */\n.hover-point-group {\n  animation: pointAppear 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  transform-origin: center center;\n}\n\n.point-glow {\n  animation: glowPulse 2s ease-in-out infinite;\n  filter: blur(3px);\n}\n\n.point-ring {\n  animation: ringPulse 2s ease-in-out infinite;\n}\n\n.point-center {\n  filter: drop-shadow(0 0 6px rgba(0, 0, 0, 0.3));\n  animation: centerPulse 2s ease-in-out infinite;\n}\n\n@keyframes pointAppear {\n  from {\n    transform: scale(0);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes glowPulse {\n  0% {\n    opacity: 0.15;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 0.25;\n    transform: scale(1.1);\n  }\n  100% {\n    opacity: 0.15;\n    transform: scale(1);\n  }\n}\n\n@keyframes ringPulse {\n  0% {\n    opacity: 0.3;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 0.4;\n    transform: scale(1.05);\n  }\n  100% {\n    opacity: 0.3;\n    transform: scale(1);\n  }\n}\n\n@keyframes centerPulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n/* Ajustes para modo claro */\n:root:not([data-theme='dark']) .point-center {\n  stroke: #ffffff;\n  filter: drop-shadow(0 0 8px rgba(0, 0, 0, 0.4));\n}\n\n/* Ajustes para móvil */\n@media (max-width: 768px) {\n  .point-glow {\n    filter: blur(2px);\n  }\n  \n  .point-center {\n    filter: drop-shadow(0 0 4px rgba(0, 0, 0, 0.3));\n  }\n}\n\n/* Ajustar el patrón de la cuadrícula para ambos modos */\n:root[data-theme='dark'] .chart-svg pattern path {\n  stroke: #ffffff;\n  stroke-opacity: 0.1;\n}\n\n:root:not([data-theme='dark']) .chart-svg pattern path {\n  stroke: #000000;\n  stroke-opacity: 0.1;\n}\n\n/* Asegurar que el rectángulo de la cuadrícula sea visible en ambos modos */\n.chart-svg rect[fill=\"url(#grid)\"] {\n  opacity: 1;\n}\n\n.period-dropdown {\n  position: relative;\n  display: inline-block;\n  z-index: 1000;\n}\n\n.period-options {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  z-index: 1000;\n  margin-top: 4px;\n  min-width: 160px;\n  overflow-y: visible;\n  animation: fadeIn 0.2s ease-out;\n}\n\n.period-option {\n  display: block;\n  width: 100%;\n  padding: 8px 12px;\n  text-align: left;\n  background: none;\n  border: none;\n  color: var(--text-primary);\n  font-size: 0.8rem;\n  cursor: pointer;\n  transition: background-color 0.2s;\n  white-space: nowrap;\n}\n\n.period-option:hover {\n  background-color: var(--bg-hover);\n}\n\n.period-option.active {\n  background-color: var(--bg-active);\n  font-weight: 600;\n}\n\n/* Ajustes para móvil */\n@media (max-width: 768px) {\n  .mobile-overlay {\n    display: block;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    z-index: 9998;\n  }\n\n  .period-dropdown {\n    position: static;\n  }\n\n  .period-options {\n    position: fixed;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    top: auto;\n    margin: 0;\n    width: 100%;\n    max-width: none;\n    border-radius: 12px 12px 0 0;\n    z-index: 9999;\n    padding: 16px 0;\n    transform: translateY(0);\n    animation: slideUpMobile 0.3s ease-out;\n  }\n\n  .period-option {\n    padding: 16px;\n    font-size: 1rem;\n    text-align: center;\n  }\n\n  .period-option:active {\n    background-color: var(--bg-hover);\n  }\n\n  @keyframes slideUpMobile {\n    from {\n      transform: translateY(100%);\n    }\n    to {\n      transform: translateY(0);\n    }\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}