{"ast":null,"code":"/**\n * Servicio para obtener datos del dashboard\n * \n * Este servicio actúa como una capa de abstracción entre los componentes\n * y la fuente de datos. Actualmente utiliza datos de ejemplo, pero está\n * diseñado para facilitar la transición a una API real en el futuro.\n */\n\nimport apiService from './apiService';\nimport mockApi from './mockApi';\n\n// Determinar si estamos en modo desarrollo\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// Estado para almacenar datos en caché\nconst cache = {\n  dashboardData: null,\n  lastFetched: null,\n  cacheTime: 5 * 60 * 1000 // 5 minutos (en milisegundos)\n};\n\n/**\n * Servicio para obtener y gestionar datos del dashboard\n */\nexport default {\n  /**\n   * Obtener todos los datos del dashboard en una sola llamada\n   * Implementa caché para evitar llamadas innecesarias\n   */\n  async getDashboardData() {\n    // Usar caché si los datos son recientes\n    if (cache.dashboardData && cache.lastFetched && Date.now() - cache.lastFetched < cache.cacheTime) {\n      console.log('Usando datos en caché del dashboard');\n      return Promise.resolve(cache.dashboardData);\n    }\n    try {\n      let response;\n\n      // Usar API mock en desarrollo\n      if (isDevelopment) {\n        console.log('Usando API mock para datos del dashboard');\n        response = await mockApi.getDashboardOverview();\n      } else {\n        // Usar API real en producción\n        response = await apiService.get('/dashboard/overview');\n      }\n\n      // Guardar en caché\n      cache.dashboardData = response.data;\n      cache.lastFetched = Date.now();\n      return response.data;\n    } catch (error) {\n      console.error('Error cargando datos del dashboard:', error);\n      throw error;\n    }\n  },\n  /**\n   * Forzar recarga de datos (ignorar caché)\n   */\n  async refreshDashboardData() {\n    try {\n      let response;\n\n      // Usar API mock en desarrollo\n      if (isDevelopment) {\n        response = await mockApi.getDashboardOverview();\n      } else {\n        // Usar API real en producción\n        response = await apiService.get('/dashboard/overview');\n      }\n\n      // Actualizar caché\n      cache.dashboardData = response.data;\n      cache.lastFetched = Date.now();\n      return response.data;\n    } catch (error) {\n      console.error('Error actualizando datos del dashboard:', error);\n      throw error;\n    }\n  },\n  /**\n   * Obtener una sección específica de datos\n   * @param {string} section - Nombre de la sección (ej: 'ventas', 'usuarios')\n   */\n  async getSectionData(section) {\n    try {\n      // Intentar obtener del caché primero\n      const allData = await this.getDashboardData();\n      return allData[section] || null;\n    } catch (error) {\n      console.error(`Error obteniendo datos de la sección ${section}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Importar datos de ejemplo\nimport { dailySalesData, weeklySalesData, monthlySalesData, topProductsData, topCustomersData, salesByHourData, salesByDayData, salesByMonthData } from '../data/mockData';\n\n// Configuración del servicio\nconst API_BASE_URL = '/api'; // URL base para la API real (cuando se implemente)\nconst USE_MOCK_DATA = true; // Cambiar a false cuando se conecte a la API real\n\n/**\n * Obtiene las ventas del día actual\n * @returns {Promise<Object>} Datos de ventas diarias\n */\nexport async function getDailySales() {\n  if (USE_MOCK_DATA) {\n    // Simular un retraso de red para imitar una API real\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return dailySalesData;\n  } else {\n    // Código para obtener datos de la API real\n    const response = await fetch(`${API_BASE_URL}/sales/daily`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas diarias');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene las ventas de la semana actual\n * @returns {Promise<Object>} Datos de ventas semanales\n */\nexport async function getWeeklySales() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return weeklySalesData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/weekly`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas semanales');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene las ventas del mes actual\n * @returns {Promise<Object>} Datos de ventas mensuales\n */\nexport async function getMonthlySales() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return monthlySalesData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/monthly`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas mensuales');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene los productos más vendidos\n * @param {number} limit - Número máximo de productos a obtener\n * @returns {Promise<Array>} Lista de productos más vendidos\n */\nexport async function getTopProducts(limit = 5) {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return topProductsData.slice(0, limit);\n  } else {\n    const response = await fetch(`${API_BASE_URL}/products/top?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de productos más vendidos');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene los clientes principales\n * @param {number} limit - Número máximo de clientes a obtener\n * @returns {Promise<Array>} Lista de clientes principales\n */\nexport async function getTopCustomers(limit = 5) {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return topCustomersData.slice(0, limit);\n  } else {\n    const response = await fetch(`${API_BASE_URL}/customers/top?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de clientes principales');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene las ventas por hora para el día actual\n * @returns {Promise<Array>} Datos de ventas por hora\n */\nexport async function getSalesByHour() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByHourData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-hour`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por hora');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene las ventas por día para la semana actual\n * @returns {Promise<Array>} Datos de ventas por día\n */\nexport async function getSalesByDay() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByDayData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-day`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por día');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene las ventas por mes para el año actual\n * @returns {Promise<Array>} Datos de ventas por mes\n */\nexport async function getSalesByMonth() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByMonthData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-month`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por mes');\n    }\n    return await response.json();\n  }\n}","map":{"version":3,"names":["apiService","mockApi","isDevelopment","process","env","NODE_ENV","cache","dashboardData","lastFetched","cacheTime","getDashboardData","Date","now","console","log","Promise","resolve","response","getDashboardOverview","get","data","error","refreshDashboardData","getSectionData","section","allData","dailySalesData","weeklySalesData","monthlySalesData","topProductsData","topCustomersData","salesByHourData","salesByDayData","salesByMonthData","API_BASE_URL","USE_MOCK_DATA","getDailySales","setTimeout","fetch","ok","Error","json","getWeeklySales","getMonthlySales","getTopProducts","limit","slice","getTopCustomers","getSalesByHour","getSalesByDay","getSalesByMonth"],"sources":["C:/Users/Pc/Desktop/Proyectos/criwave/client/src/services/dashboardService.js"],"sourcesContent":["/**\n * Servicio para obtener datos del dashboard\n * \n * Este servicio actúa como una capa de abstracción entre los componentes\n * y la fuente de datos. Actualmente utiliza datos de ejemplo, pero está\n * diseñado para facilitar la transición a una API real en el futuro.\n */\n\nimport apiService from './apiService';\nimport mockApi from './mockApi';\n\n// Determinar si estamos en modo desarrollo\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// Estado para almacenar datos en caché\nconst cache = {\n  dashboardData: null,\n  lastFetched: null,\n  cacheTime: 5 * 60 * 1000 // 5 minutos (en milisegundos)\n};\n\n/**\n * Servicio para obtener y gestionar datos del dashboard\n */\nexport default {\n  /**\n   * Obtener todos los datos del dashboard en una sola llamada\n   * Implementa caché para evitar llamadas innecesarias\n   */\n  async getDashboardData() {\n    // Usar caché si los datos son recientes\n    if (cache.dashboardData && \n        cache.lastFetched && \n        (Date.now() - cache.lastFetched) < cache.cacheTime) {\n      console.log('Usando datos en caché del dashboard');\n      return Promise.resolve(cache.dashboardData);\n    }\n    \n    try {\n      let response;\n      \n      // Usar API mock en desarrollo\n      if (isDevelopment) {\n        console.log('Usando API mock para datos del dashboard');\n        response = await mockApi.getDashboardOverview();\n      } else {\n        // Usar API real en producción\n        response = await apiService.get('/dashboard/overview');\n      }\n      \n      // Guardar en caché\n      cache.dashboardData = response.data;\n      cache.lastFetched = Date.now();\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error cargando datos del dashboard:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Forzar recarga de datos (ignorar caché)\n   */\n  async refreshDashboardData() {\n    try {\n      let response;\n      \n      // Usar API mock en desarrollo\n      if (isDevelopment) {\n        response = await mockApi.getDashboardOverview();\n      } else {\n        // Usar API real en producción\n        response = await apiService.get('/dashboard/overview');\n      }\n      \n      // Actualizar caché\n      cache.dashboardData = response.data;\n      cache.lastFetched = Date.now();\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error actualizando datos del dashboard:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Obtener una sección específica de datos\n   * @param {string} section - Nombre de la sección (ej: 'ventas', 'usuarios')\n   */\n  async getSectionData(section) {\n    try {\n      // Intentar obtener del caché primero\n      const allData = await this.getDashboardData();\n      return allData[section] || null;\n    } catch (error) {\n      console.error(`Error obteniendo datos de la sección ${section}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Importar datos de ejemplo\nimport {\n  dailySalesData,\n  weeklySalesData,\n  monthlySalesData,\n  topProductsData,\n  topCustomersData,\n  salesByHourData,\n  salesByDayData,\n  salesByMonthData\n} from '../data/mockData';\n\n// Configuración del servicio\nconst API_BASE_URL = '/api'; // URL base para la API real (cuando se implemente)\nconst USE_MOCK_DATA = true; // Cambiar a false cuando se conecte a la API real\n\n/**\n * Obtiene las ventas del día actual\n * @returns {Promise<Object>} Datos de ventas diarias\n */\nexport async function getDailySales() {\n  if (USE_MOCK_DATA) {\n    // Simular un retraso de red para imitar una API real\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return dailySalesData;\n  } else {\n    // Código para obtener datos de la API real\n    const response = await fetch(`${API_BASE_URL}/sales/daily`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas diarias');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene las ventas de la semana actual\n * @returns {Promise<Object>} Datos de ventas semanales\n */\nexport async function getWeeklySales() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return weeklySalesData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/weekly`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas semanales');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene las ventas del mes actual\n * @returns {Promise<Object>} Datos de ventas mensuales\n */\nexport async function getMonthlySales() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return monthlySalesData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/monthly`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas mensuales');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene los productos más vendidos\n * @param {number} limit - Número máximo de productos a obtener\n * @returns {Promise<Array>} Lista de productos más vendidos\n */\nexport async function getTopProducts(limit = 5) {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return topProductsData.slice(0, limit);\n  } else {\n    const response = await fetch(`${API_BASE_URL}/products/top?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de productos más vendidos');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene los clientes principales\n * @param {number} limit - Número máximo de clientes a obtener\n * @returns {Promise<Array>} Lista de clientes principales\n */\nexport async function getTopCustomers(limit = 5) {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return topCustomersData.slice(0, limit);\n  } else {\n    const response = await fetch(`${API_BASE_URL}/customers/top?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de clientes principales');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene las ventas por hora para el día actual\n * @returns {Promise<Array>} Datos de ventas por hora\n */\nexport async function getSalesByHour() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByHourData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-hour`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por hora');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene las ventas por día para la semana actual\n * @returns {Promise<Array>} Datos de ventas por día\n */\nexport async function getSalesByDay() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByDayData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-day`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por día');\n    }\n    return await response.json();\n  }\n}\n\n/**\n * Obtiene las ventas por mes para el año actual\n * @returns {Promise<Array>} Datos de ventas por mes\n */\nexport async function getSalesByMonth() {\n  if (USE_MOCK_DATA) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return salesByMonthData;\n  } else {\n    const response = await fetch(`${API_BASE_URL}/sales/by-month`);\n    if (!response.ok) {\n      throw new Error('Error al obtener datos de ventas por mes');\n    }\n    return await response.json();\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}